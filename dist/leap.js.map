{"version":3,"sources":["../node_modules/babel-plugin-transform-regenerator/node_modules/regenerator-transform/src/leap.js"],"names":["assert","Entry","t","exports","label","catchEntry","finallyEntry","Emitter","require","emitter","LMp","LeapManager","entry","callback","popped","i","loc"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nimport assert from \"assert\";\nimport * as t from \"babel-types\";\nimport { inherits } from \"util\";\n\nfunction Entry() {\n  assert.ok(this instanceof Entry);\n}\n\nfunction FunctionEntry(returnLoc) {\n  Entry.call(this);\n  t.assertLiteral(returnLoc);\n  this.returnLoc = returnLoc;\n}\n\ninherits(FunctionEntry, Entry);\nexports.FunctionEntry = FunctionEntry;\n\nfunction LoopEntry(breakLoc, continueLoc, label) {\n  Entry.call(this);\n\n  t.assertLiteral(breakLoc);\n  t.assertLiteral(continueLoc);\n\n  if (label) {\n    t.assertIdentifier(label);\n  } else {\n    label = null;\n  }\n\n  this.breakLoc = breakLoc;\n  this.continueLoc = continueLoc;\n  this.label = label;\n}\n\ninherits(LoopEntry, Entry);\nexports.LoopEntry = LoopEntry;\n\nfunction SwitchEntry(breakLoc) {\n  Entry.call(this);\n  t.assertLiteral(breakLoc);\n  this.breakLoc = breakLoc;\n}\n\ninherits(SwitchEntry, Entry);\nexports.SwitchEntry = SwitchEntry;\n\nfunction TryEntry(firstLoc, catchEntry, finallyEntry) {\n  Entry.call(this);\n\n  t.assertLiteral(firstLoc);\n\n  if (catchEntry) {\n    assert.ok(catchEntry instanceof CatchEntry);\n  } else {\n    catchEntry = null;\n  }\n\n  if (finallyEntry) {\n    assert.ok(finallyEntry instanceof FinallyEntry);\n  } else {\n    finallyEntry = null;\n  }\n\n  // Have to have one or the other (or both).\n  assert.ok(catchEntry || finallyEntry);\n\n  this.firstLoc = firstLoc;\n  this.catchEntry = catchEntry;\n  this.finallyEntry = finallyEntry;\n}\n\ninherits(TryEntry, Entry);\nexports.TryEntry = TryEntry;\n\nfunction CatchEntry(firstLoc, paramId) {\n  Entry.call(this);\n\n  t.assertLiteral(firstLoc);\n  t.assertIdentifier(paramId);\n\n  this.firstLoc = firstLoc;\n  this.paramId = paramId;\n}\n\ninherits(CatchEntry, Entry);\nexports.CatchEntry = CatchEntry;\n\nfunction FinallyEntry(firstLoc, afterLoc) {\n  Entry.call(this);\n  t.assertLiteral(firstLoc);\n  t.assertLiteral(afterLoc);\n  this.firstLoc = firstLoc;\n  this.afterLoc = afterLoc;\n}\n\ninherits(FinallyEntry, Entry);\nexports.FinallyEntry = FinallyEntry;\n\nfunction LabeledEntry(breakLoc, label) {\n  Entry.call(this);\n\n  t.assertLiteral(breakLoc);\n  t.assertIdentifier(label);\n\n  this.breakLoc = breakLoc;\n  this.label = label;\n}\n\ninherits(LabeledEntry, Entry);\nexports.LabeledEntry = LabeledEntry;\n\nfunction LeapManager(emitter) {\n  assert.ok(this instanceof LeapManager);\n\n  let Emitter = require(\"./emit\").Emitter;\n  assert.ok(emitter instanceof Emitter);\n\n  this.emitter = emitter;\n  this.entryStack = [new FunctionEntry(emitter.finalLoc)];\n}\n\nlet LMp = LeapManager.prototype;\nexports.LeapManager = LeapManager;\n\nLMp.withEntry = function(entry, callback) {\n  assert.ok(entry instanceof Entry);\n  this.entryStack.push(entry);\n  try {\n    callback.call(this.emitter);\n  } finally {\n    let popped = this.entryStack.pop();\n    assert.strictEqual(popped, entry);\n  }\n};\n\nLMp._findLeapLocation = function(property, label) {\n  for (let i = this.entryStack.length - 1; i >= 0; --i) {\n    let entry = this.entryStack[i];\n    let loc = entry[property];\n    if (loc) {\n      if (label) {\n        if (entry.label &&\n            entry.label.name === label.name) {\n          return loc;\n        }\n      } else if (entry instanceof LabeledEntry) {\n        // Ignore LabeledEntry entries unless we are actually breaking to\n        // a label.\n      } else {\n        return loc;\n      }\n    }\n  }\n\n  return null;\n};\n\nLMp.getBreakLoc = function(label) {\n  return this._findLeapLocation(\"breakLoc\", label);\n};\n\nLMp.getContinueLoc = function(label) {\n  return this._findLeapLocation(\"continueLoc\", label);\n};\n"],"file":"leap.js"}