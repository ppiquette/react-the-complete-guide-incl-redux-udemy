{"version":3,"sources":["../main.js"],"names":["regularFunction","console","log","regular_javascript_variable","same_as_var","could_not_be_changed","printMyName","name","squared","number","Math","pow","squared_short","Human","sex","Person","somebody","printStuff","myConstant"],"mappings":";;AAsFA;;AAGA;;;;;;;;;;;;;;;;;;;;;;AAxFA;AACA,SAASA,eAAT,GAA0B;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;AACDF,eAAe,G,CAGf;AACA;AAEA;AACA;AACA;AAEA;;AACA,IAAIG,2BAA2B,GAAG,EAAlC,C,CAEA;;AACA,IAAIC,WAAW,GAAG,EAAlB,C,CAEA;;AACA,IAAMC,oBAAoB,GAAG,EAA7B,C,CAEA;AACA;AACA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AAC1BN,EAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACH,CAFD;;AAGAD,WAAW,CAAC,KAAD,CAAX,C,CAEA;;AACA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAAY;AACxB,SAAOC,IAAI,CAACC,GAAL,CAASF,MAAT,EAAiB,CAAjB,CAAP;AACH,CAFD;;AAGAR,OAAO,CAACC,GAAR,CAAYM,OAAO,CAACH,oBAAD,CAAnB,E,CAEA;AACA;AACA;;AACA,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAAAH,MAAM;AAAA,SAAIC,IAAI,CAACC,GAAL,CAASF,MAAT,EAAiB,CAAjB,CAAJ;AAAA,CAA5B;;AACAR,OAAO,CAACC,GAAR,CAAYU,aAAa,CAACR,WAAD,CAAzB,E,CAGA;AACA;AACA;AAEA;;IAEMS,K,GACF;AACA,iBAAa;AAAA;;AACT,OAAKC,GAAL,GAAW,GAAX;AACH,C;;IAICC,M;;;;;AACF,oBAAa;AAAA;;AAAA;;AACT;AACA;AACA,UAAKR,IAAL,GAAY,UAAZ;AAHS;AAIZ;;;;iCAEY;AACTN,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKK,IAAjB;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKY,GAAjB;AACH;;;;EAVgBD,K,GAcrB;;;AACA,IAAIG,QAAQ,GAAG,IAAID,MAAJ,EAAf;AACAC,QAAQ,CAACC,UAAT,G,CAGA;AACA;AACA;AAEA;AACA;AACA;;AAGA;AAIA,2CAAWC,qCAAX","sourcesContent":["\n// Regular javascript function\nfunction regularFunction(){\n    console.log(\"regular javascript function\")\n}\nregularFunction()\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// NextGen Javascript functionality\n\n//\n// let and const\n//\n\n// Standard Javascript variable\nvar regular_javascript_variable = 67;\n\n// New syntax but like var\nlet same_as_var = 67;\n\n// as it names suggested, constant\nconst could_not_be_changed = 67;\n\n//\n// Arrow function\n//\nconst printMyName = (name) => {\n    console.log(name)\n};\nprintMyName('Max');\n\n// With a return value\nconst squared = (number) => {\n    return Math.pow(number, 2);\n};\nconsole.log(squared(could_not_be_changed));\n\n// concise version\n// if one parameter -> no () required\n// just return something -> no return keyword required\nconst squared_short = number => Math.pow(number, 2);\nconsole.log(squared_short(same_as_var));\n\n\n//\n// Classes\n//\n\n// very similar to javascript function instantiation (whatever it is)\n\nclass Human {\n    // required\n    constructor(){\n        this.sex = \"M\"\n    }\n\n}\n\nclass Person extends Human {\n    constructor(){\n        // need to call constructor of parent like in Python\n        super();\n        this.name = \"BillyBob\"\n    }\n\n    printStuff() {\n        console.log(this.name)\n        console.log(this.sex)\n    }\n}\n\n\n// Instantiation of a class\nlet somebody = new Person();\nsomebody.printStuff();\n\n\n//\n// export and import\n//\n\n// Need to compile the code with Babel first. You can run the compiler in command line, or make transpiling\n// a part of your build process (using Gulp, Grunt, WebPack, etc.).\n// In WebStorm: https://blog.jetbrains.com/webstorm/2015/05/ecmascript-6-in-webstorm-transpiling/\n\nimport any_name from \"./defaultexport.js\";\nany_name();\n\nimport {myConstant} from \"./export_items_individually\";\nimport {myFunction} from \"./export_items_individually\";\nmyFunction(myConstant);\n"],"file":"main.js"}