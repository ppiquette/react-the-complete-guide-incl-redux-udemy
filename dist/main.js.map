{"version":3,"sources":["../main.js"],"names":["regularFunction","console","log","regular_javascript_variable","same_as_var","could_not_be_changed","printMyName","name","squared","number","Math","pow","squared_short","myConstant","Human","sex","Person","somebody","printStuff","PersonNew","somebody_else"],"mappings":";;AAoEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAtEA;AACA,SAASA,eAAT,GAA0B;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;AACDF,eAAe,G,CAIf;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;;AACAC,OAAO,CAACC,GAAR,CAAY,uBAAZ,E,CAEA;;AACA,IAAIC,2BAA2B,GAAG,EAAlC,C,CAEA;;AACA,IAAIC,WAAW,GAAG,EAAlB,C,CAEA;;AACA,IAAMC,oBAAoB,GAAG,EAA7B,C,CAKA;AACA;AACA;;AACAJ,OAAO,CAACC,GAAR,CAAY,2BAAZ;;AAEA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AAC1BN,EAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACH,CAFD;;AAGAD,WAAW,CAAC,KAAD,CAAX,C,CAEA;;AACA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAAY;AACxB,SAAOC,IAAI,CAACC,GAAL,CAASF,MAAT,EAAiB,CAAjB,CAAP;AACH,CAFD;;AAGAR,OAAO,CAACC,GAAR,CAAYM,OAAO,CAACH,oBAAD,CAAnB,E,CAEA;AACA;AACA;;AACA,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAAAH,MAAM;AAAA,SAAIC,IAAI,CAACC,GAAL,CAASF,MAAT,EAAiB,CAAjB,CAAJ;AAAA,CAA5B;;AACAR,OAAO,CAACC,GAAR,CAAYU,aAAa,CAACR,WAAD,CAAzB,E,CAKA;AACA;AACA;AACA;AACA;AACA;;AACAH,OAAO,CAACC,GAAR,CAAY,6CAAZ;AAGA;AAIA,2CAAWW,qCAAX,E,CAKA;AACA;AACA;AAEA;AACA;;AACAZ,OAAO,CAACC,GAAR,CAAY,mBAAZ;;IAEMY,K,GACF;AACA,iBAAa;AAAA;;AACT,OAAKC,GAAL,GAAW,GAAX;AACH,C;;IAICC,M;;;;;AACF,oBAAa;AAAA;;AAAA;;AACT;AACA;AACA,UAAKT,IAAL,GAAY,UAAZ;AAHS;AAIZ;;;;iCAEY;AACTN,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKK,IAA5B;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,KAAKa,GAA3B;AACH;;;;EAVgBD,K,GAYrB;;;AACA,IAAIG,QAAQ,GAAG,IAAID,MAAJ,EAAf;AACAC,QAAQ,CAACC,UAAT,G,CAMA;AACA;AACA;;AACAjB,OAAO,CAACC,GAAR,CAAY,iEAAZ,E,CAEA;AACA;AACA;;IACMiB,S;;;;;gCACK,O;;sCAEM,YAAM;AACflB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,MAAI,CAACK,IAA5B;AACH,G;;;AAGL,IAAIa,aAAa,GAAG,IAAID,SAAJ,EAApB;AACAC,aAAa,CAACF,UAAd","sourcesContent":["\n// Regular javascript function\nfunction regularFunction(){\n    console.log(\"regular javascript function\")\n}\nregularFunction()\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// NextGen Javascript functionality\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// let and const\n//\nconsole.log(\"*** let and const ***\")\n\n// Standard Javascript variable\nvar regular_javascript_variable = 67;\n\n// New syntax but like var\nlet same_as_var = 67;\n\n// as it names suggested, constant\nconst could_not_be_changed = 67;\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Arrow Functions\n//\nconsole.log(\"\\n*** Arrow Functions ***\")\n\nconst printMyName = (name) => {\n    console.log(name)\n};\nprintMyName('Max');\n\n// With a return value\nconst squared = (number) => {\n    return Math.pow(number, 2);\n};\nconsole.log(squared(could_not_be_changed));\n\n// concise version\n// if one parameter -> no () required\n// just return something -> no return keyword required\nconst squared_short = number => Math.pow(number, 2);\nconsole.log(squared_short(same_as_var));\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Export and Import (between files)\n//\n// Need to compile the code with Babel first. You can run the compiler in command line, or make transpiling\n// a part of your build process (using Gulp, Grunt, WebPack, etc.).\n// In WebStorm: https://blog.jetbrains.com/webstorm/2015/05/ecmascript-6-in-webstorm-transpiling/\nconsole.log(\"\\n*** Export and Import (between files) ***\")\n\nimport any_name from \"./defaultexport.js\";\nany_name();\n\nimport {myConstant} from \"./export_items_individually\";\nimport {myFunction} from \"./export_items_individually\";\nmyFunction(myConstant);\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Classes\n//\n\n// very similar to javascript function instantiation\n// (for more details https://medium.com/dailyjs/instantiation-patterns-in-javascript-8fdcf69e8f9b)\nconsole.log(\"\\n*** Classes ***\")\n\nclass Human {\n    // required\n    constructor(){\n        this.sex = \"M\";\n    }\n\n}\n\nclass Person extends Human {\n    constructor(){\n        // need to call constructor of parent like in Python\n        super();\n        this.name = \"BillyBob\";\n    }\n\n    printStuff() {\n        console.log(\"Name is\", this.name);\n        console.log(\"Sex is\", this.sex);\n    }\n}\n// Instantiation of a class\nlet somebody = new Person();\nsomebody.printStuff();\n\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Modern Syntax for Properties and Functions in Classes\n//\nconsole.log(\"\\n*** Modern Syntax for Properties and Functions in Classes ***\")\n\n// Modern syntax introduced in ES7 for defining:\n//  - variable outside of a constructor() function with no \"this\"\n//  - class functions using arrow functions\nclass PersonNew {\n    name = 'Jerry';\n\n    printStuff = () => {\n        console.log(\"Name is\", this.name);\n    }\n}\n\nlet somebody_else = new PersonNew();\nsomebody_else.printStuff();\n\n"],"file":"main.js"}