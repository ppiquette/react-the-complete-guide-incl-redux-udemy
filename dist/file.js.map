{"version":3,"sources":["../node_modules/babel-cli/lib/babel/file.js"],"names":["_stringify","require","_stringify2","_interopRequireDefault","_set","_set2","obj","default","convertSourceMap","sourceMap","slash","path","util","fs","module","commander","opts","results","buildResult","map","file","sourceRoot","code","offset","result","consumer","sources","mapping","generated","line","column","generatedColumn","source","original","originalColumn","content","output","mapLoc","process","stdin","chunk","sourceFileName","walk","_filenames","filenames","stat","dirname","sourceFilename","data","files","chokidar","persistent","ignoreInitial","awaitWriteFinish","stabilityThreshold","pollInterval","type","console","err"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar convertSourceMap = require(\"convert-source-map\");\nvar sourceMap = require(\"source-map\");\nvar slash = require(\"slash\");\nvar path = require(\"path\");\nvar util = require(\"./util\");\nvar fs = require(\"fs\");\n\nmodule.exports = function (commander, filenames, opts) {\n  if (commander.sourceMaps === \"inline\") {\n    opts.sourceMaps = true;\n  }\n\n  var results = [];\n\n  var buildResult = function buildResult() {\n    var map = new sourceMap.SourceMapGenerator({\n      file: path.basename(commander.outFile || \"\") || \"stdout\",\n      sourceRoot: opts.sourceRoot\n    });\n\n    var code = \"\";\n    var offset = 0;\n\n    results.forEach(function (result) {\n      code += result.code + \"\\n\";\n\n      if (result.map) {\n        var consumer = new sourceMap.SourceMapConsumer(result.map);\n        var sources = new _set2.default();\n\n        consumer.eachMapping(function (mapping) {\n          if (mapping.source != null) sources.add(mapping.source);\n\n          map.addMapping({\n            generated: {\n              line: mapping.generatedLine + offset,\n              column: mapping.generatedColumn\n            },\n            source: mapping.source,\n            original: mapping.source == null ? null : {\n              line: mapping.originalLine,\n              column: mapping.originalColumn\n            }\n          });\n        });\n\n        sources.forEach(function (source) {\n          var content = consumer.sourceContentFor(source, true);\n          if (content !== null) {\n            map.setSourceContent(source, content);\n          }\n        });\n\n        offset = code.split(\"\\n\").length - 1;\n      }\n    });\n\n    if (commander.sourceMaps === \"inline\" || !commander.outFile && commander.sourceMaps) {\n      code += \"\\n\" + convertSourceMap.fromObject(map).toComment();\n    }\n\n    return {\n      map: map,\n      code: code\n    };\n  };\n\n  var output = function output() {\n    var result = buildResult();\n\n    if (commander.outFile) {\n      if (commander.sourceMaps && commander.sourceMaps !== \"inline\") {\n        var mapLoc = commander.outFile + \".map\";\n        result.code = util.addSourceMappingUrl(result.code, mapLoc);\n        fs.writeFileSync(mapLoc, (0, _stringify2.default)(result.map));\n      }\n\n      fs.writeFileSync(commander.outFile, result.code);\n    } else {\n      process.stdout.write(result.code + \"\\n\");\n    }\n  };\n\n  var stdin = function stdin() {\n    var code = \"\";\n\n    process.stdin.setEncoding(\"utf8\");\n\n    process.stdin.on(\"readable\", function () {\n      var chunk = process.stdin.read();\n      if (chunk !== null) code += chunk;\n    });\n\n    process.stdin.on(\"end\", function () {\n      results.push(util.transform(commander.filename, code, {\n        sourceFileName: \"stdin\"\n      }));\n      output();\n    });\n  };\n\n  var walk = function walk() {\n    var _filenames = [];\n    results = [];\n\n    filenames.forEach(function (filename) {\n      if (!fs.existsSync(filename)) return;\n\n      var stat = fs.statSync(filename);\n      if (stat.isDirectory()) {\n        var dirname = filename;\n\n        util.readdirFilter(filename).forEach(function (filename) {\n          _filenames.push(path.join(dirname, filename));\n        });\n      } else {\n        _filenames.push(filename);\n      }\n    });\n\n    _filenames.forEach(function (filename) {\n      if (util.shouldIgnore(filename)) return;\n\n      var sourceFilename = filename;\n      if (commander.outFile) {\n        sourceFilename = path.relative(path.dirname(commander.outFile), sourceFilename);\n      }\n      sourceFilename = slash(sourceFilename);\n\n      var data = util.compile(filename, {\n        sourceFileName: sourceFilename\n      });\n\n      if (data.ignored) return;\n      results.push(data);\n    });\n\n    output();\n  };\n\n  var files = function files() {\n\n    if (!commander.skipInitialBuild) {\n      walk();\n    }\n\n    if (commander.watch) {\n      var chokidar = util.requireChokidar();\n      chokidar.watch(filenames, {\n        persistent: true,\n        ignoreInitial: true,\n        awaitWriteFinish: {\n          stabilityThreshold: 50,\n          pollInterval: 10\n        }\n      }).on(\"all\", function (type, filename) {\n        if (util.shouldIgnore(filename) || !util.canCompile(filename, commander.extensions)) return;\n\n        if (type === \"add\" || type === \"change\") {\n          util.log(type + \" \" + filename);\n          try {\n            walk();\n          } catch (err) {\n            console.error(err.stack);\n          }\n        }\n      });\n    }\n  };\n\n  if (filenames.length) {\n    files();\n  } else {\n    stdin();\n  }\n};"],"file":"file.js"}