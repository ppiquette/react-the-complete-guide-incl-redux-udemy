{"version":3,"sources":["../node_modules/babel-types/lib/definitions/core.js"],"names":["_index","require","t","_interopRequireWildcard","_constants","_index2","_index3","_interopRequireDefault","obj","default","newObj","Object","fields","elements","validate","visitor","aliases","operator","left","right","builder","value","directives","body","label","optional","callee","arguments","param","test","consequent","alternate","expression","program","init","update","id","params","generator","async","inherits","name","decorators","deprecatedAlias","pattern","flags","object","property","expectedType","node","computed","properties","kind","key","expectedTypes","shorthand","argument","expressions","discriminant","cases","handler","finalizer","prefix","declarations"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _index = require(\"../index\");\n\nvar t = _interopRequireWildcard(_index);\n\nvar _constants = require(\"../constants\");\n\nvar _index2 = require(\"./index\");\n\nvar _index3 = _interopRequireDefault(_index2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n(0, _index3.default)(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeOrValueType)(\"null\", \"Expression\", \"SpreadElement\"))),\n      default: []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    },\n    left: {\n      validate: (0, _index2.assertNodeType)(\"LVal\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)\n    },\n    left: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"]\n});\n\n(0, _index3.default)(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertNodeType)(\"DirectiveLiteral\")\n    }\n  }\n});\n\n(0, _index3.default)(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    }\n  }\n});\n\n(0, _index3.default)(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Directive\"))),\n      default: []\n    },\n    body: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"]\n});\n\n(0, _index3.default)(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n\n(0, _index3.default)(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\"],\n  fields: {\n    callee: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    arguments: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Expression\", \"SpreadElement\")))\n    }\n  },\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    }\n  },\n  aliases: [\"Scopable\"]\n});\n\n(0, _index3.default)(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    alternate: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\", \"Conditional\"]\n});\n\n(0, _index3.default)(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n\n(0, _index3.default)(\"DebuggerStatement\", {\n  aliases: [\"Statement\"]\n});\n\n(0, _index3.default)(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"]\n});\n\n(0, _index3.default)(\"EmptyStatement\", {\n  aliases: [\"Statement\"]\n});\n\n(0, _index3.default)(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"]\n});\n\n(0, _index3.default)(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: (0, _index2.assertNodeType)(\"Program\")\n    }\n  }\n});\n\n(0, _index3.default)(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: (0, _index2.assertNodeType)(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: (0, _index2.assertNodeType)(\"VariableDeclaration\", \"Expression\"),\n      optional: true\n    },\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    update: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    id: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\")\n    },\n    params: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  },\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Statement\", \"Pureish\", \"Declaration\"]\n});\n\n(0, _index3.default)(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: {\n    id: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    params: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  }\n});\n\n(0, _index3.default)(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    name: {\n      validate: function validate(node, key, val) {\n        if (!t.isValidIdentifier(val)) {}\n      }\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    },\n    alternate: {\n      optional: true,\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n(0, _index3.default)(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"number\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n(0, _index3.default)(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n(0, _index3.default)(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n(0, _index3.default)(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    },\n    flags: {\n      validate: (0, _index2.assertValueType)(\"string\"),\n      default: \"\"\n    }\n  }\n});\n\n(0, _index3.default)(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)\n    },\n    left: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index3.default)(\"MemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    property: {\n      validate: function validate(node, key, val) {\n        var expectedType = node.computed ? \"Expression\" : \"Identifier\";\n        (0, _index2.assertNodeType)(expectedType)(node, key, val);\n      }\n    },\n    computed: {\n      default: false\n    }\n  }\n});\n\n(0, _index3.default)(\"NewExpression\", {\n  visitor: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    arguments: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Expression\", \"SpreadElement\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"Program\", {\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\"],\n  fields: {\n    directives: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Directive\"))),\n      default: []\n    },\n    body: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"FunctionParent\"]\n});\n\n(0, _index3.default)(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"ObjectMethod\", \"ObjectProperty\", \"SpreadProperty\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\"],\n  fields: {\n    kind: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"string\"), (0, _index2.assertOneOf)(\"method\", \"get\", \"set\")),\n      default: \"method\"\n    },\n    computed: {\n      validate: (0, _index2.assertValueType)(\"boolean\"),\n      default: false\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\")))\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  },\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  aliases: [\"UserWhitespacable\", \"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"ObjectMember\"]\n});\n\n(0, _index3.default)(\"ObjectProperty\", {\n  builder: [\"key\", \"value\", \"computed\", \"shorthand\", \"decorators\"],\n  fields: {\n    computed: {\n      validate: (0, _index2.assertValueType)(\"boolean\"),\n      default: false\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    value: {\n      validate: (0, _index2.assertNodeType)(\"Expression\", \"Pattern\", \"RestElement\")\n    },\n    shorthand: {\n      validate: (0, _index2.assertValueType)(\"boolean\"),\n      default: false\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"]\n});\n\n(0, _index3.default)(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  aliases: [\"LVal\"],\n  fields: {\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"LVal\")\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    }\n  }\n});\n\n(0, _index3.default)(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Expression\")))\n    }\n  },\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    consequent: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Statement\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    cases: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"SwitchCase\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"ThisExpression\", {\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index3.default)(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    handler: {\n      optional: true,\n      handler: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    finalizer: {\n      optional: true,\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true\n    },\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"]\n});\n\n(0, _index3.default)(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false\n    },\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    kind: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"string\"), (0, _index2.assertOneOf)(\"var\", \"let\", \"const\"))\n    },\n    declarations: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"VariableDeclarator\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (0, _index2.assertNodeType)(\"LVal\")\n    },\n    init: {\n      optional: true,\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index3.default)(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\", \"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      object: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\", \"Statement\")\n    }\n  }\n});"],"file":"core.js"}