{"version":3,"sources":["../node_modules/babel-cli/node_modules/micromatch/lib/glob.js"],"names":["chars","require","utils","Glob","module","options","msg","pattern","a","b","expanded","escape","esc","re","o","ch","$0","unesc","str"],"mappings":"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","sourcesContent":["'use strict';\n\nvar chars = require('./chars');\nvar utils = require('./utils');\n\n/**\n * Expose `Glob`\n */\n\nvar Glob = module.exports = function Glob(pattern, options) {\n  if (!(this instanceof Glob)) {\n    return new Glob(pattern, options);\n  }\n  this.options = options || {};\n  this.pattern = pattern;\n  this.history = [];\n  this.tokens = {};\n  this.init(pattern);\n};\n\n/**\n * Initialize defaults\n */\n\nGlob.prototype.init = function(pattern) {\n  this.orig = pattern;\n  this.negated = this.isNegated();\n  this.options.track = this.options.track || false;\n  this.options.makeRe = true;\n};\n\n/**\n * Push a change into `glob.history`. Useful\n * for debugging.\n */\n\nGlob.prototype.track = function(msg) {\n  if (this.options.track) {\n    this.history.push({msg: msg, pattern: this.pattern});\n  }\n};\n\n/**\n * Return true if `glob.pattern` was negated\n * with `!`, also remove the `!` from the pattern.\n *\n * @return {Boolean}\n */\n\nGlob.prototype.isNegated = function() {\n  if (this.pattern.charCodeAt(0) === 33 /* '!' */) {\n    this.pattern = this.pattern.slice(1);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Expand braces in the given glob pattern.\n *\n * We only need to use the [braces] lib when\n * patterns are nested.\n */\n\nGlob.prototype.braces = function() {\n  if (this.options.nobraces !== true && this.options.nobrace !== true) {\n    // naive/fast check for imbalanced characters\n    var a = this.pattern.match(/[\\{\\(\\[]/g);\n    var b = this.pattern.match(/[\\}\\)\\]]/g);\n\n    // if imbalanced, don't optimize the pattern\n    if (a && b && (a.length !== b.length)) {\n      this.options.makeRe = false;\n    }\n\n    // expand brace patterns and join the resulting array\n    var expanded = utils.braces(this.pattern, this.options);\n    this.pattern = expanded.join('|');\n  }\n};\n\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\nGlob.prototype.brackets = function() {\n  if (this.options.nobrackets !== true) {\n    this.pattern = utils.brackets(this.pattern);\n  }\n};\n\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\nGlob.prototype.extglob = function() {\n  if (this.options.noextglob === true) return;\n\n  if (utils.isExtglob(this.pattern)) {\n    this.pattern = utils.extglob(this.pattern, {escape: true});\n  }\n};\n\n/**\n * Parse the given pattern\n */\n\nGlob.prototype.parse = function(pattern) {\n  this.tokens = utils.parseGlob(pattern || this.pattern, true);\n  return this.tokens;\n};\n\n/**\n * Replace `a` with `b`. Also tracks the change before and\n * after each replacement. This is disabled by default, but\n * can be enabled by setting `options.track` to true.\n *\n * Also, when the pattern is a string, `.split()` is used,\n * because it's much faster than replace.\n *\n * @param  {RegExp|String} `a`\n * @param  {String} `b`\n * @param  {Boolean} `escape` When `true`, escapes `*` and `?` in the replacement.\n * @return {String}\n */\n\nGlob.prototype._replace = function(a, b, escape) {\n  this.track('before (find): \"' + a + '\" (replace with): \"' + b + '\"');\n  if (escape) b = esc(b);\n  if (a && b && typeof a === 'string') {\n    this.pattern = this.pattern.split(a).join(b);\n  } else {\n    this.pattern = this.pattern.replace(a, b);\n  }\n  this.track('after');\n};\n\n/**\n * Escape special characters in the given string.\n *\n * @param  {String} `str` Glob pattern\n * @return {String}\n */\n\nGlob.prototype.escape = function(str) {\n  this.track('before escape: ');\n  var re = /[\"\\\\](['\"]?[^\"'\\\\]['\"]?)/g;\n\n  this.pattern = str.replace(re, function($0, $1) {\n    var o = chars.ESC;\n    var ch = o && o[$1];\n    if (ch) {\n      return ch;\n    }\n    if (/[a-z]/i.test($0)) {\n      return $0.split('\\\\').join('');\n    }\n    return $0;\n  });\n\n  this.track('after escape: ');\n};\n\n/**\n * Unescape special characters in the given string.\n *\n * @param  {String} `str`\n * @return {String}\n */\n\nGlob.prototype.unescape = function(str) {\n  var re = /__([A-Z]+)_([A-Z]+)__/g;\n  this.pattern = str.replace(re, function($0, $1) {\n    return chars[$1][$0];\n  });\n  this.pattern = unesc(this.pattern);\n};\n\n/**\n * Escape/unescape utils\n */\n\nfunction esc(str) {\n  str = str.split('?').join('%~');\n  str = str.split('*').join('%%');\n  return str;\n}\n\nfunction unesc(str) {\n  str = str.split('%~').join('?');\n  str = str.split('%%').join('*');\n  return str;\n}\n"],"file":"glob.js"}