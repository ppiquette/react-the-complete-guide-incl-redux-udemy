{"version":3,"sources":["../node_modules/babel-traverse/lib/path/inference/inferers.js"],"names":["exports","_infererReference","require","Object","enumerable","get","_interopRequireDefault","_babelTypes","t","_interopRequireWildcard","obj","newObj","default","id","node","TypeCastExpression","operator","right","left","ArrayExpression","RestElement","resolveCall","callee"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = exports.Identifier = undefined;\n\nvar _infererReference = require(\"./inferer-reference\");\n\nObject.defineProperty(exports, \"Identifier\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_infererReference).default;\n  }\n});\nexports.VariableDeclarator = VariableDeclarator;\nexports.TypeCastExpression = TypeCastExpression;\nexports.NewExpression = NewExpression;\nexports.TemplateLiteral = TemplateLiteral;\nexports.UnaryExpression = UnaryExpression;\nexports.BinaryExpression = BinaryExpression;\nexports.LogicalExpression = LogicalExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.AssignmentExpression = AssignmentExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.StringLiteral = StringLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NullLiteral = NullLiteral;\nexports.RegExpLiteral = RegExpLiteral;\nexports.ObjectExpression = ObjectExpression;\nexports.ArrayExpression = ArrayExpression;\nexports.RestElement = RestElement;\nexports.CallExpression = CallExpression;\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction VariableDeclarator() {\n  var id = this.get(\"id\");\n\n  if (id.isIdentifier()) {\n    return this.get(\"init\").getTypeAnnotation();\n  } else {\n    return;\n  }\n}\n\nfunction TypeCastExpression(node) {\n  return node.typeAnnotation;\n}\n\nTypeCastExpression.validParent = true;\n\nfunction NewExpression(node) {\n  if (this.get(\"callee\").isIdentifier()) {\n    return t.genericTypeAnnotation(node.callee);\n  }\n}\n\nfunction TemplateLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction UnaryExpression(node) {\n  var operator = node.operator;\n\n  if (operator === \"void\") {\n    return t.voidTypeAnnotation();\n  } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.stringTypeAnnotation();\n  } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  }\n}\n\nfunction BinaryExpression(node) {\n  var operator = node.operator;\n\n  if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  } else if (operator === \"+\") {\n    var right = this.get(\"right\");\n    var left = this.get(\"left\");\n\n    if (left.isBaseType(\"number\") && right.isBaseType(\"number\")) {\n      return t.numberTypeAnnotation();\n    } else if (left.isBaseType(\"string\") || right.isBaseType(\"string\")) {\n      return t.stringTypeAnnotation();\n    }\n\n    return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);\n  }\n}\n\nfunction LogicalExpression() {\n  return t.createUnionTypeAnnotation([this.get(\"left\").getTypeAnnotation(), this.get(\"right\").getTypeAnnotation()]);\n}\n\nfunction ConditionalExpression() {\n  return t.createUnionTypeAnnotation([this.get(\"consequent\").getTypeAnnotation(), this.get(\"alternate\").getTypeAnnotation()]);\n}\n\nfunction SequenceExpression() {\n  return this.get(\"expressions\").pop().getTypeAnnotation();\n}\n\nfunction AssignmentExpression() {\n  return this.get(\"right\").getTypeAnnotation();\n}\n\nfunction UpdateExpression(node) {\n  var operator = node.operator;\n  if (operator === \"++\" || operator === \"--\") {\n    return t.numberTypeAnnotation();\n  }\n}\n\nfunction StringLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction NumericLiteral() {\n  return t.numberTypeAnnotation();\n}\n\nfunction BooleanLiteral() {\n  return t.booleanTypeAnnotation();\n}\n\nfunction NullLiteral() {\n  return t.nullLiteralTypeAnnotation();\n}\n\nfunction RegExpLiteral() {\n  return t.genericTypeAnnotation(t.identifier(\"RegExp\"));\n}\n\nfunction ObjectExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Object\"));\n}\n\nfunction ArrayExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Array\"));\n}\n\nfunction RestElement() {\n  return ArrayExpression();\n}\n\nRestElement.validParent = true;\n\nfunction Func() {\n  return t.genericTypeAnnotation(t.identifier(\"Function\"));\n}\n\nexports.FunctionExpression = Func;\nexports.ArrowFunctionExpression = Func;\nexports.FunctionDeclaration = Func;\nexports.ClassExpression = Func;\nexports.ClassDeclaration = Func;\nfunction CallExpression() {\n  return resolveCall(this.get(\"callee\"));\n}\n\nfunction TaggedTemplateExpression() {\n  return resolveCall(this.get(\"tag\"));\n}\n\nfunction resolveCall(callee) {\n  callee = callee.resolve();\n\n  if (callee.isFunction()) {\n    if (callee.is(\"async\")) {\n      if (callee.is(\"generator\")) {\n        return t.genericTypeAnnotation(t.identifier(\"AsyncIterator\"));\n      } else {\n        return t.genericTypeAnnotation(t.identifier(\"Promise\"));\n      }\n    } else {\n      if (callee.node.returnType) {\n        return callee.node.returnType;\n      } else {}\n    }\n  }\n}"],"file":"inferers.js"}