{"version":3,"sources":["../node_modules/babel-generator/lib/generators/statements.js"],"names":["exports","_getIterator2","require","_getIterator3","_interopRequireDefault","_babelTypes","t","_interopRequireWildcard","obj","newObj","Object","default","node","needsBlock","getLastStatement","statement","buildForXStatement","op","ForInStatement","ForOfStatement","ForAwaitStatement","key","arguments","label","terminatorState","ContinueStatement","buildLabelStatement","ReturnStatement","BreakStatement","ThrowStatement","indent","addNewlines","i","hasInits","_iterator","_isArray","Array","_i","_ref","declar","separator","parent"],"mappings":"AAAA;;AAEAA,OAAO,CAAPA,UAAAA,GAAAA,IAAAA;AACAA,OAAO,CAAPA,cAAAA,GAAyBA,OAAO,CAAPA,cAAAA,GAAyBA,OAAO,CAAPA,eAAAA,GAA0BA,OAAO,CAAPA,iBAAAA,GAA4BA,OAAO,CAAPA,iBAAAA,GAA4BA,OAAO,CAAPA,cAAAA,GAAyBA,OAAO,CAAPA,cAAAA,GAA7JA,SAAAA;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAA3B,oCAA2B,CAA3B;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAA1C,aAA0C,CAA1C;;AAEAJ,OAAO,CAAPA,aAAAA,GAAAA,aAAAA;AACAA,OAAO,CAAPA,WAAAA,GAAAA,WAAAA;AACAA,OAAO,CAAPA,YAAAA,GAAAA,YAAAA;AACAA,OAAO,CAAPA,cAAAA,GAAAA,cAAAA;AACAA,OAAO,CAAPA,gBAAAA,GAAAA,gBAAAA;AACAA,OAAO,CAAPA,gBAAAA,GAAAA,gBAAAA;AACAA,OAAO,CAAPA,YAAAA,GAAAA,YAAAA;AACAA,OAAO,CAAPA,WAAAA,GAAAA,WAAAA;AACAA,OAAO,CAAPA,eAAAA,GAAAA,eAAAA;AACAA,OAAO,CAAPA,UAAAA,GAAAA,UAAAA;AACAA,OAAO,CAAPA,iBAAAA,GAAAA,iBAAAA;AACAA,OAAO,CAAPA,mBAAAA,GAAAA,mBAAAA;AACAA,OAAO,CAAPA,kBAAAA,GAAAA,kBAAAA;;AAEA,IAAIK,WAAW,GAAGH,OAAO,CAAzB,aAAyB,CAAzB;;AAEA,IAAII,CAAC,GAAGC,uBAAuB,CAA/B,WAA+B,CAA/B;;AAEA,SAAA,uBAAA,CAAA,GAAA,EAAsC;AAAE,MAAIC,GAAG,IAAIA,GAAG,CAAd,UAAA,EAA2B;AAAE,WAAA,GAAA;AAA7B,GAAA,MAAgD;AAAE,QAAIC,MAAM,GAAV,EAAA;;AAAiB,QAAID,GAAG,IAAP,IAAA,EAAiB;AAAE,WAAK,IAAL,GAAA,IAAA,GAAA,EAAqB;AAAE,YAAIE,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAJ,GAAIA,CAAJ,EAAoDD,MAAM,CAANA,GAAM,CAANA,GAAcD,GAAG,CAAjBC,GAAiB,CAAjBA;AAAyB;AAAE;;AAACA,IAAAA,MAAM,CAANA,OAAAA,GAAAA,GAAAA;AAAsB,WAAA,MAAA;AAAgB;AAAE;;AAE7Q,SAAA,sBAAA,CAAA,GAAA,EAAqC;AAAE,SAAOD,GAAG,IAAIA,GAAG,CAAVA,UAAAA,GAAAA,GAAAA,GAA8B;AAAEG,IAAAA,OAAO,EAAEH;AAAX,GAArC;AAAwD;;AAE/F,SAAA,aAAA,CAAA,IAAA,EAA6B;AAC3B,OAAA,IAAA,CAAA,MAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWI,IAAI,CAAf,MAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,UAAA,CAAA,IAAA;AACD;;AAED,SAAA,WAAA,CAAA,IAAA,EAA2B;AACzB,OAAA,IAAA,CAAA,IAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AAEA,MAAIC,UAAU,GAAGD,IAAI,CAAJA,SAAAA,IAAkBN,CAAC,CAADA,aAAAA,CAAgBQ,gBAAgB,CAACF,IAAI,CAAxE,UAAmE,CAAhCN,CAAnC;;AACA,MAAA,UAAA,EAAgB;AACd,SAAA,KAAA,CAAA,GAAA;AACA,SAAA,OAAA;AACA,SAAA,MAAA;AACD;;AAED,OAAA,wBAAA,CAA8BM,IAAI,CAAlC,UAAA,EAAA,IAAA;;AAEA,MAAA,UAAA,EAAgB;AACd,SAAA,MAAA;AACA,SAAA,OAAA;AACA,SAAA,KAAA,CAAA,GAAA;AACD;;AAED,MAAIA,IAAI,CAAR,SAAA,EAAoB;AAClB,QAAI,KAAA,QAAA,CAAJ,GAAI,CAAJ,EAAwB,KAAA,KAAA;AACxB,SAAA,IAAA,CAAA,MAAA;AACA,SAAA,KAAA;AACA,SAAA,wBAAA,CAA8BA,IAAI,CAAlC,SAAA,EAAA,IAAA;AACD;AACF;;AAED,SAAA,gBAAA,CAAA,SAAA,EAAqC;AACnC,MAAI,CAACN,CAAC,CAADA,WAAAA,CAAcS,SAAS,CAA5B,IAAKT,CAAL,EAAoC,OAAA,SAAA;AACpC,SAAOQ,gBAAgB,CAACC,SAAS,CAAjC,IAAuB,CAAvB;AACD;;AAED,SAAA,YAAA,CAAA,IAAA,EAA4B;AAC1B,OAAA,IAAA,CAAA,KAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AAEA,OAAA,yBAAA;AACA,OAAA,KAAA,CAAWH,IAAI,CAAf,IAAA,EAAA,IAAA;AACA,OAAA,yBAAA;AACA,OAAA,KAAA,CAAA,GAAA;;AAEA,MAAIA,IAAI,CAAR,IAAA,EAAe;AACb,SAAA,KAAA;AACA,SAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACD;;AACD,OAAA,KAAA,CAAA,GAAA;;AAEA,MAAIA,IAAI,CAAR,MAAA,EAAiB;AACf,SAAA,KAAA;AACA,SAAA,KAAA,CAAWA,IAAI,CAAf,MAAA,EAAA,IAAA;AACD;;AAED,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,UAAA,CAAA,IAAA;AACD;;AAED,SAAA,cAAA,CAAA,IAAA,EAA8B;AAC5B,OAAA,IAAA,CAAA,OAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,UAAA,CAAA,IAAA;AACD;;AAED,IAAII,kBAAkB,GAAG,SAAA,kBAAA,CAAA,EAAA,EAAgC;AACvD,SAAO,UAAA,IAAA,EAAgB;AACrB,SAAA,IAAA,CAAA,KAAA;AACA,SAAA,KAAA;;AACA,QAAIC,EAAE,KAAN,OAAA,EAAoB;AAClB,WAAA,IAAA,CAAA,OAAA;AACA,WAAA,KAAA;AACD;;AACD,SAAA,KAAA,CAAA,GAAA;AAEA,SAAA,KAAA,CAAWL,IAAI,CAAf,IAAA,EAAA,IAAA;AACA,SAAA,KAAA;AACA,SAAA,IAAA,CAAUK,EAAE,KAAFA,OAAAA,GAAAA,IAAAA,GAAV,EAAA;AACA,SAAA,KAAA;AACA,SAAA,KAAA,CAAWL,IAAI,CAAf,KAAA,EAAA,IAAA;AACA,SAAA,KAAA,CAAA,GAAA;AACA,SAAA,UAAA,CAAA,IAAA;AAfF,GAAA;AADF,CAAA;;AAoBA,IAAIM,cAAc,GAAGlB,OAAO,CAAPA,cAAAA,GAAyBgB,kBAAkB,CAAhE,IAAgE,CAAhE;AACA,IAAIG,cAAc,GAAGnB,OAAO,CAAPA,cAAAA,GAAyBgB,kBAAkB,CAAhE,IAAgE,CAAhE;AACA,IAAII,iBAAiB,GAAGpB,OAAO,CAAPA,iBAAAA,GAA4BgB,kBAAkB,CAAtE,OAAsE,CAAtE;;AAEA,SAAA,gBAAA,CAAA,IAAA,EAAgC;AAC9B,OAAA,IAAA,CAAA,IAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWJ,IAAI,CAAf,IAAA,EAAA,IAAA;AACA,OAAA,KAAA;AACA,OAAA,IAAA,CAAA,OAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,SAAA;AACD;;AAED,SAAA,mBAAA,CAAA,MAAA,EAAqC;AACnC,MAAIS,GAAG,GAAGC,SAAS,CAATA,MAAAA,GAAAA,CAAAA,IAAwBA,SAAS,CAATA,CAAS,CAATA,KAAxBA,SAAAA,GAAqDA,SAAS,CAA9DA,CAA8D,CAA9DA,GAAV,OAAA;AAEA,SAAO,UAAA,IAAA,EAAgB;AACrB,SAAA,IAAA,CAAA,MAAA;AAEA,QAAIC,KAAK,GAAGX,IAAI,CAAhB,GAAgB,CAAhB;;AACA,QAAA,KAAA,EAAW;AACT,WAAA,KAAA;AAEA,UAAIY,eAAe,GAAG,KAAtB,mBAAsB,EAAtB;AACA,WAAA,KAAA,CAAA,KAAA,EAAA,IAAA;AACA,WAAA,iBAAA,CAAA,eAAA;AACD;;AAED,SAAA,SAAA;AAZF,GAAA;AAcD;;AAED,IAAIC,iBAAiB,GAAGzB,OAAO,CAAPA,iBAAAA,GAA4B0B,mBAAmB,CAAvE,UAAuE,CAAvE;AACA,IAAIC,eAAe,GAAG3B,OAAO,CAAPA,eAAAA,GAA0B0B,mBAAmB,CAAA,QAAA,EAAnE,UAAmE,CAAnE;AACA,IAAIE,cAAc,GAAG5B,OAAO,CAAPA,cAAAA,GAAyB0B,mBAAmB,CAAjE,OAAiE,CAAjE;AACA,IAAIG,cAAc,GAAG7B,OAAO,CAAPA,cAAAA,GAAyB0B,mBAAmB,CAAA,OAAA,EAAjE,UAAiE,CAAjE;;AAEA,SAAA,gBAAA,CAAA,IAAA,EAAgC;AAC9B,OAAA,KAAA,CAAWd,IAAI,CAAf,KAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACD;;AAED,SAAA,YAAA,CAAA,IAAA,EAA4B;AAC1B,OAAA,IAAA,CAAA,KAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,KAAA,EAAA,IAAA;AACA,OAAA,KAAA;;AAEA,MAAIA,IAAI,CAAR,QAAA,EAAmB;AACjB,SAAA,KAAA,CAAWA,IAAI,CAAJA,QAAAA,CAAX,CAAWA,CAAX,EAAA,IAAA;AADF,GAAA,MAEO;AACL,SAAA,KAAA,CAAWA,IAAI,CAAf,OAAA,EAAA,IAAA;AACD;;AAED,MAAIA,IAAI,CAAR,SAAA,EAAoB;AAClB,SAAA,KAAA;AACA,SAAA,IAAA,CAAA,SAAA;AACA,SAAA,KAAA;AACA,SAAA,KAAA,CAAWA,IAAI,CAAf,SAAA,EAAA,IAAA;AACD;AACF;;AAED,SAAA,WAAA,CAAA,IAAA,EAA2B;AACzB,OAAA,IAAA,CAAA,OAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,KAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACD;;AAED,SAAA,eAAA,CAAA,IAAA,EAA+B;AAC7B,OAAA,IAAA,CAAA,QAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,YAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AAEA,OAAA,aAAA,CAAmBA,IAAI,CAAvB,KAAA,EAAA,IAAA,EAAqC;AACnCkB,IAAAA,MAAM,EAD6B,IAAA;AAEnCC,IAAAA,WAAW,EAAE,SAAA,WAAA,CAAA,OAAA,EAAA,GAAA,EAAmC;AAC9C,UAAI,CAAA,OAAA,IAAYnB,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,KAAAA,CAAAA,MAAAA,GAAXA,CAAAA,MAAhB,GAAA,EAA2D,OAAO,CAAP,CAAA;AAC5D;AAJkC,GAArC;AAOA,OAAA,KAAA,CAAA,GAAA;AACD;;AAED,SAAA,UAAA,CAAA,IAAA,EAA0B;AACxB,MAAIA,IAAI,CAAR,IAAA,EAAe;AACb,SAAA,IAAA,CAAA,MAAA;AACA,SAAA,KAAA;AACA,SAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACA,SAAA,KAAA,CAAA,GAAA;AAJF,GAAA,MAKO;AACL,SAAA,IAAA,CAAA,SAAA;AACA,SAAA,KAAA,CAAA,GAAA;AACD;;AAED,MAAIA,IAAI,CAAJA,UAAAA,CAAJ,MAAA,EAA4B;AAC1B,SAAA,OAAA;AACA,SAAA,aAAA,CAAmBA,IAAI,CAAvB,UAAA,EAAA,IAAA,EAA0C;AAAEkB,MAAAA,MAAM,EAAE;AAAV,KAA1C;AACD;AACF;;AAED,SAAA,iBAAA,GAA6B;AAC3B,OAAA,IAAA,CAAA,UAAA;AACA,OAAA,SAAA;AACD;;AAED,SAAA,wBAAA,GAAoC;AAClC,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,OAAA;AACA,MAAI,KAAA,QAAA,CAAJ,IAAI,CAAJ,EAAyB,KAAK,IAAIE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,CAAA,EAAuBA,CAAvB,EAAA,EAA4B;AACnD,SAAA,KAAA,CAAA,IAAA;AACD;AACF;;AAED,SAAA,qBAAA,GAAiC;AAC/B,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,OAAA;AACA,MAAI,KAAA,QAAA,CAAJ,IAAI,CAAJ,EAAyB,KAAK,IAAIA,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,CAAA,EAAuBA,CAAvB,EAAA,EAA4B;AACnD,SAAA,KAAA,CAAA,IAAA;AACD;AACF;;AAED,SAAA,mBAAA,CAAA,IAAA,EAAA,MAAA,EAA2C;AACzC,OAAA,IAAA,CAAUpB,IAAI,CAAd,IAAA;AACA,OAAA,KAAA;AAEA,MAAIqB,QAAQ,GAAZ,KAAA;;AAEA,MAAI,CAAC3B,CAAC,CAADA,KAAAA,CAAL,MAAKA,CAAL,EAAsB;AACpB,SAAK,IAAI4B,SAAS,GAAGtB,IAAI,CAApB,YAAA,EAAmCuB,QAAQ,GAAGC,KAAK,CAALA,OAAAA,CAA9C,SAA8CA,CAA9C,EAAwEC,EAAE,GAA1E,CAAA,EAAgFH,SAAS,GAAGC,QAAQ,GAAA,SAAA,GAAe,CAAC,GAAGhC,aAAa,CAAjB,OAAA,EAAxH,SAAwH,CAAxH,IAAiK;AAC/J,UAAA,IAAA;;AAEA,UAAA,QAAA,EAAc;AACZ,YAAIkC,EAAE,IAAIH,SAAS,CAAnB,MAAA,EAA4B;AAC5BI,QAAAA,IAAI,GAAGJ,SAAS,CAACG,EAAjBC,EAAgB,CAAhBA;AAFF,OAAA,MAGO;AACLD,QAAAA,EAAE,GAAGH,SAAS,CAAdG,IAAKH,EAALG;AACA,YAAIA,EAAE,CAAN,IAAA,EAAa;AACbC,QAAAA,IAAI,GAAGD,EAAE,CAATC,KAAAA;AACD;;AAED,UAAIC,MAAM,GAAV,IAAA;;AAEA,UAAIA,MAAM,CAAV,IAAA,EAAiB;AACfN,QAAAA,QAAQ,GAARA,IAAAA;AACD;AACF;AACF;;AAED,MAAIO,SAAS,GAAG,KAAhB,CAAA;;AACA,MAAA,QAAA,EAAc;AACZA,IAAAA,SAAS,GAAG5B,IAAI,CAAJA,IAAAA,KAAAA,OAAAA,GAAAA,qBAAAA,GAAZ4B,wBAAAA;AACD;;AAED,OAAA,SAAA,CAAe5B,IAAI,CAAnB,YAAA,EAAA,IAAA,EAAwC;AAAE4B,IAAAA,SAAS,EAAEA;AAAb,GAAxC;;AAEA,MAAIlC,CAAC,CAADA,KAAAA,CAAJ,MAAIA,CAAJ,EAAqB;AACnB,QAAImC,MAAM,CAANA,IAAAA,KAAAA,IAAAA,IAAwBA,MAAM,CAANA,IAAAA,KAA5B,IAAA,EAAkD;AACnD;;AAED,OAAA,SAAA;AACD;;AAED,SAAA,kBAAA,CAAA,IAAA,EAAkC;AAChC,OAAA,KAAA,CAAW7B,IAAI,CAAf,EAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAJA,EAAAA,CAAX,cAAA,EAAA,IAAA;;AACA,MAAIA,IAAI,CAAR,IAAA,EAAe;AACb,SAAA,KAAA;AACA,SAAA,KAAA,CAAA,GAAA;AACA,SAAA,KAAA;AACA,SAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACD;AACF","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForAwaitStatement = exports.ForOfStatement = exports.ForInStatement = undefined;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.WithStatement = WithStatement;\nexports.IfStatement = IfStatement;\nexports.ForStatement = ForStatement;\nexports.WhileStatement = WhileStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.TryStatement = TryStatement;\nexports.CatchClause = CatchClause;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchCase = SwitchCase;\nexports.DebuggerStatement = DebuggerStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n\n  var needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(\"}\")) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!t.isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nvar buildForXStatement = function buildForXStatement(op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n    if (op === \"await\") {\n      this.word(\"await\");\n      this.space();\n    }\n    this.token(\"(\");\n\n    this.print(node.left, node);\n    this.space();\n    this.word(op === \"await\" ? \"of\" : op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nvar ForInStatement = exports.ForInStatement = buildForXStatement(\"in\");\nvar ForOfStatement = exports.ForOfStatement = buildForXStatement(\"of\");\nvar ForAwaitStatement = exports.ForAwaitStatement = buildForXStatement(\"await\");\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"label\";\n\n  return function (node) {\n    this.word(prefix);\n\n    var label = node[key];\n    if (label) {\n      this.space();\n\n      var terminatorState = this.startTerminatorless();\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nvar ContinueStatement = exports.ContinueStatement = buildLabelStatement(\"continue\");\nvar ReturnStatement = exports.ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nvar BreakStatement = exports.BreakStatement = buildLabelStatement(\"break\");\nvar ThrowStatement = exports.ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.param, node);\n  this.token(\")\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n\n  this.printSequence(node.cases, node, {\n    indent: true,\n    addNewlines: function addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n  });\n\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, { indent: true });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIdent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (var i = 0; i < 4; i++) {\n    this.space(true);\n  }\n}\n\nfunction constDeclarationIdent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (var i = 0; i < 6; i++) {\n    this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  this.word(node.kind);\n  this.space();\n\n  var hasInits = false;\n\n  if (!t.isFor(parent)) {\n    for (var _iterator = node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var declar = _ref;\n\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  var separator = void 0;\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIdent : variableDeclarationIdent;\n  }\n\n  this.printList(node.declarations, node, { separator: separator });\n\n  if (t.isFor(parent)) {\n    if (parent.left === node || parent.init === node) return;\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}"],"file":"statements.js"}