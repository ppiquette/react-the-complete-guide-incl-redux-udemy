{"version":3,"sources":["../node_modules/babel-generator/lib/generators/flow.js"],"names":["exports","_types","require","Object","enumerable","get","_babelTypes","t","_interopRequireWildcard","obj","newObj","node","FlowExportDeclaration","declar","parent","separator","andSeparator","_this","props","addNewlines","leading","indent","statement","iterator","orSeparator"],"mappings":"AAAA;;AAEAA,OAAO,CAAPA,UAAAA,GAAAA,IAAAA;AACAA,OAAO,CAAPA,wBAAAA,GAAmCA,OAAO,CAAPA,2BAAAA,GAAsCA,OAAO,CAAPA,4BAAAA,GAAuCA,OAAO,CAAPA,qBAAAA,GAAgCA,OAAO,CAAPA,eAAAA,GAAhJA,SAAAA;AACAA,OAAO,CAAPA,iBAAAA,GAAAA,iBAAAA;AACAA,OAAO,CAAPA,mBAAAA,GAAAA,mBAAAA;AACAA,OAAO,CAAPA,qBAAAA,GAAAA,qBAAAA;AACAA,OAAO,CAAPA,4BAAAA,GAAAA,4BAAAA;AACAA,OAAO,CAAPA,yBAAAA,GAAAA,yBAAAA;AACAA,OAAO,CAAPA,YAAAA,GAAAA,YAAAA;AACAA,OAAO,CAAPA,eAAAA,GAAAA,eAAAA;AACAA,OAAO,CAAPA,gBAAAA,GAAAA,gBAAAA;AACAA,OAAO,CAAPA,aAAAA,GAAAA,aAAAA;AACAA,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;AACAA,OAAO,CAAPA,gBAAAA,GAAAA,gBAAAA;AACAA,OAAO,CAAPA,iBAAAA,GAAAA,iBAAAA;AACAA,OAAO,CAAPA,eAAAA,GAAAA,eAAAA;AACAA,OAAO,CAAPA,wBAAAA,GAAAA,wBAAAA;AACAA,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;AACAA,OAAO,CAAPA,sBAAAA,GAAAA,sBAAAA;AACAA,OAAO,CAAPA,iBAAAA,GAAAA,iBAAAA;AACAA,OAAO,CAAPA,gBAAAA,GAAAA,gBAAAA;AACAA,OAAO,CAAPA,aAAAA,GAAAA,aAAAA;AACAA,OAAO,CAAPA,SAAAA,GAAAA,SAAAA;AACAA,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;AACAA,OAAO,CAAPA,0BAAAA,GAAAA,0BAAAA;AACAA,OAAO,CAAPA,mBAAAA,GAAAA,mBAAAA;AACAA,OAAO,CAAPA,mBAAAA,GAAAA,mBAAAA;AACAA,OAAO,CAAPA,sBAAAA,GAAAA,sBAAAA;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAApB,SAAoB,CAApB;;AAEAC,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,8BAAAA,EAA+D;AAC7DC,EAAAA,UAAU,EADmD,IAAA;AAE7DC,EAAAA,GAAG,EAAE,SAAA,GAAA,GAAe;AAClB,WAAOJ,MAAM,CAAb,cAAA;AACD;AAJ4D,CAA/DE;AAMAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,6BAAAA,EAA8D;AAC5DC,EAAAA,UAAU,EADkD,IAAA;AAE5DC,EAAAA,GAAG,EAAE,SAAA,GAAA,GAAe;AAClB,WAAOJ,MAAM,CAAb,aAAA;AACD;AAJ2D,CAA9DE;AAMAH,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;AACAA,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;AACAA,OAAO,CAAPA,kBAAAA,GAAAA,kBAAAA;AACAA,OAAO,CAAPA,mBAAAA,GAAAA,mBAAAA;AACAA,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;AACAA,OAAO,CAAPA,SAAAA,GAAAA,SAAAA;AACAA,OAAO,CAAPA,UAAAA,GAAAA,UAAAA;AACAA,OAAO,CAAPA,cAAAA,GAAAA,cAAAA;AACAA,OAAO,CAAPA,aAAAA,GAAAA,aAAAA;AACAA,OAAO,CAAPA,0BAAAA,GAAAA,0BAAAA;AACAA,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;AACAA,OAAO,CAAPA,sBAAAA,GAAAA,sBAAAA;AACAA,OAAO,CAAPA,iBAAAA,GAAAA,iBAAAA;AACAA,OAAO,CAAPA,kBAAAA,GAAAA,kBAAAA;AACAA,OAAO,CAAPA,wBAAAA,GAAAA,wBAAAA;AACAA,OAAO,CAAPA,uBAAAA,GAAAA,uBAAAA;AACAA,OAAO,CAAPA,mBAAAA,GAAAA,mBAAAA;AACAA,OAAO,CAAPA,kBAAAA,GAAAA,kBAAAA;AACAA,OAAO,CAAPA,kBAAAA,GAAAA,kBAAAA;;AAEA,IAAIM,WAAW,GAAGJ,OAAO,CAAzB,aAAyB,CAAzB;;AAEA,IAAIK,CAAC,GAAGC,uBAAuB,CAA/B,WAA+B,CAA/B;;AAEA,SAAA,uBAAA,CAAA,GAAA,EAAsC;AAAE,MAAIC,GAAG,IAAIA,GAAG,CAAd,UAAA,EAA2B;AAAE,WAAA,GAAA;AAA7B,GAAA,MAAgD;AAAE,QAAIC,MAAM,GAAV,EAAA;;AAAiB,QAAID,GAAG,IAAP,IAAA,EAAiB;AAAE,WAAK,IAAL,GAAA,IAAA,GAAA,EAAqB;AAAE,YAAIN,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAJ,GAAIA,CAAJ,EAAoDO,MAAM,CAANA,GAAM,CAANA,GAAcD,GAAG,CAAjBC,GAAiB,CAAjBA;AAAyB;AAAE;;AAACA,IAAAA,MAAM,CAANA,OAAAA,GAAAA,GAAAA;AAAsB,WAAA,MAAA;AAAgB;AAAE;;AAE7Q,SAAA,iBAAA,GAA6B;AAC3B,OAAA,IAAA,CAAA,KAAA;AACD;;AAED,SAAA,mBAAA,CAAA,IAAA,EAAmC;AACjC,OAAA,KAAA,CAAWC,IAAI,CAAf,WAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACD;;AAED,SAAA,qBAAA,GAAiC;AAC/B,OAAA,IAAA,CAAA,SAAA;AACD;;AAED,SAAA,4BAAA,CAAA,IAAA,EAA4C;AAC1C,OAAA,IAAA,CAAUA,IAAI,CAAJA,KAAAA,GAAAA,MAAAA,GAAV,OAAA;AACD;;AAED,SAAA,yBAAA,GAAqC;AACnC,OAAA,IAAA,CAAA,MAAA;AACD;;AAED,SAAA,YAAA,CAAA,IAAA,EAAA,MAAA,EAAoC;AAClC,MAAI,CAACJ,CAAC,CAADA,0BAAAA,CAAL,MAAKA,CAAL,EAA2C;AACzC,SAAA,IAAA,CAAA,SAAA;AACA,SAAA,KAAA;AACD;;AACD,OAAA,IAAA,CAAA,OAAA;AACA,OAAA,KAAA;;AACA,OAAA,aAAA,CAAA,IAAA;AACD;;AAED,SAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAuC;AACrC,MAAI,CAACA,CAAC,CAADA,0BAAAA,CAAL,MAAKA,CAAL,EAA2C;AACzC,SAAA,IAAA,CAAA,SAAA;AACA,SAAA,KAAA;AACD;;AACD,OAAA,IAAA,CAAA,UAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWI,IAAI,CAAf,EAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAJA,EAAAA,CAAAA,cAAAA,CAAX,cAAA,EAAA,IAAA;AACA,OAAA,SAAA;AACD;;AAED,SAAA,gBAAA,CAAA,IAAA,EAAgC;AAC9B,OAAA,IAAA,CAAA,SAAA;AACA,OAAA,KAAA;AACA,OAAA,oBAAA,CAAA,IAAA;AACD;;AAED,SAAA,aAAA,CAAA,IAAA,EAA6B;AAC3B,OAAA,IAAA,CAAA,SAAA;AACA,OAAA,KAAA;AACA,OAAA,IAAA,CAAA,QAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,EAAA,EAAA,IAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACD;;AAED,SAAA,oBAAA,CAAA,IAAA,EAAoC;AAClC,OAAA,IAAA,CAAA,SAAA;AACA,OAAA,KAAA;AACA,OAAA,IAAA,CAAA,QAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,IAAA,CAAA,SAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;AACD;;AAED,SAAA,gBAAA,CAAA,IAAA,EAAgC;AAC9B,OAAA,IAAA,CAAA,SAAA;AACA,OAAA,KAAA;AACA,OAAA,SAAA,CAAA,IAAA;AACD;;AAED,SAAA,iBAAA,CAAA,IAAA,EAAA,MAAA,EAAyC;AACvC,MAAI,CAACJ,CAAC,CAADA,0BAAAA,CAAL,MAAKA,CAAL,EAA2C;AACzC,SAAA,IAAA,CAAA,SAAA;AACA,SAAA,KAAA;AACD;;AACD,OAAA,UAAA,CAAA,IAAA;AACD;;AAED,SAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAuC;AACrC,MAAI,CAACA,CAAC,CAADA,0BAAAA,CAAL,MAAKA,CAAL,EAA2C;AACzC,SAAA,IAAA,CAAA,SAAA;AACA,SAAA,KAAA;AACD;;AACD,OAAA,IAAA,CAAA,KAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWI,IAAI,CAAf,EAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAJA,EAAAA,CAAX,cAAA,EAAA,IAAA;AACA,OAAA,SAAA;AACD;;AAED,SAAA,wBAAA,CAAA,IAAA,EAAwC;AACtC,OAAA,IAAA,CAAA,SAAA;AACA,OAAA,KAAA;AACA,OAAA,IAAA,CAAA,QAAA;AACA,OAAA,KAAA;;AACA,MAAIA,IAAI,CAAR,OAAA,EAAkB;AAChB,SAAA,IAAA,CAAA,SAAA;AACA,SAAA,KAAA;AACD;;AAEDC,EAAAA,qBAAqB,CAArBA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA;AACD;;AAED,SAAA,qBAAA,CAAA,IAAA,EAAqC;AACnC,MAAID,IAAI,CAAR,WAAA,EAAsB;AACpB,QAAIE,MAAM,GAAGF,IAAI,CAAjB,WAAA;AACA,SAAA,KAAA,CAAA,MAAA,EAAA,IAAA;AACA,QAAI,CAACJ,CAAC,CAADA,WAAAA,CAAL,MAAKA,CAAL,EAA4B,KAAA,SAAA;AAH9B,GAAA,MAIO;AACL,SAAA,KAAA,CAAA,GAAA;;AACA,QAAII,IAAI,CAAJA,UAAAA,CAAJ,MAAA,EAA4B;AAC1B,WAAA,KAAA;AACA,WAAA,SAAA,CAAeA,IAAI,CAAnB,UAAA,EAAA,IAAA;AACA,WAAA,KAAA;AACD;;AACD,SAAA,KAAA,CAAA,GAAA;;AAEA,QAAIA,IAAI,CAAR,MAAA,EAAiB;AACf,WAAA,KAAA;AACA,WAAA,IAAA,CAAA,MAAA;AACA,WAAA,KAAA;AACA,WAAA,KAAA,CAAWA,IAAI,CAAf,MAAA,EAAA,IAAA;AACD;;AAED,SAAA,SAAA;AACD;AACF;;AAED,SAAA,oBAAA,GAAgC;AAC9B,OAAA,KAAA,CAAA,GAAA;AACD;;AAED,SAAA,sBAAA,CAAA,IAAA,EAAA,MAAA,EAA8C;AAC5C,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,SAAA,CAAeA,IAAI,CAAnB,MAAA,EAAA,IAAA;;AAEA,MAAIA,IAAI,CAAR,IAAA,EAAe;AACb,QAAIA,IAAI,CAAJA,MAAAA,CAAJ,MAAA,EAAwB;AACtB,WAAA,KAAA,CAAA,GAAA;AACA,WAAA,KAAA;AACD;;AACD,SAAA,KAAA,CAAA,KAAA;AACA,SAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACD;;AAED,OAAA,KAAA,CAAA,GAAA;;AAEA,MAAIG,MAAM,CAANA,IAAAA,KAAAA,wBAAAA,IAA4CA,MAAM,CAANA,IAAAA,KAAhD,iBAAA,EAAmF;AACjF,SAAA,KAAA,CAAA,GAAA;AADF,GAAA,MAEO;AACL,SAAA,KAAA;AACA,SAAA,KAAA,CAAA,IAAA;AACD;;AAED,OAAA,KAAA;AACA,OAAA,KAAA,CAAWH,IAAI,CAAf,UAAA,EAAA,IAAA;AACD;;AAED,SAAA,iBAAA,CAAA,IAAA,EAAiC;AAC/B,OAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACA,MAAIA,IAAI,CAAR,QAAA,EAAmB,KAAA,KAAA,CAAA,GAAA;AACnB,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;AACD;;AAED,SAAA,gBAAA,CAAA,IAAA,EAAgC;AAC9B,OAAA,KAAA,CAAWA,IAAI,CAAf,EAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;AACD;;AAEDX,OAAO,CAAPA,eAAAA,GAAAA,gBAAAA;AACAA,OAAO,CAAPA,qBAAAA,GAAAA,gBAAAA;;AACA,SAAA,aAAA,CAAA,IAAA,EAA6B;AAC3B,OAAA,KAAA,CAAWW,IAAI,CAAf,EAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;;AACA,MAAIA,IAAI,CAAJA,OAAAA,CAAJ,MAAA,EAAyB;AACvB,SAAA,KAAA;AACA,SAAA,IAAA,CAAA,SAAA;AACA,SAAA,KAAA;AACA,SAAA,SAAA,CAAeA,IAAI,CAAnB,OAAA,EAAA,IAAA;AACD;;AACD,MAAIA,IAAI,CAAJA,MAAAA,IAAeA,IAAI,CAAJA,MAAAA,CAAnB,MAAA,EAAuC;AACrC,SAAA,KAAA;AACA,SAAA,IAAA,CAAA,QAAA;AACA,SAAA,KAAA;AACA,SAAA,SAAA,CAAeA,IAAI,CAAnB,MAAA,EAAA,IAAA;AACD;;AACD,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,IAAA,EAAA,IAAA;AACD;;AAED,SAAA,SAAA,CAAA,IAAA,EAAyB;AACvB,MAAIA,IAAI,CAAJA,QAAAA,KAAJ,MAAA,EAA8B;AAC5B,SAAA,KAAA,CAAA,GAAA;AADF,GAAA,MAEO,IAAIA,IAAI,CAAJA,QAAAA,KAAJ,OAAA,EAA+B;AACpC,SAAA,KAAA,CAAA,GAAA;AACD;AACF;;AAED,SAAA,oBAAA,CAAA,IAAA,EAAoC;AAClC,OAAA,IAAA,CAAA,WAAA;AACA,OAAA,KAAA;;AACA,OAAA,aAAA,CAAA,IAAA;AACD;;AAED,SAAA,YAAA,GAAwB;AACtB,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACD;;AAED,SAAA,0BAAA,CAAA,IAAA,EAA0C;AACxC,OAAA,SAAA,CAAeA,IAAI,CAAnB,KAAA,EAAA,IAAA,EAAiC;AAAEI,IAAAA,SAAS,EAAEC;AAAb,GAAjC;AACD;;AAED,SAAA,mBAAA,GAA+B;AAC7B,OAAA,IAAA,CAAA,OAAA;AACD;;AAED,SAAA,mBAAA,GAA+B;AAC7B,OAAA,IAAA,CAAA,OAAA;AACD;;AAED,SAAA,sBAAA,CAAA,IAAA,EAAsC;AACpC,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWL,IAAI,CAAf,cAAA,EAAA,IAAA;AACD;;AAED,SAAA,oBAAA,GAAgC;AAC9B,OAAA,IAAA,CAAA,QAAA;AACD;;AAED,SAAA,oBAAA,GAAgC;AAC9B,OAAA,IAAA,CAAA,QAAA;AACD;;AAED,SAAA,kBAAA,GAA8B;AAC5B,OAAA,IAAA,CAAA,MAAA;AACD;;AAED,SAAA,mBAAA,CAAA,IAAA,EAAmC;AACjC,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,SAAA,CAAeA,IAAI,CAAnB,KAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACD;;AAED,SAAA,oBAAA,CAAA,IAAA,EAAoC;AAClC,OAAA,IAAA,CAAA,QAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,QAAA,EAAA,IAAA;AACD;;AAED,SAAA,SAAA,CAAA,IAAA,EAAyB;AACvB,OAAA,IAAA,CAAA,MAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,EAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,KAAA,EAAA,IAAA;AACA,OAAA,SAAA;AACD;;AACD,SAAA,UAAA,CAAA,IAAA,EAA0B;AACxB,OAAA,IAAA,CAAA,QAAA;AACA,OAAA,KAAA;AACA,OAAA,IAAA,CAAA,MAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,EAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;;AACA,MAAIA,IAAI,CAAR,SAAA,EAAoB;AAClB,SAAA,KAAA,CAAA,GAAA;AACA,SAAA,KAAA;AACA,SAAA,KAAA,CAAWA,IAAI,CAAf,SAAA,EAAA,IAAA;AACD;;AACD,MAAIA,IAAI,CAAR,QAAA,EAAmB;AACjB,SAAA,KAAA;AACA,SAAA,KAAA,CAAA,GAAA;AACA,SAAA,KAAA;AACA,SAAA,KAAA,CAAWA,IAAI,CAAf,QAAA,EAAA,IAAA;AACD;;AACD,OAAA,SAAA;AACD;;AAED,SAAA,cAAA,CAAA,IAAA,EAA8B;AAC5B,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACA,MAAIA,IAAI,CAAR,QAAA,EAAmB,KAAA,KAAA,CAAA,GAAA;AACnB,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;AACD;;AAED,SAAA,aAAA,CAAA,IAAA,EAA6B;AAC3B,OAAA,SAAA,CAAA,IAAA;;AAEA,OAAA,IAAA,CAAUA,IAAI,CAAd,IAAA;;AAEA,MAAIA,IAAI,CAAR,KAAA,EAAgB;AACd,SAAA,KAAA,CAAWA,IAAI,CAAf,KAAA,EAAA,IAAA;AACD;;AAED,MAAIA,IAAI,CAAR,OAAA,EAAkB;AAChB,SAAA,KAAA;AACA,SAAA,KAAA,CAAA,GAAA;AACA,SAAA,KAAA;AACA,SAAA,KAAA,CAAWA,IAAI,CAAf,OAAA,EAAA,IAAA;AACD;AACF;;AAED,SAAA,0BAAA,CAAA,IAAA,EAA0C;AACxC,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,SAAA,CAAeA,IAAI,CAAnB,MAAA,EAAA,IAAA,EAAA,EAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACD;;AAEDX,OAAO,CAAPA,wBAAAA,GAAAA,0BAAAA;;AACA,SAAA,oBAAA,CAAA,IAAA,EAAoC;AAClC,MAAIiB,KAAK,GAAT,IAAA;;AAEA,MAAIN,IAAI,CAAR,KAAA,EAAgB;AACd,SAAA,KAAA,CAAA,IAAA;AADF,GAAA,MAEO;AACL,SAAA,KAAA,CAAA,GAAA;AACD;;AAED,MAAIO,KAAK,GAAGP,IAAI,CAAJA,UAAAA,CAAAA,MAAAA,CAAuBA,IAAI,CAA3BA,cAAAA,EAA4CA,IAAI,CAA5D,QAAYA,CAAZ;;AAEA,MAAIO,KAAK,CAAT,MAAA,EAAkB;AAChB,SAAA,KAAA;AAEA,SAAA,SAAA,CAAA,KAAA,EAAA,IAAA,EAA4B;AAC1BC,MAAAA,WAAW,EAAE,SAAA,WAAA,CAAA,OAAA,EAA8B;AACzC,YAAIC,OAAO,IAAI,CAACF,KAAK,CAArB,CAAqB,CAArB,EAA0B,OAAA,CAAA;AAFF,OAAA;AAK1BG,MAAAA,MAAM,EALoB,IAAA;AAM1BC,MAAAA,SAAS,EANiB,IAAA;AAO1BC,MAAAA,QAAQ,EAAE,SAAA,QAAA,GAAoB;AAC5B,YAAIL,KAAK,CAALA,MAAAA,KAAJ,CAAA,EAAwB;AACtB,cAAID,KAAK,CAALA,MAAAA,CAAJ,kBAAA,EAAqC;AACnCA,YAAAA,KAAK,CAALA,KAAAA,CAAAA,GAAAA;AADF,WAAA,MAEO;AACLA,YAAAA,KAAK,CAALA,SAAAA;AACD;;AACDA,UAAAA,KAAK,CAALA,KAAAA;AACD;AACF;AAhByB,KAA5B;AAmBA,SAAA,KAAA;AACD;;AAED,MAAIN,IAAI,CAAR,KAAA,EAAgB;AACd,SAAA,KAAA,CAAA,IAAA;AADF,GAAA,MAEO;AACL,SAAA,KAAA,CAAA,GAAA;AACD;AACF;;AAED,SAAA,sBAAA,CAAA,IAAA,EAAsC;AACpC,MAAIA,IAAI,CAAR,MAAA,EAAiB;AACf,SAAA,IAAA,CAAA,QAAA;AACA,SAAA,KAAA;AACD;;AACD,OAAA,KAAA,CAAWA,IAAI,CAAf,KAAA,EAAA,IAAA;AACD;;AAED,SAAA,iBAAA,CAAA,IAAA,EAAiC;AAC/B,MAAIA,IAAI,CAAR,MAAA,EAAiB;AACf,SAAA,IAAA,CAAA,QAAA;AACA,SAAA,KAAA;AACD;;AACD,OAAA,SAAA,CAAA,IAAA;;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,EAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,GAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,KAAA,EAAA,IAAA;AACD;;AAED,SAAA,kBAAA,CAAA,IAAA,EAAkC;AAChC,MAAIA,IAAI,CAAR,MAAA,EAAiB;AACf,SAAA,IAAA,CAAA,QAAA;AACA,SAAA,KAAA;AACD;;AACD,OAAA,SAAA,CAAA,IAAA;;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,GAAA,EAAA,IAAA;AACA,MAAIA,IAAI,CAAR,QAAA,EAAmB,KAAA,KAAA,CAAA,GAAA;AACnB,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,KAAA,EAAA,IAAA;AACD;;AAED,SAAA,wBAAA,CAAA,IAAA,EAAwC;AACtC,OAAA,KAAA,CAAA,KAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,QAAA,EAAA,IAAA;AACD;;AAED,SAAA,uBAAA,CAAA,IAAA,EAAuC;AACrC,OAAA,KAAA,CAAWA,IAAI,CAAf,aAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,EAAA,EAAA,IAAA;AACD;;AAED,SAAA,WAAA,GAAuB;AACrB,OAAA,KAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA;AACD;;AAED,SAAA,mBAAA,CAAA,IAAA,EAAmC;AACjC,OAAA,SAAA,CAAeA,IAAI,CAAnB,KAAA,EAAA,IAAA,EAAiC;AAAEI,IAAAA,SAAS,EAAES;AAAb,GAAjC;AACD;;AAED,SAAA,kBAAA,CAAA,IAAA,EAAkC;AAChC,OAAA,KAAA,CAAA,GAAA;AACA,OAAA,KAAA,CAAWb,IAAI,CAAf,UAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAA,GAAA;AACD;;AAED,SAAA,kBAAA,GAA8B;AAC5B,OAAA,IAAA,CAAA,MAAA;AACD","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.TypeParameterDeclaration = exports.StringLiteralTypeAnnotation = exports.NumericLiteralTypeAnnotation = exports.GenericTypeAnnotation = exports.ClassImplements = undefined;\nexports.AnyTypeAnnotation = AnyTypeAnnotation;\nexports.ArrayTypeAnnotation = ArrayTypeAnnotation;\nexports.BooleanTypeAnnotation = BooleanTypeAnnotation;\nexports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;\nexports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;\nexports.DeclareClass = DeclareClass;\nexports.DeclareFunction = DeclareFunction;\nexports.DeclareInterface = DeclareInterface;\nexports.DeclareModule = DeclareModule;\nexports.DeclareModuleExports = DeclareModuleExports;\nexports.DeclareTypeAlias = DeclareTypeAlias;\nexports.DeclareOpaqueType = DeclareOpaqueType;\nexports.DeclareVariable = DeclareVariable;\nexports.DeclareExportDeclaration = DeclareExportDeclaration;\nexports.ExistentialTypeParam = ExistentialTypeParam;\nexports.FunctionTypeAnnotation = FunctionTypeAnnotation;\nexports.FunctionTypeParam = FunctionTypeParam;\nexports.InterfaceExtends = InterfaceExtends;\nexports._interfaceish = _interfaceish;\nexports._variance = _variance;\nexports.InterfaceDeclaration = InterfaceDeclaration;\nexports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;\nexports.MixedTypeAnnotation = MixedTypeAnnotation;\nexports.EmptyTypeAnnotation = EmptyTypeAnnotation;\nexports.NullableTypeAnnotation = NullableTypeAnnotation;\n\nvar _types = require(\"./types\");\n\nObject.defineProperty(exports, \"NumericLiteralTypeAnnotation\", {\n  enumerable: true,\n  get: function get() {\n    return _types.NumericLiteral;\n  }\n});\nObject.defineProperty(exports, \"StringLiteralTypeAnnotation\", {\n  enumerable: true,\n  get: function get() {\n    return _types.StringLiteral;\n  }\n});\nexports.NumberTypeAnnotation = NumberTypeAnnotation;\nexports.StringTypeAnnotation = StringTypeAnnotation;\nexports.ThisTypeAnnotation = ThisTypeAnnotation;\nexports.TupleTypeAnnotation = TupleTypeAnnotation;\nexports.TypeofTypeAnnotation = TypeofTypeAnnotation;\nexports.TypeAlias = TypeAlias;\nexports.OpaqueType = OpaqueType;\nexports.TypeAnnotation = TypeAnnotation;\nexports.TypeParameter = TypeParameter;\nexports.TypeParameterInstantiation = TypeParameterInstantiation;\nexports.ObjectTypeAnnotation = ObjectTypeAnnotation;\nexports.ObjectTypeCallProperty = ObjectTypeCallProperty;\nexports.ObjectTypeIndexer = ObjectTypeIndexer;\nexports.ObjectTypeProperty = ObjectTypeProperty;\nexports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;\nexports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;\nexports.UnionTypeAnnotation = UnionTypeAnnotation;\nexports.TypeCastExpression = TypeCastExpression;\nexports.VoidTypeAnnotation = VoidTypeAnnotation;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction AnyTypeAnnotation() {\n  this.word(\"any\");\n}\n\nfunction ArrayTypeAnnotation(node) {\n  this.print(node.elementType, node);\n  this.token(\"[\");\n  this.token(\"]\");\n}\n\nfunction BooleanTypeAnnotation() {\n  this.word(\"boolean\");\n}\n\nfunction BooleanLiteralTypeAnnotation(node) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nfunction NullLiteralTypeAnnotation() {\n  this.word(\"null\");\n}\n\nfunction DeclareClass(node, parent) {\n  if (!t.isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"class\");\n  this.space();\n  this._interfaceish(node);\n}\n\nfunction DeclareFunction(node, parent) {\n  if (!t.isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"function\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation.typeAnnotation, node);\n  this.semicolon();\n}\n\nfunction DeclareInterface(node) {\n  this.word(\"declare\");\n  this.space();\n  this.InterfaceDeclaration(node);\n}\n\nfunction DeclareModule(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.space();\n  this.print(node.id, node);\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction DeclareModuleExports(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.token(\".\");\n  this.word(\"exports\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction DeclareTypeAlias(node) {\n  this.word(\"declare\");\n  this.space();\n  this.TypeAlias(node);\n}\n\nfunction DeclareOpaqueType(node, parent) {\n  if (!t.isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.OpaqueType(node);\n}\n\nfunction DeclareVariable(node, parent) {\n  if (!t.isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"var\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n  this.semicolon();\n}\n\nfunction DeclareExportDeclaration(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"export\");\n  this.space();\n  if (node.default) {\n    this.word(\"default\");\n    this.space();\n  }\n\n  FlowExportDeclaration.apply(this, arguments);\n}\n\nfunction FlowExportDeclaration(node) {\n  if (node.declaration) {\n    var declar = node.declaration;\n    this.print(declar, node);\n    if (!t.isStatement(declar)) this.semicolon();\n  } else {\n    this.token(\"{\");\n    if (node.specifiers.length) {\n      this.space();\n      this.printList(node.specifiers, node);\n      this.space();\n    }\n    this.token(\"}\");\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ExistentialTypeParam() {\n  this.token(\"*\");\n}\n\nfunction FunctionTypeAnnotation(node, parent) {\n  this.print(node.typeParameters, node);\n  this.token(\"(\");\n  this.printList(node.params, node);\n\n  if (node.rest) {\n    if (node.params.length) {\n      this.token(\",\");\n      this.space();\n    }\n    this.token(\"...\");\n    this.print(node.rest, node);\n  }\n\n  this.token(\")\");\n\n  if (parent.type === \"ObjectTypeCallProperty\" || parent.type === \"DeclareFunction\") {\n    this.token(\":\");\n  } else {\n    this.space();\n    this.token(\"=>\");\n  }\n\n  this.space();\n  this.print(node.returnType, node);\n}\n\nfunction FunctionTypeParam(node) {\n  this.print(node.name, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nfunction InterfaceExtends(node) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n}\n\nexports.ClassImplements = InterfaceExtends;\nexports.GenericTypeAnnotation = InterfaceExtends;\nfunction _interfaceish(node) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  if (node.extends.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n  if (node.mixins && node.mixins.length) {\n    this.space();\n    this.word(\"mixins\");\n    this.space();\n    this.printList(node.mixins, node);\n  }\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction _variance(node) {\n  if (node.variance === \"plus\") {\n    this.token(\"+\");\n  } else if (node.variance === \"minus\") {\n    this.token(\"-\");\n  }\n}\n\nfunction InterfaceDeclaration(node) {\n  this.word(\"interface\");\n  this.space();\n  this._interfaceish(node);\n}\n\nfunction andSeparator() {\n  this.space();\n  this.token(\"&\");\n  this.space();\n}\n\nfunction IntersectionTypeAnnotation(node) {\n  this.printJoin(node.types, node, { separator: andSeparator });\n}\n\nfunction MixedTypeAnnotation() {\n  this.word(\"mixed\");\n}\n\nfunction EmptyTypeAnnotation() {\n  this.word(\"empty\");\n}\n\nfunction NullableTypeAnnotation(node) {\n  this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction NumberTypeAnnotation() {\n  this.word(\"number\");\n}\n\nfunction StringTypeAnnotation() {\n  this.word(\"string\");\n}\n\nfunction ThisTypeAnnotation() {\n  this.word(\"this\");\n}\n\nfunction TupleTypeAnnotation(node) {\n  this.token(\"[\");\n  this.printList(node.types, node);\n  this.token(\"]\");\n}\n\nfunction TypeofTypeAnnotation(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.argument, node);\n}\n\nfunction TypeAlias(node) {\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n  this.semicolon();\n}\nfunction OpaqueType(node) {\n  this.word(\"opaque\");\n  this.space();\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  if (node.supertype) {\n    this.token(\":\");\n    this.space();\n    this.print(node.supertype, node);\n  }\n  if (node.impltype) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.impltype, node);\n  }\n  this.semicolon();\n}\n\nfunction TypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TypeParameter(node) {\n  this._variance(node);\n\n  this.word(node.name);\n\n  if (node.bound) {\n    this.print(node.bound, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction TypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nexports.TypeParameterDeclaration = TypeParameterInstantiation;\nfunction ObjectTypeAnnotation(node) {\n  var _this = this;\n\n  if (node.exact) {\n    this.token(\"{|\");\n  } else {\n    this.token(\"{\");\n  }\n\n  var props = node.properties.concat(node.callProperties, node.indexers);\n\n  if (props.length) {\n    this.space();\n\n    this.printJoin(props, node, {\n      addNewlines: function addNewlines(leading) {\n        if (leading && !props[0]) return 1;\n      },\n\n      indent: true,\n      statement: true,\n      iterator: function iterator() {\n        if (props.length !== 1) {\n          if (_this.format.flowCommaSeparator) {\n            _this.token(\",\");\n          } else {\n            _this.semicolon();\n          }\n          _this.space();\n        }\n      }\n    });\n\n    this.space();\n  }\n\n  if (node.exact) {\n    this.token(\"|}\");\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction ObjectTypeCallProperty(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeIndexer(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this._variance(node);\n  this.token(\"[\");\n  this.print(node.id, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.key, node);\n  this.token(\"]\");\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeProperty(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this._variance(node);\n  this.print(node.key, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeSpreadProperty(node) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nfunction QualifiedTypeIdentifier(node) {\n  this.print(node.qualification, node);\n  this.token(\".\");\n  this.print(node.id, node);\n}\n\nfunction orSeparator() {\n  this.space();\n  this.token(\"|\");\n  this.space();\n}\n\nfunction UnionTypeAnnotation(node) {\n  this.printJoin(node.types, node, { separator: orSeparator });\n}\n\nfunction TypeCastExpression(node) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction VoidTypeAnnotation() {\n  this.word(\"void\");\n}"],"file":"flow.js"}