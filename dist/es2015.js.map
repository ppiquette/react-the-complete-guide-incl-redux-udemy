{"version":3,"sources":["../node_modules/babel-types/lib/definitions/es2015.js"],"names":["_index","require","_index2","_interopRequireDefault","obj","default","visitor","aliases","fields","left","validate","right","decorators","elements","builder","params","body","async","id","superClass","optional","inherits","source","declaration","specifiers","local","exported","imported","importKind","meta","property","kind","computed","static","key","expectedTypes","node","generator","properties","argument","tag","quasi","value","tail","quasis","expressions","delegate"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _index = require(\"./index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index2.default)(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"LVal\"],\n  fields: {\n    left: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    right: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  aliases: [\"Pattern\", \"LVal\"],\n  fields: {\n    elements: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Identifier\", \"Pattern\", \"RestElement\")))\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: {\n    params: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"BlockStatement\", \"Expression\")\n    },\n    async: {\n      validate: (0, _index.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n\n(0, _index2.default)(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"ClassMethod\", \"ClassProperty\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"ClassDeclaration\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\"id\", \"body\", \"superClass\", \"mixins\", \"typeParameters\", \"superTypeParameters\", \"implements\", \"decorators\"],\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\", \"Pureish\"],\n  fields: {\n    id: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"ClassBody\")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"ClassExpression\", {\n  inherits: \"ClassDeclaration\",\n  aliases: [\"Scopable\", \"Class\", \"Expression\", \"Pureish\"],\n  fields: {\n    id: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"ClassBody\")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    source: {\n      validate: (0, _index.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: {\n      validate: (0, _index.assertNodeType)(\"FunctionDeclaration\", \"ClassDeclaration\", \"Expression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportNamedDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: {\n      validate: (0, _index.assertNodeType)(\"Declaration\"),\n      optional: true\n    },\n    specifiers: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"ExportSpecifier\")))\n    },\n    source: {\n      validate: (0, _index.assertNodeType)(\"StringLiteral\"),\n      optional: true\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    exported: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: (0, _index.assertNodeType)(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ImportDeclaration\", {\n  visitor: [\"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\"],\n  fields: {\n    specifiers: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"ImportSpecifier\", \"ImportDefaultSpecifier\", \"ImportNamespaceSpecifier\")))\n    },\n    source: {\n      validate: (0, _index.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    imported: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    importKind: {\n      validate: (0, _index.assertOneOf)(null, \"type\", \"typeof\")\n    }\n  }\n});\n\n(0, _index2.default)(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: (0, _index.assertValueType)(\"string\")\n    },\n    property: {\n      validate: (0, _index.assertValueType)(\"string\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\"],\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  fields: {\n    kind: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"string\"), (0, _index.assertOneOf)(\"get\", \"set\", \"method\", \"constructor\")),\n      default: \"method\"\n    },\n    computed: {\n      default: false,\n      validate: (0, _index.assertValueType)(\"boolean\")\n    },\n    static: {\n      default: false,\n      validate: (0, _index.assertValueType)(\"boolean\")\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n        _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    params: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index.assertValueType)(\"boolean\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ObjectPattern\", {\n  visitor: [\"properties\", \"typeAnnotation\"],\n  aliases: [\"Pattern\", \"LVal\"],\n  fields: {\n    properties: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"RestProperty\", \"Property\")))\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  fields: {\n    argument: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"Super\", {\n  aliases: [\"Expression\"]\n});\n\n(0, _index2.default)(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    quasi: {\n      validate: (0, _index.assertNodeType)(\"TemplateLiteral\")\n    }\n  }\n});\n\n(0, _index2.default)(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {},\n    tail: {\n      validate: (0, _index.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n\n(0, _index2.default)(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"TemplateElement\")))\n    },\n    expressions: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Expression\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: (0, _index.assertValueType)(\"boolean\"),\n      default: false\n    },\n    argument: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});"],"file":"es2015.js"}