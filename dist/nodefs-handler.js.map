{"version":3,"sources":["../node_modules/babel-cli/node_modules/chokidar/lib/nodefs-handler.js"],"names":["fs","require","sysPath","readdirp","isBinaryPath","FsWatchInstances","Object","handleEvent","listener","emitRaw","watchedPath","path","evPath","fsWatchBroadcast","errHandler","handlers","rawEmitter","container","options","watcher","createFsWatchInstance","broadcastErr","process","error","listeners","errHandlers","rawEmitters","listenerIndex","FsWatchFileInstances","curr","prev","currmtime","NodeFsHandler","directory","basename","parent","absolutePath","persistent","Function","closer","setFsWatchFileListener","setFsWatchListener","dirname","callback","newStats","initialAdd","full","entry","dir","parentDir","tracked","wh","read","throttler","previous","current","root","entryType","fileFilter","directoryFilter","depth","lstat","item","done","fullPath","stats","ready","priorWh","initDir","module"],"mappings":"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","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar sysPath = require('path');\nvar readdirp = require('readdirp');\nvar isBinaryPath = require('is-binary-path');\n\n// fs.watch helpers\n\n// object to hold per-process fs.watch instances\n// (may be shared across chokidar FSWatcher instances)\nvar FsWatchInstances = Object.create(null);\n\n// Private function: Instantiates the fs.watch interface\n\n// * path       - string, path to be watched\n// * options    - object, options to be passed to fs.watch\n// * listener   - function, main event handler\n// * errHandler - function, handler which emits info about errors\n// * emitRaw    - function, handler which emits raw event data\n\n// Returns new fsevents instance\nfunction createFsWatchInstance(path, options, listener, errHandler, emitRaw) {\n  var handleEvent = function(rawEvent, evPath) {\n    listener(path);\n    emitRaw(rawEvent, evPath, {watchedPath: path});\n\n    // emit based on events occuring for files from a directory's watcher in\n    // case the file's watcher misses it (and rely on throttling to de-dupe)\n    if (evPath && path !== evPath) {\n      fsWatchBroadcast(\n        sysPath.resolve(path, evPath), 'listeners', sysPath.join(path, evPath)\n      );\n    }\n  };\n  try {\n    return fs.watch(path, options, handleEvent);\n  } catch (error) {\n    errHandler(error);\n  }\n}\n\n// Private function: Helper for passing fs.watch event data to a\n// collection of listeners\n\n// * fullPath   - string, absolute path bound to the fs.watch instance\n// * type       - string, listener type\n// * val[1..3]  - arguments to be passed to listeners\n\n// Returns nothing\nfunction fsWatchBroadcast(fullPath, type, val1, val2, val3) {\n  if (!FsWatchInstances[fullPath]) return;\n  FsWatchInstances[fullPath][type].forEach(function(listener) {\n    listener(val1, val2, val3);\n  });\n}\n\n// Private function: Instantiates the fs.watch interface or binds listeners\n// to an existing one covering the same file system entry\n\n// * path       - string, path to be watched\n// * fullPath   - string, absolute path\n// * options    - object, options to be passed to fs.watch\n// * handlers   - object, container for event listener functions\n\n// Returns close function\nfunction setFsWatchListener(path, fullPath, options, handlers) {\n  var listener = handlers.listener;\n  var errHandler = handlers.errHandler;\n  var rawEmitter = handlers.rawEmitter;\n  var container = FsWatchInstances[fullPath];\n  var watcher;\n  if (!options.persistent) {\n    watcher = createFsWatchInstance(\n      path, options, listener, errHandler, rawEmitter\n    );\n    return watcher.close.bind(watcher);\n  }\n  if (!container) {\n    watcher = createFsWatchInstance(\n      path,\n      options,\n      fsWatchBroadcast.bind(null, fullPath, 'listeners'),\n      errHandler, // no need to use broadcast here\n      fsWatchBroadcast.bind(null, fullPath, 'rawEmitters')\n    );\n    if (!watcher) return;\n    var broadcastErr = fsWatchBroadcast.bind(null, fullPath, 'errHandlers');\n    watcher.on('error', function(error) {\n      // Workaround for https://github.com/joyent/node/issues/4337\n      if (process.platform === 'win32' && error.code === 'EPERM') {\n        fs.open(path, 'r', function(err, fd) {\n          if (fd) fs.close(fd);\n          if (!err) broadcastErr(error);\n        });\n      } else {\n        broadcastErr(error);\n      }\n    });\n    container = FsWatchInstances[fullPath] = {\n      listeners: [listener],\n      errHandlers: [errHandler],\n      rawEmitters: [rawEmitter],\n      watcher: watcher\n    };\n  } else {\n    container.listeners.push(listener);\n    container.errHandlers.push(errHandler);\n    container.rawEmitters.push(rawEmitter);\n  }\n  var listenerIndex = container.listeners.length - 1;\n\n  // removes this instance's listeners and closes the underlying fs.watch\n  // instance if there are no more listeners left\n  return function close() {\n    delete container.listeners[listenerIndex];\n    delete container.errHandlers[listenerIndex];\n    delete container.rawEmitters[listenerIndex];\n    if (!Object.keys(container.listeners).length) {\n      container.watcher.close();\n      delete FsWatchInstances[fullPath];\n    }\n  };\n}\n\n// fs.watchFile helpers\n\n// object to hold per-process fs.watchFile instances\n// (may be shared across chokidar FSWatcher instances)\nvar FsWatchFileInstances = Object.create(null);\n\n// Private function: Instantiates the fs.watchFile interface or binds listeners\n// to an existing one covering the same file system entry\n\n// * path       - string, path to be watched\n// * fullPath   - string, absolute path\n// * options    - object, options to be passed to fs.watchFile\n// * handlers   - object, container for event listener functions\n\n// Returns close function\nfunction setFsWatchFileListener(path, fullPath, options, handlers) {\n  var listener = handlers.listener;\n  var rawEmitter = handlers.rawEmitter;\n  var container = FsWatchFileInstances[fullPath];\n  var listeners = [];\n  var rawEmitters = [];\n  if (\n    container && (\n      container.options.persistent < options.persistent ||\n      container.options.interval > options.interval\n    )\n  ) {\n    // \"Upgrade\" the watcher to persistence or a quicker interval.\n    // This creates some unlikely edge case issues if the user mixes\n    // settings in a very weird way, but solving for those cases\n    // doesn't seem worthwhile for the added complexity.\n    listeners = container.listeners;\n    rawEmitters = container.rawEmitters;\n    fs.unwatchFile(fullPath);\n    container = false;\n  }\n  if (!container) {\n    listeners.push(listener);\n    rawEmitters.push(rawEmitter);\n    container = FsWatchFileInstances[fullPath] = {\n      listeners: listeners,\n      rawEmitters: rawEmitters,\n      options: options,\n      watcher: fs.watchFile(fullPath, options, function(curr, prev) {\n        container.rawEmitters.forEach(function(rawEmitter) {\n          rawEmitter('change', fullPath, {curr: curr, prev: prev});\n        });\n        var currmtime = curr.mtime.getTime();\n        if (curr.size !== prev.size || currmtime > prev.mtime.getTime() || currmtime === 0) {\n          container.listeners.forEach(function(listener) {\n            listener(path, curr);\n          });\n        }\n      })\n    };\n  } else {\n    container.listeners.push(listener);\n    container.rawEmitters.push(rawEmitter);\n  }\n  var listenerIndex = container.listeners.length - 1;\n\n  // removes this instance's listeners and closes the underlying fs.watchFile\n  // instance if there are no more listeners left\n  return function close() {\n    delete container.listeners[listenerIndex];\n    delete container.rawEmitters[listenerIndex];\n    if (!Object.keys(container.listeners).length) {\n      fs.unwatchFile(fullPath);\n      delete FsWatchFileInstances[fullPath];\n    }\n  };\n}\n\n// fake constructor for attaching nodefs-specific prototype methods that\n// will be copied to FSWatcher's prototype\nfunction NodeFsHandler() {}\n\n// Private method: Watch file for changes with fs.watchFile or fs.watch.\n\n// * path     - string, path to file or directory.\n// * listener - function, to be executed on fs change.\n\n// Returns close function for the watcher instance\nNodeFsHandler.prototype._watchWithNodeFs =\nfunction(path, listener) {\n  var directory = sysPath.dirname(path);\n  var basename = sysPath.basename(path);\n  var parent = this._getWatchedDir(directory);\n  parent.add(basename);\n  var absolutePath = sysPath.resolve(path);\n  var options = {persistent: this.options.persistent};\n  if (!listener) listener = Function.prototype; // empty function\n\n  var closer;\n  if (this.options.usePolling) {\n    options.interval = this.enableBinaryInterval && isBinaryPath(basename) ?\n      this.options.binaryInterval : this.options.interval;\n    closer = setFsWatchFileListener(path, absolutePath, options, {\n      listener: listener,\n      rawEmitter: this.emit.bind(this, 'raw')\n    });\n  } else {\n    closer = setFsWatchListener(path, absolutePath, options, {\n      listener: listener,\n      errHandler: this._handleError.bind(this),\n      rawEmitter: this.emit.bind(this, 'raw')\n    });\n  }\n  return closer;\n};\n\n// Private method: Watch a file and emit add event if warranted\n\n// * file       - string, the file's path\n// * stats      - object, result of fs.stat\n// * initialAdd - boolean, was the file added at watch instantiation?\n// * callback   - function, called when done processing as a newly seen file\n\n// Returns close function for the watcher instance\nNodeFsHandler.prototype._handleFile =\nfunction(file, stats, initialAdd, callback) {\n  var dirname = sysPath.dirname(file);\n  var basename = sysPath.basename(file);\n  var parent = this._getWatchedDir(dirname);\n\n  // if the file is already being watched, do nothing\n  if (parent.has(basename)) return callback();\n\n  // kick off the watcher\n  var closer = this._watchWithNodeFs(file, function(path, newStats) {\n    if (!this._throttle('watch', file, 5)) return;\n    if (!newStats || newStats && newStats.mtime.getTime() === 0) {\n      fs.stat(file, function(error, newStats) {\n        // Fix issues where mtime is null but file is still present\n        if (error) {\n          this._remove(dirname, basename);\n        } else {\n          this._emit('change', file, newStats);\n        }\n      }.bind(this));\n    // add is about to be emitted if file not already tracked in parent\n    } else if (parent.has(basename)) {\n      this._emit('change', file, newStats);\n    }\n  }.bind(this));\n\n  // emit an add event if we're supposed to\n  if (!(initialAdd && this.options.ignoreInitial)) {\n    if (!this._throttle('add', file, 0)) return;\n    this._emit('add', file, stats);\n  }\n\n  if (callback) callback();\n  return closer;\n};\n\n// Private method: Handle symlinks encountered while reading a dir\n\n// * entry      - object, entry object returned by readdirp\n// * directory  - string, path of the directory being read\n// * path       - string, path of this item\n// * item       - string, basename of this item\n\n// Returns true if no more processing is needed for this entry.\nNodeFsHandler.prototype._handleSymlink =\nfunction(entry, directory, path, item) {\n  var full = entry.fullPath;\n  var dir = this._getWatchedDir(directory);\n\n  if (!this.options.followSymlinks) {\n    // watch symlink directly (don't follow) and detect changes\n    this._readyCount++;\n    fs.realpath(path, function(error, linkPath) {\n      if (dir.has(item)) {\n        if (this._symlinkPaths[full] !== linkPath) {\n          this._symlinkPaths[full] = linkPath;\n          this._emit('change', path, entry.stat);\n        }\n      } else {\n        dir.add(item);\n        this._symlinkPaths[full] = linkPath;\n        this._emit('add', path, entry.stat);\n      }\n      this._emitReady();\n    }.bind(this));\n    return true;\n  }\n\n  // don't follow the same symlink more than once\n  if (this._symlinkPaths[full]) return true;\n  else this._symlinkPaths[full] = true;\n};\n\n// Private method: Read directory to add / remove files from `@watched` list\n// and re-read it on change.\n\n// * dir        - string, fs path.\n// * stats      - object, result of fs.stat\n// * initialAdd - boolean, was the file added at watch instantiation?\n// * depth      - int, depth relative to user-supplied path\n// * target     - string, child path actually targeted for watch\n// * wh         - object, common watch helpers for this path\n// * callback   - function, called when dir scan is complete\n\n// Returns close function for the watcher instance\nNodeFsHandler.prototype._handleDir =\nfunction(dir, stats, initialAdd, depth, target, wh, callback) {\n  var parentDir = this._getWatchedDir(sysPath.dirname(dir));\n  var tracked = parentDir.has(sysPath.basename(dir));\n  if (!(initialAdd && this.options.ignoreInitial) && !target && !tracked) {\n    if (!wh.hasGlob || wh.globFilter(dir)) this._emit('addDir', dir, stats);\n  }\n\n  // ensure dir is tracked (harmless if redundant)\n  parentDir.add(sysPath.basename(dir));\n  this._getWatchedDir(dir);\n\n  var read = function(directory, initialAdd, done) {\n    // Normalize the directory name on Windows\n    directory = sysPath.join(directory, '');\n\n    if (!wh.hasGlob) {\n      var throttler = this._throttle('readdir', directory, 1000);\n      if (!throttler) return;\n    }\n\n    var previous = this._getWatchedDir(wh.path);\n    var current = [];\n\n    readdirp({\n      root: directory,\n      entryType: 'all',\n      fileFilter: wh.filterPath,\n      directoryFilter: wh.filterDir,\n      depth: 0,\n      lstat: true\n    }).on('data', function(entry) {\n      var item = entry.path;\n      var path = sysPath.join(directory, item);\n      current.push(item);\n\n      if (entry.stat.isSymbolicLink() &&\n        this._handleSymlink(entry, directory, path, item)) return;\n\n      // Files that present in current directory snapshot\n      // but absent in previous are added to watch list and\n      // emit `add` event.\n      if (item === target || !target && !previous.has(item)) {\n        this._readyCount++;\n\n        // ensure relativeness of path is preserved in case of watcher reuse\n        path = sysPath.join(dir, sysPath.relative(dir, path));\n\n        this._addToNodeFs(path, initialAdd, wh, depth + 1);\n      }\n    }.bind(this)).on('end', function() {\n      if (throttler) throttler.clear();\n      if (done) done();\n\n      // Files that absent in current directory snapshot\n      // but present in previous emit `remove` event\n      // and are removed from @watched[directory].\n      previous.children().filter(function(item) {\n        return item !== directory &&\n          current.indexOf(item) === -1 &&\n          // in case of intersecting globs;\n          // a path may have been filtered out of this readdir, but\n          // shouldn't be removed because it matches a different glob\n          (!wh.hasGlob || wh.filterPath({\n            fullPath: sysPath.resolve(directory, item)\n          }));\n      }).forEach(function(item) {\n        this._remove(directory, item);\n      }, this);\n    }.bind(this)).on('error', this._handleError.bind(this));\n  }.bind(this);\n\n  var closer;\n\n  if (this.options.depth == null || depth <= this.options.depth) {\n    if (!target) read(dir, initialAdd, callback);\n    closer = this._watchWithNodeFs(dir, function(dirPath, stats) {\n      // if current directory is removed, do nothing\n      if (stats && stats.mtime.getTime() === 0) return;\n\n      read(dirPath, false);\n    });\n  } else {\n    callback();\n  }\n  return closer;\n};\n\n// Private method: Handle added file, directory, or glob pattern.\n// Delegates call to _handleFile / _handleDir after checks.\n\n// * path       - string, path to file or directory.\n// * initialAdd - boolean, was the file added at watch instantiation?\n// * depth      - int, depth relative to user-supplied path\n// * target     - string, child path actually targeted for watch\n// * callback   - function, indicates whether the path was found or not\n\n// Returns nothing\nNodeFsHandler.prototype._addToNodeFs =\nfunction(path, initialAdd, priorWh, depth, target, callback) {\n  if (!callback) callback = Function.prototype;\n  var ready = this._emitReady;\n  if (this._isIgnored(path) || this.closed) {\n    ready();\n    return callback(null, false);\n  }\n\n  var wh = this._getWatchHelpers(path, depth);\n  if (!wh.hasGlob && priorWh) {\n    wh.hasGlob = priorWh.hasGlob;\n    wh.globFilter = priorWh.globFilter;\n    wh.filterPath = priorWh.filterPath;\n    wh.filterDir = priorWh.filterDir;\n  }\n\n  // evaluate what is at the path we're being asked to watch\n  fs[wh.statMethod](wh.watchPath, function(error, stats) {\n    if (this._handleError(error)) return callback(null, path);\n    if (this._isIgnored(wh.watchPath, stats)) {\n      ready();\n      return callback(null, false);\n    }\n\n    var initDir = function(dir, target) {\n      return this._handleDir(dir, stats, initialAdd, depth, target, wh, ready);\n    }.bind(this);\n\n    var closer;\n    if (stats.isDirectory()) {\n      closer = initDir(wh.watchPath, target);\n    } else if (stats.isSymbolicLink()) {\n      var parent = sysPath.dirname(wh.watchPath);\n      this._getWatchedDir(parent).add(wh.watchPath);\n      this._emit('add', wh.watchPath, stats);\n      closer = initDir(parent, path);\n\n      // preserve this symlink's target path\n      fs.realpath(path, function(error, targetPath) {\n        this._symlinkPaths[sysPath.resolve(path)] = targetPath;\n        ready();\n      }.bind(this));\n    } else {\n      closer = this._handleFile(wh.watchPath, stats, initialAdd, ready);\n    }\n\n    if (closer) this._closers[path] = closer;\n    callback(null, false);\n  }.bind(this));\n};\n\nmodule.exports = NodeFsHandler;\n"],"file":"nodefs-handler.js"}