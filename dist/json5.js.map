{"version":3,"sources":["../node_modules/babel-core/node_modules/json5/lib/json5.js"],"names":["JSON5","escapee","b","f","n","r","t","ws","renderChar","chr","error","m","JSON","text","at","next","c","ch","columnNumber","peek","lineNumber","identifier","key","number","sign","string","base","word","isNaN","isFinite","delim","uffff","i","hex","parseInt","String","inlineComment","blockComment","comment","white","array","value","object","result","holder","Object","v","walk","reviver","replacer","isArray","getReplacedValueOrUndefined","isTopLevel","isWordStart","length","isWordChar","Array","objStack","str","indent","noNewLine","indentStr","space","makeIndent","cx","escapable","meta","a","obj_part","isDate","escapeString","checkForCircular","buffer","res","internalStringify","nonEmpty","isWord","topLevelHolder","obj"],"mappings":"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","sourcesContent":["// json5.js\n// Modern JSON. See README.md for details.\n//\n// This file is based directly off of Douglas Crockford's json_parse.js:\n// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js\n\nvar JSON5 = (typeof exports === 'object' ? exports : {});\n\nJSON5.parse = (function () {\n    \"use strict\";\n\n// This is a function that can parse a JSON5 text, producing a JavaScript\n// data structure. It is a simple, recursive descent parser. It does not use\n// eval or regular expressions, so it can be used as a model for implementing\n// a JSON5 parser in other languages.\n\n// We are defining the function inside of another function to avoid creating\n// global variables.\n\n    var at,           // The index of the current character\n        lineNumber,   // The current line number\n        columnNumber, // The current column number\n        ch,           // The current character\n        escapee = {\n            \"'\":  \"'\",\n            '\"':  '\"',\n            '\\\\': '\\\\',\n            '/':  '/',\n            '\\n': '',       // Replace escaped newlines in strings w/ empty string\n            b:    '\\b',\n            f:    '\\f',\n            n:    '\\n',\n            r:    '\\r',\n            t:    '\\t'\n        },\n        ws = [\n            ' ',\n            '\\t',\n            '\\r',\n            '\\n',\n            '\\v',\n            '\\f',\n            '\\xA0',\n            '\\uFEFF'\n        ],\n        text,\n\n        renderChar = function (chr) {\n            return chr === '' ? 'EOF' : \"'\" + chr + \"'\";\n        },\n\n        error = function (m) {\n\n// Call error when something is wrong.\n\n            var error = new SyntaxError();\n            // beginning of message suffix to agree with that provided by Gecko - see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\n            error.message = m + \" at line \" + lineNumber + \" column \" + columnNumber + \" of the JSON5 data. Still to read: \" + JSON.stringify(text.substring(at - 1, at + 19));\n            error.at = at;\n            // These two property names have been chosen to agree with the ones in Gecko, the only popular\n            // environment which seems to supply this info on JSON.parse\n            error.lineNumber = lineNumber;\n            error.columnNumber = columnNumber;\n            throw error;\n        },\n\n        next = function (c) {\n\n// If a c parameter is provided, verify that it matches the current character.\n\n            if (c && c !== ch) {\n                error(\"Expected \" + renderChar(c) + \" instead of \" + renderChar(ch));\n            }\n\n// Get the next character. When there are no more characters,\n// return the empty string.\n\n            ch = text.charAt(at);\n            at++;\n            columnNumber++;\n            if (ch === '\\n' || ch === '\\r' && peek() !== '\\n') {\n                lineNumber++;\n                columnNumber = 0;\n            }\n            return ch;\n        },\n\n        peek = function () {\n\n// Get the next character without consuming it or\n// assigning it to the ch varaible.\n\n            return text.charAt(at);\n        },\n\n        identifier = function () {\n\n// Parse an identifier. Normally, reserved words are disallowed here, but we\n// only use this for unquoted object keys, where reserved words are allowed,\n// so we don't check for those here. References:\n// - http://es5.github.com/#x7.6\n// - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables\n// - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm\n// TODO Identifiers can have Unicode \"letters\" in them; add support for those.\n\n            var key = ch;\n\n            // Identifiers must start with a letter, _ or $.\n            if ((ch !== '_' && ch !== '$') &&\n                    (ch < 'a' || ch > 'z') &&\n                    (ch < 'A' || ch > 'Z')) {\n                error(\"Bad identifier as unquoted key\");\n            }\n\n            // Subsequent characters can contain digits.\n            while (next() && (\n                    ch === '_' || ch === '$' ||\n                    (ch >= 'a' && ch <= 'z') ||\n                    (ch >= 'A' && ch <= 'Z') ||\n                    (ch >= '0' && ch <= '9'))) {\n                key += ch;\n            }\n\n            return key;\n        },\n\n        number = function () {\n\n// Parse a number value.\n\n            var number,\n                sign = '',\n                string = '',\n                base = 10;\n\n            if (ch === '-' || ch === '+') {\n                sign = ch;\n                next(ch);\n            }\n\n            // support for Infinity (could tweak to allow other words):\n            if (ch === 'I') {\n                number = word();\n                if (typeof number !== 'number' || isNaN(number)) {\n                    error('Unexpected word for number');\n                }\n                return (sign === '-') ? -number : number;\n            }\n\n            // support for NaN\n            if (ch === 'N' ) {\n              number = word();\n              if (!isNaN(number)) {\n                error('expected word to be NaN');\n              }\n              // ignore sign as -NaN also is NaN\n              return number;\n            }\n\n            if (ch === '0') {\n                string += ch;\n                next();\n                if (ch === 'x' || ch === 'X') {\n                    string += ch;\n                    next();\n                    base = 16;\n                } else if (ch >= '0' && ch <= '9') {\n                    error('Octal literal');\n                }\n            }\n\n            switch (base) {\n            case 10:\n                while (ch >= '0' && ch <= '9' ) {\n                    string += ch;\n                    next();\n                }\n                if (ch === '.') {\n                    string += '.';\n                    while (next() && ch >= '0' && ch <= '9') {\n                        string += ch;\n                    }\n                }\n                if (ch === 'e' || ch === 'E') {\n                    string += ch;\n                    next();\n                    if (ch === '-' || ch === '+') {\n                        string += ch;\n                        next();\n                    }\n                    while (ch >= '0' && ch <= '9') {\n                        string += ch;\n                        next();\n                    }\n                }\n                break;\n            case 16:\n                while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {\n                    string += ch;\n                    next();\n                }\n                break;\n            }\n\n            if(sign === '-') {\n                number = -string;\n            } else {\n                number = +string;\n            }\n\n            if (!isFinite(number)) {\n                error(\"Bad number\");\n            } else {\n                return number;\n            }\n        },\n\n        string = function () {\n\n// Parse a string value.\n\n            var hex,\n                i,\n                string = '',\n                delim,      // double quote or single quote\n                uffff;\n\n// When parsing for string values, we must look for ' or \" and \\ characters.\n\n            if (ch === '\"' || ch === \"'\") {\n                delim = ch;\n                while (next()) {\n                    if (ch === delim) {\n                        next();\n                        return string;\n                    } else if (ch === '\\\\') {\n                        next();\n                        if (ch === 'u') {\n                            uffff = 0;\n                            for (i = 0; i < 4; i += 1) {\n                                hex = parseInt(next(), 16);\n                                if (!isFinite(hex)) {\n                                    break;\n                                }\n                                uffff = uffff * 16 + hex;\n                            }\n                            string += String.fromCharCode(uffff);\n                        } else if (ch === '\\r') {\n                            if (peek() === '\\n') {\n                                next();\n                            }\n                        } else if (typeof escapee[ch] === 'string') {\n                            string += escapee[ch];\n                        } else {\n                            break;\n                        }\n                    } else if (ch === '\\n') {\n                        // unescaped newlines are invalid; see:\n                        // https://github.com/aseemk/json5/issues/24\n                        // TODO this feels special-cased; are there other\n                        // invalid unescaped chars?\n                        break;\n                    } else {\n                        string += ch;\n                    }\n                }\n            }\n            error(\"Bad string\");\n        },\n\n        inlineComment = function () {\n\n// Skip an inline comment, assuming this is one. The current character should\n// be the second / character in the // pair that begins this inline comment.\n// To finish the inline comment, we look for a newline or the end of the text.\n\n            if (ch !== '/') {\n                error(\"Not an inline comment\");\n            }\n\n            do {\n                next();\n                if (ch === '\\n' || ch === '\\r') {\n                    next();\n                    return;\n                }\n            } while (ch);\n        },\n\n        blockComment = function () {\n\n// Skip a block comment, assuming this is one. The current character should be\n// the * character in the /* pair that begins this block comment.\n// To finish the block comment, we look for an ending */ pair of characters,\n// but we also watch for the end of text before the comment is terminated.\n\n            if (ch !== '*') {\n                error(\"Not a block comment\");\n            }\n\n            do {\n                next();\n                while (ch === '*') {\n                    next('*');\n                    if (ch === '/') {\n                        next('/');\n                        return;\n                    }\n                }\n            } while (ch);\n\n            error(\"Unterminated block comment\");\n        },\n\n        comment = function () {\n\n// Skip a comment, whether inline or block-level, assuming this is one.\n// Comments always begin with a / character.\n\n            if (ch !== '/') {\n                error(\"Not a comment\");\n            }\n\n            next('/');\n\n            if (ch === '/') {\n                inlineComment();\n            } else if (ch === '*') {\n                blockComment();\n            } else {\n                error(\"Unrecognized comment\");\n            }\n        },\n\n        white = function () {\n\n// Skip whitespace and comments.\n// Note that we're detecting comments by only a single / character.\n// This works since regular expressions are not valid JSON(5), but this will\n// break if there are other valid values that begin with a / character!\n\n            while (ch) {\n                if (ch === '/') {\n                    comment();\n                } else if (ws.indexOf(ch) >= 0) {\n                    next();\n                } else {\n                    return;\n                }\n            }\n        },\n\n        word = function () {\n\n// true, false, or null.\n\n            switch (ch) {\n            case 't':\n                next('t');\n                next('r');\n                next('u');\n                next('e');\n                return true;\n            case 'f':\n                next('f');\n                next('a');\n                next('l');\n                next('s');\n                next('e');\n                return false;\n            case 'n':\n                next('n');\n                next('u');\n                next('l');\n                next('l');\n                return null;\n            case 'I':\n                next('I');\n                next('n');\n                next('f');\n                next('i');\n                next('n');\n                next('i');\n                next('t');\n                next('y');\n                return Infinity;\n            case 'N':\n              next( 'N' );\n              next( 'a' );\n              next( 'N' );\n              return NaN;\n            }\n            error(\"Unexpected \" + renderChar(ch));\n        },\n\n        value,  // Place holder for the value function.\n\n        array = function () {\n\n// Parse an array value.\n\n            var array = [];\n\n            if (ch === '[') {\n                next('[');\n                white();\n                while (ch) {\n                    if (ch === ']') {\n                        next(']');\n                        return array;   // Potentially empty array\n                    }\n                    // ES5 allows omitting elements in arrays, e.g. [,] and\n                    // [,null]. We don't allow this in JSON5.\n                    if (ch === ',') {\n                        error(\"Missing array element\");\n                    } else {\n                        array.push(value());\n                    }\n                    white();\n                    // If there's no comma after this value, this needs to\n                    // be the end of the array.\n                    if (ch !== ',') {\n                        next(']');\n                        return array;\n                    }\n                    next(',');\n                    white();\n                }\n            }\n            error(\"Bad array\");\n        },\n\n        object = function () {\n\n// Parse an object value.\n\n            var key,\n                object = {};\n\n            if (ch === '{') {\n                next('{');\n                white();\n                while (ch) {\n                    if (ch === '}') {\n                        next('}');\n                        return object;   // Potentially empty object\n                    }\n\n                    // Keys can be unquoted. If they are, they need to be\n                    // valid JS identifiers.\n                    if (ch === '\"' || ch === \"'\") {\n                        key = string();\n                    } else {\n                        key = identifier();\n                    }\n\n                    white();\n                    next(':');\n                    object[key] = value();\n                    white();\n                    // If there's no comma after this pair, this needs to be\n                    // the end of the object.\n                    if (ch !== ',') {\n                        next('}');\n                        return object;\n                    }\n                    next(',');\n                    white();\n                }\n            }\n            error(\"Bad object\");\n        };\n\n    value = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n        white();\n        switch (ch) {\n        case '{':\n            return object();\n        case '[':\n            return array();\n        case '\"':\n        case \"'\":\n            return string();\n        case '-':\n        case '+':\n        case '.':\n            return number();\n        default:\n            return ch >= '0' && ch <= '9' ? number() : word();\n        }\n    };\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\n    return function (source, reviver) {\n        var result;\n\n        text = String(source);\n        at = 0;\n        lineNumber = 1;\n        columnNumber = 1;\n        ch = ' ';\n        result = value();\n        white();\n        if (ch) {\n            error(\"Syntax error\");\n        }\n\n// If there is a reviver function, we recursively walk the new structure,\n// passing each name/value pair to the reviver function for possible\n// transformation, starting with a temporary root object that holds the result\n// in an empty key. If there is not a reviver function, we simply return the\n// result.\n\n        return typeof reviver === 'function' ? (function walk(holder, key) {\n            var k, v, value = holder[key];\n            if (value && typeof value === 'object') {\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = walk(value, k);\n                        if (v !== undefined) {\n                            value[k] = v;\n                        } else {\n                            delete value[k];\n                        }\n                    }\n                }\n            }\n            return reviver.call(holder, key, value);\n        }({'': result}, '')) : result;\n    };\n}());\n\n// JSON5 stringify will not quote keys where appropriate\nJSON5.stringify = function (obj, replacer, space) {\n    if (replacer && (typeof(replacer) !== \"function\" && !isArray(replacer))) {\n        throw new Error('Replacer must be a function or an array');\n    }\n    var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {\n        var value = holder[key];\n\n        // Replace the value with its toJSON value first, if possible\n        if (value && value.toJSON && typeof value.toJSON === \"function\") {\n            value = value.toJSON();\n        }\n\n        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for\n        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).\n        if (typeof(replacer) === \"function\") {\n            return replacer.call(holder, key, value);\n        } else if(replacer) {\n            if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {\n                return value;\n            } else {\n                return undefined;\n            }\n        } else {\n            return value;\n        }\n    };\n\n    function isWordChar(c) {\n        return (c >= 'a' && c <= 'z') ||\n            (c >= 'A' && c <= 'Z') ||\n            (c >= '0' && c <= '9') ||\n            c === '_' || c === '$';\n    }\n\n    function isWordStart(c) {\n        return (c >= 'a' && c <= 'z') ||\n            (c >= 'A' && c <= 'Z') ||\n            c === '_' || c === '$';\n    }\n\n    function isWord(key) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (!isWordStart(key[0])) {\n            return false;\n        }\n        var i = 1, length = key.length;\n        while (i < length) {\n            if (!isWordChar(key[i])) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n\n    // export for use in tests\n    JSON5.isWord = isWord;\n\n    // polyfills\n    function isArray(obj) {\n        if (Array.isArray) {\n            return Array.isArray(obj);\n        } else {\n            return Object.prototype.toString.call(obj) === '[object Array]';\n        }\n    }\n\n    function isDate(obj) {\n        return Object.prototype.toString.call(obj) === '[object Date]';\n    }\n\n    var objStack = [];\n    function checkForCircular(obj) {\n        for (var i = 0; i < objStack.length; i++) {\n            if (objStack[i] === obj) {\n                throw new TypeError(\"Converting circular structure to JSON\");\n            }\n        }\n    }\n\n    function makeIndent(str, num, noNewLine) {\n        if (!str) {\n            return \"\";\n        }\n        // indentation no more than 10 chars\n        if (str.length > 10) {\n            str = str.substring(0, 10);\n        }\n\n        var indent = noNewLine ? \"\" : \"\\n\";\n        for (var i = 0; i < num; i++) {\n            indent += str;\n        }\n\n        return indent;\n    }\n\n    var indentStr;\n    if (space) {\n        if (typeof space === \"string\") {\n            indentStr = space;\n        } else if (typeof space === \"number\" && space >= 0) {\n            indentStr = makeIndent(\" \", space, true);\n        } else {\n            // ignore space parameter\n        }\n    }\n\n    // Copied from Crokford's implementation of JSON\n    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195\n    // Begin\n    var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        meta = { // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    };\n    function escapeString(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n        escapable.lastIndex = 0;\n        return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n            var c = meta[a];\n            return typeof c === 'string' ?\n                c :\n                '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        }) + '\"' : '\"' + string + '\"';\n    }\n    // End\n\n    function internalStringify(holder, key, isTopLevel) {\n        var buffer, res;\n\n        // Replace the value, if necessary\n        var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);\n\n        if (obj_part && !isDate(obj_part)) {\n            // unbox objects\n            // don't unbox dates, since will turn it into number\n            obj_part = obj_part.valueOf();\n        }\n        switch(typeof obj_part) {\n            case \"boolean\":\n                return obj_part.toString();\n\n            case \"number\":\n                if (isNaN(obj_part) || !isFinite(obj_part)) {\n                    return \"null\";\n                }\n                return obj_part.toString();\n\n            case \"string\":\n                return escapeString(obj_part.toString());\n\n            case \"object\":\n                if (obj_part === null) {\n                    return \"null\";\n                } else if (isArray(obj_part)) {\n                    checkForCircular(obj_part);\n                    buffer = \"[\";\n                    objStack.push(obj_part);\n\n                    for (var i = 0; i < obj_part.length; i++) {\n                        res = internalStringify(obj_part, i, false);\n                        buffer += makeIndent(indentStr, objStack.length);\n                        if (res === null || typeof res === \"undefined\") {\n                            buffer += \"null\";\n                        } else {\n                            buffer += res;\n                        }\n                        if (i < obj_part.length-1) {\n                            buffer += \",\";\n                        } else if (indentStr) {\n                            buffer += \"\\n\";\n                        }\n                    }\n                    objStack.pop();\n                    if (obj_part.length) {\n                        buffer += makeIndent(indentStr, objStack.length, true)\n                    }\n                    buffer += \"]\";\n                } else {\n                    checkForCircular(obj_part);\n                    buffer = \"{\";\n                    var nonEmpty = false;\n                    objStack.push(obj_part);\n                    for (var prop in obj_part) {\n                        if (obj_part.hasOwnProperty(prop)) {\n                            var value = internalStringify(obj_part, prop, false);\n                            isTopLevel = false;\n                            if (typeof value !== \"undefined\" && value !== null) {\n                                buffer += makeIndent(indentStr, objStack.length);\n                                nonEmpty = true;\n                                key = isWord(prop) ? prop : escapeString(prop);\n                                buffer += key + \":\" + (indentStr ? ' ' : '') + value + \",\";\n                            }\n                        }\n                    }\n                    objStack.pop();\n                    if (nonEmpty) {\n                        buffer = buffer.substring(0, buffer.length-1) + makeIndent(indentStr, objStack.length) + \"}\";\n                    } else {\n                        buffer = '{}';\n                    }\n                }\n                return buffer;\n            default:\n                // functions and undefined should be ignored\n                return undefined;\n        }\n    }\n\n    // special case...when undefined is used inside of\n    // a compound object/array, return null.\n    // but when top-level, return undefined\n    var topLevelHolder = {\"\":obj};\n    if (obj === undefined) {\n        return getReplacedValueOrUndefined(topLevelHolder, '', true);\n    }\n    return internalStringify(topLevelHolder, '', true);\n};\n"],"file":"json5.js"}