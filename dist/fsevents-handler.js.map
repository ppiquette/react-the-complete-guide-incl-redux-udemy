{"version":3,"sources":["../node_modules/babel-cli/node_modules/chokidar/lib/fsevents-handler.js"],"names":["fs","require","sysPath","readdirp","fsevents","FSEventsWatchers","Object","consolidateThreshhold","watchPath","parentPath","couldConsolidate","resolvedPath","hasSymlink","fullPath","listener","realPath","watchedParent","watchContainer","listeners","rawEmitters","watcher","createFSEventsInstance","info","emitter","listenerIndex","keys","count","i","len","path","FsEventsHandler","watchCallback","depth","transform","globFilter","parent","item","watchedDir","checkIgnored","stats","handleEvent","event","curDepth","eventName","error","addOrChange","wrongEventFlags","checkFd","closer","setFSEventsListener","linkTarget","dotSlash","aliasedPath","processPath","emitAdd","pp","isDir","dirObj","base","forceAdd","wh","priorDepth","root","entryType","fileFilter","directoryFilter","lstat","entry","joinedPath","initWatch","module"],"mappings":"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","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar sysPath = require('path');\nvar readdirp = require('readdirp');\nvar fsevents;\ntry { fsevents = require('fsevents'); } catch (error) {}\n\n// fsevents instance helper functions\n\n// object to hold per-process fsevents instances\n// (may be shared across chokidar FSWatcher instances)\nvar FSEventsWatchers = Object.create(null);\n\n// Threshold of duplicate path prefixes at which to start\n// consolidating going forward\nvar consolidateThreshhold = 10;\n\n// Private function: Instantiates the fsevents interface\n\n// * path       - string, path to be watched\n// * callback   - function, called when fsevents is bound and ready\n\n// Returns new fsevents instance\nfunction createFSEventsInstance(path, callback) {\n  return (new fsevents(path)).on('fsevent', callback).start();\n}\n\n// Private function: Instantiates the fsevents interface or binds listeners\n// to an existing one covering the same file tree\n\n// * path       - string, path to be watched\n// * realPath   - string, real path (in case of symlinks)\n// * listener   - function, called when fsevents emits events\n// * rawEmitter - function, passes data to listeners of the 'raw' event\n\n// Returns close function\nfunction setFSEventsListener(path, realPath, listener, rawEmitter) {\n  var watchPath = sysPath.extname(path) ? sysPath.dirname(path) : path;\n  var watchContainer;\n  var parentPath = sysPath.dirname(watchPath);\n\n  // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n  // above the current one, create a watcher on the parent\n  // path instead, so that we do consolidate going forward.\n  if (couldConsolidate(parentPath)) {\n    watchPath = parentPath;\n  }\n\n  var resolvedPath = sysPath.resolve(path);\n  var hasSymlink = resolvedPath !== realPath;\n  function filteredListener(fullPath, flags, info) {\n    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);\n    if (\n      fullPath === resolvedPath ||\n      !fullPath.indexOf(resolvedPath + sysPath.sep)\n    ) listener(fullPath, flags, info);\n  }\n\n  // check if there is already a watcher on a parent path\n  // modifies `watchPath` to the parent path when it finds a match\n  function watchedParent() {\n    return Object.keys(FSEventsWatchers).some(function(watchedPath) {\n      // condition is met when indexOf returns 0\n      if (!realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep)) {\n        watchPath = watchedPath;\n        return true;\n      }\n    });\n  }\n\n  if (watchPath in FSEventsWatchers || watchedParent()) {\n    watchContainer = FSEventsWatchers[watchPath];\n    watchContainer.listeners.push(filteredListener);\n  } else {\n    watchContainer = FSEventsWatchers[watchPath] = {\n      listeners: [filteredListener],\n      rawEmitters: [rawEmitter],\n      watcher: createFSEventsInstance(watchPath, function(fullPath, flags) {\n        var info = fsevents.getInfo(fullPath, flags);\n        watchContainer.listeners.forEach(function(listener) {\n          listener(fullPath, flags, info);\n        });\n        watchContainer.rawEmitters.forEach(function(emitter) {\n          emitter(info.event, fullPath, info);\n        });\n      })\n    };\n  }\n  var listenerIndex = watchContainer.listeners.length - 1;\n\n  // removes this instance's listeners and closes the underlying fsevents\n  // instance if there are no more listeners left\n  return function close() {\n    delete watchContainer.listeners[listenerIndex];\n    delete watchContainer.rawEmitters[listenerIndex];\n    if (!Object.keys(watchContainer.listeners).length) {\n      watchContainer.watcher.stop();\n      delete FSEventsWatchers[watchPath];\n    }\n  };\n}\n\n// Decide whether or not we should start a new higher-level\n// parent watcher\nfunction couldConsolidate(path) {\n  var keys = Object.keys(FSEventsWatchers);\n  var count = 0;\n\n  for (var i = 0, len = keys.length; i < len; ++i) {\n    var watchPath = keys[i];\n    if (watchPath.indexOf(path) === 0) {\n      count++;\n      if (count >= consolidateThreshhold) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n// returns boolean indicating whether fsevents can be used\nfunction canUse() {\n  return fsevents && Object.keys(FSEventsWatchers).length < 128;\n}\n\n// determines subdirectory traversal levels from root to path\nfunction depth(path, root) {\n  var i = 0;\n  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;\n  return i;\n}\n\n// fake constructor for attaching fsevents-specific prototype methods that\n// will be copied to FSWatcher's prototype\nfunction FsEventsHandler() {}\n\n// Private method: Handle symlinks encountered during directory scan\n\n// * watchPath  - string, file/dir path to be watched with fsevents\n// * realPath   - string, real path (in case of symlinks)\n// * transform  - function, path transformer\n// * globFilter - function, path filter in case a glob pattern was provided\n\n// Returns close function for the watcher instance\nFsEventsHandler.prototype._watchWithFsEvents =\nfunction(watchPath, realPath, transform, globFilter) {\n  if (this._isIgnored(watchPath)) return;\n  var watchCallback = function(fullPath, flags, info) {\n    if (\n      this.options.depth !== undefined &&\n      depth(fullPath, realPath) > this.options.depth\n    ) return;\n    var path = transform(sysPath.join(\n      watchPath, sysPath.relative(watchPath, fullPath)\n    ));\n    if (globFilter && !globFilter(path)) return;\n    // ensure directories are tracked\n    var parent = sysPath.dirname(path);\n    var item = sysPath.basename(path);\n    var watchedDir = this._getWatchedDir(\n      info.type === 'directory' ? path : parent\n    );\n    var checkIgnored = function(stats) {\n      if (this._isIgnored(path, stats)) {\n        this._ignoredPaths[path] = true;\n        if (stats && stats.isDirectory()) {\n          this._ignoredPaths[path + '/**/*'] = true;\n        }\n        return true;\n      } else {\n        delete this._ignoredPaths[path];\n        delete this._ignoredPaths[path + '/**/*'];\n      }\n    }.bind(this);\n\n    var handleEvent = function(event) {\n      if (checkIgnored()) return;\n\n      if (event === 'unlink') {\n        // suppress unlink events on never before seen files\n        if (info.type === 'directory' || watchedDir.has(item)) {\n          this._remove(parent, item);\n        }\n      } else {\n        if (event === 'add') {\n          // track new directories\n          if (info.type === 'directory') this._getWatchedDir(path);\n\n          if (info.type === 'symlink' && this.options.followSymlinks) {\n            // push symlinks back to the top of the stack to get handled\n            var curDepth = this.options.depth === undefined ?\n              undefined : depth(fullPath, realPath) + 1;\n            return this._addToFsEvents(path, false, true, curDepth);\n          } else {\n            // track new paths\n            // (other than symlinks being followed, which will be tracked soon)\n            this._getWatchedDir(parent).add(item);\n          }\n        }\n        var eventName = info.type === 'directory' ? event + 'Dir' : event;\n        this._emit(eventName, path);\n        if (eventName === 'addDir') this._addToFsEvents(path, false, true);\n      }\n    }.bind(this);\n\n    function addOrChange() {\n      handleEvent(watchedDir.has(item) ? 'change' : 'add');\n    }\n    function checkFd() {\n      fs.open(path, 'r', function(error, fd) {\n        if (fd) fs.close(fd);\n        error && error.code !== 'EACCES' ?\n          handleEvent('unlink') : addOrChange();\n      });\n    }\n    // correct for wrong events emitted\n    var wrongEventFlags = [\n      69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912\n    ];\n    if (wrongEventFlags.indexOf(flags) !== -1 || info.event === 'unknown') {\n      if (typeof this.options.ignored === 'function') {\n        fs.stat(path, function(error, stats) {\n          if (checkIgnored(stats)) return;\n          stats ? addOrChange() : handleEvent('unlink');\n        });\n      } else {\n        checkFd();\n      }\n    } else {\n      switch (info.event) {\n      case 'created':\n      case 'modified':\n        return addOrChange();\n      case 'deleted':\n      case 'moved':\n        return checkFd();\n      }\n    }\n  }.bind(this);\n\n  var closer = setFSEventsListener(\n    watchPath,\n    realPath,\n    watchCallback,\n    this.emit.bind(this, 'raw')\n  );\n\n  this._emitReady();\n  return closer;\n};\n\n// Private method: Handle symlinks encountered during directory scan\n\n// * linkPath   - string, path to symlink\n// * fullPath   - string, absolute path to the symlink\n// * transform  - function, pre-existing path transformer\n// * curDepth   - int, level of subdirectories traversed to where symlink is\n\n// Returns nothing\nFsEventsHandler.prototype._handleFsEventsSymlink =\nfunction(linkPath, fullPath, transform, curDepth) {\n  // don't follow the same symlink more than once\n  if (this._symlinkPaths[fullPath]) return;\n  else this._symlinkPaths[fullPath] = true;\n\n  this._readyCount++;\n\n  fs.realpath(linkPath, function(error, linkTarget) {\n    if (this._handleError(error) || this._isIgnored(linkTarget)) {\n      return this._emitReady();\n    }\n\n    this._readyCount++;\n\n    // add the linkTarget for watching with a wrapper for transform\n    // that causes emitted paths to incorporate the link's path\n    this._addToFsEvents(linkTarget || linkPath, function(path) {\n      var dotSlash = '.' + sysPath.sep;\n      var aliasedPath = linkPath;\n      if (linkTarget && linkTarget !== dotSlash) {\n        aliasedPath = path.replace(linkTarget, linkPath);\n      } else if (path !== dotSlash) {\n        aliasedPath = sysPath.join(linkPath, path);\n      }\n      return transform(aliasedPath);\n    }, false, curDepth);\n  }.bind(this));\n};\n\n// Private method: Handle added path with fsevents\n\n// * path       - string, file/directory path or glob pattern\n// * transform  - function, converts working path to what the user expects\n// * forceAdd   - boolean, ensure add is emitted\n// * priorDepth - int, level of subdirectories already traversed\n\n// Returns nothing\nFsEventsHandler.prototype._addToFsEvents =\nfunction(path, transform, forceAdd, priorDepth) {\n\n  // applies transform if provided, otherwise returns same value\n  var processPath = typeof transform === 'function' ?\n    transform : function(val) { return val; };\n\n  var emitAdd = function(newPath, stats) {\n    var pp = processPath(newPath);\n    var isDir = stats.isDirectory();\n    var dirObj = this._getWatchedDir(sysPath.dirname(pp));\n    var base = sysPath.basename(pp);\n\n    // ensure empty dirs get tracked\n    if (isDir) this._getWatchedDir(pp);\n\n    if (dirObj.has(base)) return;\n    dirObj.add(base);\n\n    if (!this.options.ignoreInitial || forceAdd === true) {\n      this._emit(isDir ? 'addDir' : 'add', pp, stats);\n    }\n  }.bind(this);\n\n  var wh = this._getWatchHelpers(path);\n\n  // evaluate what is at the path we're being asked to watch\n  fs[wh.statMethod](wh.watchPath, function(error, stats) {\n    if (this._handleError(error) || this._isIgnored(wh.watchPath, stats)) {\n      this._emitReady();\n      return this._emitReady();\n    }\n\n    if (stats.isDirectory()) {\n      // emit addDir unless this is a glob parent\n      if (!wh.globFilter) emitAdd(processPath(path), stats);\n\n      // don't recurse further if it would exceed depth setting\n      if (priorDepth && priorDepth > this.options.depth) return;\n\n      // scan the contents of the dir\n      readdirp({\n        root: wh.watchPath,\n        entryType: 'all',\n        fileFilter: wh.filterPath,\n        directoryFilter: wh.filterDir,\n        lstat: true,\n        depth: this.options.depth - (priorDepth || 0)\n      }).on('data', function(entry) {\n        // need to check filterPath on dirs b/c filterDir is less restrictive\n        if (entry.stat.isDirectory() && !wh.filterPath(entry)) return;\n\n        var joinedPath = sysPath.join(wh.watchPath, entry.path);\n        var fullPath = entry.fullPath;\n\n        if (wh.followSymlinks && entry.stat.isSymbolicLink()) {\n          // preserve the current depth here since it can't be derived from\n          // real paths past the symlink\n          var curDepth = this.options.depth === undefined ?\n            undefined : depth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;\n\n          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);\n        } else {\n          emitAdd(joinedPath, entry.stat);\n        }\n      }.bind(this)).on('error', function() {\n        // Ignore readdirp errors\n      }).on('end', this._emitReady);\n    } else {\n      emitAdd(wh.watchPath, stats);\n      this._emitReady();\n    }\n  }.bind(this));\n\n  if (this.options.persistent && forceAdd !== true) {\n    var initWatch = function(error, realPath) {\n      if (this.closed) return;\n      var closer = this._watchWithFsEvents(\n        wh.watchPath,\n        sysPath.resolve(realPath || wh.watchPath),\n        processPath,\n        wh.globFilter\n      );\n      if (closer) this._closers[path] = closer;\n    }.bind(this);\n\n    if (typeof transform === 'function') {\n      // realpath has already been resolved\n      initWatch();\n    } else {\n      fs.realpath(wh.watchPath, initWatch);\n    }\n  }\n};\n\nmodule.exports = FsEventsHandler;\nmodule.exports.canUse = canUse;\n"],"file":"fsevents-handler.js"}