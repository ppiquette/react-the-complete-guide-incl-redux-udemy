{"version":3,"sources":["../node_modules/babel-plugin-transform-es2015-unicode-regex/node_modules/regjsparser/parser.js"],"names":["node","str","addRaw","type","kind","range","pos","codePoint","fromOffset","createValue","value","_char","matches","first","second","lookahead","body","matchIndex","parseInt","behavior","to","from","min","max","greedy","negative","bail","obj","amount","res","match","incr","subStr","parseAlternative","createDisjunction","term","parseTerm","createAlternative","current","anchor","parseAnchor","atom","parseAtom","quantifier","parseQuantifier","flattenBody","updateRawStart","parseDisjunction","skip","group","createGroup","closedCaptureCounter","createAnchor","parseGroup","createQuantifier","matchReg","createCharacter","createDot","parseAtomEscape","parseCharacterClass","firstEscape","next","prevPos","secondEscape","parseClassEscape","parseDecimalEscape","createEscaped","parseCharacterEscape","refIdx","createReference","backrefDenied","createCharacterClassEscape","parseUnicodeSurrogatePairEscape","hasUnicodeFlag","parseIdentityEscape","NonAsciiIdentifierPart","ch","String","ZWJ","ZWNJ","isIdentifierPart","tmp","parseClassRanges","createCharacterClass","parseNonemptyClassRanges","parseClassAtom","classRanges","createClassRange","parseNonemptyClassRangesNoDash","parseHelperClassRanges","parseClassAtomNoDash","contextStart","Math","contextEnd","context","pointer","SyntaxError","message","details","firstIteration","flags","result","i","regjsparser","parse","module","window"],"mappings":"cAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC,CAAA,YAAW;AAEV,WAAA,KAAA,CAAA,GAAA,EAAA,KAAA,EAA2B;AACzB,aAAA,MAAA,CAAA,IAAA,EAAsB;AACpBA,MAAAA,IAAI,CAAJA,GAAAA,GAAWC,GAAG,CAAHA,SAAAA,CAAcD,IAAI,CAAJA,KAAAA,CAAdC,CAAcD,CAAdC,EAA6BD,IAAI,CAAJA,KAAAA,CAAxCA,CAAwCA,CAA7BC,CAAXD;AACA,aAAA,IAAA;AACD;;AAED,aAAA,cAAA,CAAA,IAAA,EAAA,KAAA,EAAqC;AACnCA,MAAAA,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,IAAAA,KAAAA;AACA,aAAOE,MAAM,CAAb,IAAa,CAAb;AACD;;AAED,aAAA,YAAA,CAAA,IAAA,EAAA,SAAA,EAAuC;AACrC,aAAOA,MAAM,CAAC;AACZC,QAAAA,IAAI,EADQ,QAAA;AAEZC,QAAAA,IAAI,EAFQ,IAAA;AAGZC,QAAAA,KAAK,EAAE,CACLC,GAAG,GADE,SAAA,EAAA,GAAA;AAHK,OAAD,CAAb;AAQD;;AAED,aAAA,WAAA,CAAA,IAAA,EAAA,SAAA,EA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","sourcesContent":["// regjsparser\n//\n// ==================================================================\n//\n// See ECMA-262 Standard: 15.10.1\n//\n// NOTE: The ECMA-262 standard uses the term \"Assertion\" for /^/. Here the\n//   term \"Anchor\" is used.\n//\n// Pattern ::\n//      Disjunction\n//\n// Disjunction ::\n//      Alternative\n//      Alternative | Disjunction\n//\n// Alternative ::\n//      [empty]\n//      Alternative Term\n//\n// Term ::\n//      Anchor\n//      Atom\n//      Atom Quantifier\n//\n// Anchor ::\n//      ^\n//      $\n//      \\ b\n//      \\ B\n//      ( ? = Disjunction )\n//      ( ? ! Disjunction )\n//\n// Quantifier ::\n//      QuantifierPrefix\n//      QuantifierPrefix ?\n//\n// QuantifierPrefix ::\n//      *\n//      +\n//      ?\n//      { DecimalDigits }\n//      { DecimalDigits , }\n//      { DecimalDigits , DecimalDigits }\n//\n// Atom ::\n//      PatternCharacter\n//      .\n//      \\ AtomEscape\n//      CharacterClass\n//      ( Disjunction )\n//      ( ? : Disjunction )\n//\n// PatternCharacter ::\n//      SourceCharacter but not any of: ^ $ \\ . * + ? ( ) [ ] { } |\n//\n// AtomEscape ::\n//      DecimalEscape\n//      CharacterEscape\n//      CharacterClassEscape\n//\n// CharacterEscape[U] ::\n//      ControlEscape\n//      c ControlLetter\n//      HexEscapeSequence\n//      RegExpUnicodeEscapeSequence[?U] (ES6)\n//      IdentityEscape[?U]\n//\n// ControlEscape ::\n//      one of f n r t v\n// ControlLetter ::\n//      one of\n//          a b c d e f g h i j k l m n o p q r s t u v w x y z\n//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n//\n// IdentityEscape ::\n//      SourceCharacter but not IdentifierPart\n//      <ZWJ>\n//      <ZWNJ>\n//\n// DecimalEscape ::\n//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n//\n// CharacterClassEscape ::\n//      one of d D s S w W\n//\n// CharacterClass ::\n//      [ [lookahead ∉ {^}] ClassRanges ]\n//      [ ^ ClassRanges ]\n//\n// ClassRanges ::\n//      [empty]\n//      NonemptyClassRanges\n//\n// NonemptyClassRanges ::\n//      ClassAtom\n//      ClassAtom NonemptyClassRangesNoDash\n//      ClassAtom - ClassAtom ClassRanges\n//\n// NonemptyClassRangesNoDash ::\n//      ClassAtom\n//      ClassAtomNoDash NonemptyClassRangesNoDash\n//      ClassAtomNoDash - ClassAtom ClassRanges\n//\n// ClassAtom ::\n//      -\n//      ClassAtomNoDash\n//\n// ClassAtomNoDash ::\n//      SourceCharacter but not one of \\ or ] or -\n//      \\ ClassEscape\n//\n// ClassEscape ::\n//      DecimalEscape\n//      b\n//      CharacterEscape\n//      CharacterClassEscape\n\n(function() {\n\n  function parse(str, flags) {\n    function addRaw(node) {\n      node.raw = str.substring(node.range[0], node.range[1]);\n      return node;\n    }\n\n    function updateRawStart(node, start) {\n      node.range[0] = start;\n      return addRaw(node);\n    }\n\n    function createAnchor(kind, rawLength) {\n      return addRaw({\n        type: 'anchor',\n        kind: kind,\n        range: [\n          pos - rawLength,\n          pos\n        ]\n      });\n    }\n\n    function createValue(kind, codePoint, from, to) {\n      return addRaw({\n        type: 'value',\n        kind: kind,\n        codePoint: codePoint,\n        range: [from, to]\n      });\n    }\n\n    function createEscaped(kind, codePoint, value, fromOffset) {\n      fromOffset = fromOffset || 0;\n      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);\n    }\n\n    function createCharacter(matches) {\n      var _char = matches[0];\n      var first = _char.charCodeAt(0);\n      if (hasUnicodeFlag) {\n        var second;\n        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {\n          second = lookahead().charCodeAt(0);\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            pos++;\n            return createValue(\n                'symbol',\n                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,\n                pos - 2, pos);\n          }\n        }\n      }\n      return createValue('symbol', first, pos - 1, pos);\n    }\n\n    function createDisjunction(alternatives, from, to) {\n      return addRaw({\n        type: 'disjunction',\n        body: alternatives,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createDot() {\n      return addRaw({\n        type: 'dot',\n        range: [\n          pos - 1,\n          pos\n        ]\n      });\n    }\n\n    function createCharacterClassEscape(value) {\n      return addRaw({\n        type: 'characterClassEscape',\n        value: value,\n        range: [\n          pos - 2,\n          pos\n        ]\n      });\n    }\n\n    function createReference(matchIndex) {\n      return addRaw({\n        type: 'reference',\n        matchIndex: parseInt(matchIndex, 10),\n        range: [\n          pos - 1 - matchIndex.length,\n          pos\n        ]\n      });\n    }\n\n    function createGroup(behavior, disjunction, from, to) {\n      return addRaw({\n        type: 'group',\n        behavior: behavior,\n        body: disjunction,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createQuantifier(min, max, from, to) {\n      if (to == null) {\n        from = pos - 1;\n        to = pos;\n      }\n\n      return addRaw({\n        type: 'quantifier',\n        min: min,\n        max: max,\n        greedy: true,\n        body: null, // set later on\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createAlternative(terms, from, to) {\n      return addRaw({\n        type: 'alternative',\n        body: terms,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createCharacterClass(classRanges, negative, from, to) {\n      return addRaw({\n        type: 'characterClass',\n        body: classRanges,\n        negative: negative,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createClassRange(min, max, from, to) {\n      // See 15.10.2.15:\n      if (min.codePoint > max.codePoint) {\n        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);\n      }\n\n      return addRaw({\n        type: 'characterClassRange',\n        min: min,\n        max: max,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function flattenBody(body) {\n      if (body.type === 'alternative') {\n        return body.body;\n      } else {\n        return [body];\n      }\n    }\n\n    function isEmpty(obj) {\n      return obj.type === 'empty';\n    }\n\n    function incr(amount) {\n      amount = (amount || 1);\n      var res = str.substring(pos, pos + amount);\n      pos += (amount || 1);\n      return res;\n    }\n\n    function skip(value) {\n      if (!match(value)) {\n        bail('character', value);\n      }\n    }\n\n    function match(value) {\n      if (str.indexOf(value, pos) === pos) {\n        return incr(value.length);\n      }\n    }\n\n    function lookahead() {\n      return str[pos];\n    }\n\n    function current(value) {\n      return str.indexOf(value, pos) === pos;\n    }\n\n    function next(value) {\n      return str[pos + 1] === value;\n    }\n\n    function matchReg(regExp) {\n      var subStr = str.substring(pos);\n      var res = subStr.match(regExp);\n      if (res) {\n        res.range = [];\n        res.range[0] = pos;\n        incr(res[0].length);\n        res.range[1] = pos;\n      }\n      return res;\n    }\n\n    function parseDisjunction() {\n      // Disjunction ::\n      //      Alternative\n      //      Alternative | Disjunction\n      var res = [], from = pos;\n      res.push(parseAlternative());\n\n      while (match('|')) {\n        res.push(parseAlternative());\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createDisjunction(res, from, pos);\n    }\n\n    function parseAlternative() {\n      var res = [], from = pos;\n      var term;\n\n      // Alternative ::\n      //      [empty]\n      //      Alternative Term\n      while (term = parseTerm()) {\n        res.push(term);\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createAlternative(res, from, pos);\n    }\n\n    function parseTerm() {\n      // Term ::\n      //      Anchor\n      //      Atom\n      //      Atom Quantifier\n\n      if (pos >= str.length || current('|') || current(')')) {\n        return null; /* Means: The term is empty */\n      }\n\n      var anchor = parseAnchor();\n\n      if (anchor) {\n        return anchor;\n      }\n\n      var atom = parseAtom();\n      if (!atom) {\n        bail('Expected atom');\n      }\n      var quantifier = parseQuantifier() || false;\n      if (quantifier) {\n        quantifier.body = flattenBody(atom);\n        // The quantifier contains the atom. Therefore, the beginning of the\n        // quantifier range is given by the beginning of the atom.\n        updateRawStart(quantifier, atom.range[0]);\n        return quantifier;\n      }\n      return atom;\n    }\n\n    function parseGroup(matchA, typeA, matchB, typeB) {\n      var type = null, from = pos;\n\n      if (match(matchA)) {\n        type = typeA;\n      } else if (match(matchB)) {\n        type = typeB;\n      } else {\n        return false;\n      }\n\n      var body = parseDisjunction();\n      if (!body) {\n        bail('Expected disjunction');\n      }\n      skip(')');\n      var group = createGroup(type, flattenBody(body), from, pos);\n\n      if (type == 'normal') {\n        // Keep track of the number of closed groups. This is required for\n        // parseDecimalEscape(). In case the string is parsed a second time the\n        // value already holds the total count and no incrementation is required.\n        if (firstIteration) {\n          closedCaptureCounter++;\n        }\n      }\n      return group;\n    }\n\n    function parseAnchor() {\n      // Anchor ::\n      //      ^\n      //      $\n      //      \\ b\n      //      \\ B\n      //      ( ? = Disjunction )\n      //      ( ? ! Disjunction )\n      var res, from = pos;\n\n      if (match('^')) {\n        return createAnchor('start', 1 /* rawLength */);\n      } else if (match('$')) {\n        return createAnchor('end', 1 /* rawLength */);\n      } else if (match('\\\\b')) {\n        return createAnchor('boundary', 2 /* rawLength */);\n      } else if (match('\\\\B')) {\n        return createAnchor('not-boundary', 2 /* rawLength */);\n      } else {\n        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');\n      }\n    }\n\n    function parseQuantifier() {\n      // Quantifier ::\n      //      QuantifierPrefix\n      //      QuantifierPrefix ?\n      //\n      // QuantifierPrefix ::\n      //      *\n      //      +\n      //      ?\n      //      { DecimalDigits }\n      //      { DecimalDigits , }\n      //      { DecimalDigits , DecimalDigits }\n\n      var res, from = pos;\n      var quantifier;\n      var min, max;\n\n      if (match('*')) {\n        quantifier = createQuantifier(0);\n      }\n      else if (match('+')) {\n        quantifier = createQuantifier(1);\n      }\n      else if (match('?')) {\n        quantifier = createQuantifier(0, 1);\n      }\n      else if (res = matchReg(/^\\{([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        max = parseInt(res[2], 10);\n        if (min > max) {\n          bail('numbers out of order in {} quantifier', '', from, pos);\n        }\n        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);\n      }\n\n      if (quantifier) {\n        if (match('?')) {\n          quantifier.greedy = false;\n          quantifier.range[1] += 1;\n        }\n      }\n\n      return quantifier;\n    }\n\n    function parseAtom() {\n      // Atom ::\n      //      PatternCharacter\n      //      .\n      //      \\ AtomEscape\n      //      CharacterClass\n      //      ( Disjunction )\n      //      ( ? : Disjunction )\n\n      var res;\n\n      // jviereck: allow ']', '}' here as well to be compatible with browser's\n      //   implementations: ']'.match(/]/);\n      // if (res = matchReg(/^[^^$\\\\.*+?()[\\]{}|]/)) {\n      if (res = matchReg(/^[^^$\\\\.*+?(){[|]/)) {\n        //      PatternCharacter\n        return createCharacter(res);\n      }\n      else if (match('.')) {\n        //      .\n        return createDot();\n      }\n      else if (match('\\\\')) {\n        //      \\ AtomEscape\n        res = parseAtomEscape();\n        if (!res) {\n          bail('atomEscape');\n        }\n        return res;\n      }\n      else if (res = parseCharacterClass()) {\n        return res;\n      }\n      else {\n        //      ( Disjunction )\n        //      ( ? : Disjunction )\n        return parseGroup('(?:', 'ignore', '(', 'normal');\n      }\n    }\n\n    function parseUnicodeSurrogatePairEscape(firstEscape) {\n      if (hasUnicodeFlag) {\n        var first, second;\n        if (firstEscape.kind == 'unicodeEscape' &&\n          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&\n          current('\\\\') && next('u') ) {\n          var prevPos = pos;\n          pos++;\n          var secondEscape = parseClassEscape();\n          if (secondEscape.kind == 'unicodeEscape' &&\n            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            firstEscape.range[1] = secondEscape.range[1];\n            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            firstEscape.type = 'value';\n            firstEscape.kind = 'unicodeCodePointEscape';\n            addRaw(firstEscape);\n          }\n          else {\n            pos = prevPos;\n          }\n        }\n      }\n      return firstEscape;\n    }\n\n    function parseClassEscape() {\n      return parseAtomEscape(true);\n    }\n\n    function parseAtomEscape(insideCharacterClass) {\n      // AtomEscape ::\n      //      DecimalEscape\n      //      CharacterEscape\n      //      CharacterClassEscape\n\n      var res, from = pos;\n\n      res = parseDecimalEscape();\n      if (res) {\n        return res;\n      }\n\n      // For ClassEscape\n      if (insideCharacterClass) {\n        if (match('b')) {\n          // 15.10.2.19\n          // The production ClassEscape :: b evaluates by returning the\n          // CharSet containing the one character <BS> (Unicode value 0008).\n          return createEscaped('singleEscape', 0x0008, '\\\\b');\n        } else if (match('B')) {\n          bail('\\\\B not possible inside of CharacterClass', '', from);\n        }\n      }\n\n      res = parseCharacterEscape();\n\n      return res;\n    }\n\n\n    function parseDecimalEscape() {\n      // DecimalEscape ::\n      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n      //      CharacterClassEscape :: one of d D s S w W\n\n      var res, match;\n\n      if (res = matchReg(/^(?!0)\\d+/)) {\n        match = res[0];\n        var refIdx = parseInt(res[0], 10);\n        if (refIdx <= closedCaptureCounter) {\n          // If the number is smaller than the normal-groups found so\n          // far, then it is a reference...\n          return createReference(res[0]);\n        } else {\n          // ... otherwise it needs to be interpreted as a octal (if the\n          // number is in an octal format). If it is NOT octal format,\n          // then the slash is ignored and the number is matched later\n          // as normal characters.\n\n          // Recall the negative decision to decide if the input must be parsed\n          // a second time with the total normal-groups.\n          backrefDenied.push(refIdx);\n\n          // Reset the position again, as maybe only parts of the previous\n          // matched numbers are actual octal numbers. E.g. in '019' only\n          // the '01' should be matched.\n          incr(-res[0].length);\n          if (res = matchReg(/^[0-7]{1,3}/)) {\n            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);\n          } else {\n            // If we end up here, we have a case like /\\91/. Then the\n            // first slash is to be ignored and the 9 & 1 to be treated\n            // like ordinary characters. Create a character for the\n            // first number only here - other number-characters\n            // (if available) will be matched later.\n            res = createCharacter(matchReg(/^[89]/));\n            return updateRawStart(res, res.range[0] - 1);\n          }\n        }\n      }\n      // Only allow octal numbers in the following. All matched numbers start\n      // with a zero (if the do not, the previous if-branch is executed).\n      // If the number is not octal format and starts with zero (e.g. `091`)\n      // then only the zeros `0` is treated here and the `91` are ordinary\n      // characters.\n      // Example:\n      //   /\\091/.exec('\\091')[0].length === 3\n      else if (res = matchReg(/^[0-7]{1,3}/)) {\n        match = res[0];\n        if (/^0{1,3}$/.test(match)) {\n          // If they are all zeros, then only take the first one.\n          return createEscaped('null', 0x0000, '0', match.length + 1);\n        } else {\n          return createEscaped('octal', parseInt(match, 8), match, 1);\n        }\n      } else if (res = matchReg(/^[dDsSwW]/)) {\n        return createCharacterClassEscape(res[0]);\n      }\n      return false;\n    }\n\n    function parseCharacterEscape() {\n      // CharacterEscape ::\n      //      ControlEscape\n      //      c ControlLetter\n      //      HexEscapeSequence\n      //      UnicodeEscapeSequence\n      //      IdentityEscape\n\n      var res;\n      if (res = matchReg(/^[fnrtv]/)) {\n        // ControlEscape\n        var codePoint = 0;\n        switch (res[0]) {\n          case 't': codePoint = 0x009; break;\n          case 'n': codePoint = 0x00A; break;\n          case 'v': codePoint = 0x00B; break;\n          case 'f': codePoint = 0x00C; break;\n          case 'r': codePoint = 0x00D; break;\n        }\n        return createEscaped('singleEscape', codePoint, '\\\\' + res[0]);\n      } else if (res = matchReg(/^c([a-zA-Z])/)) {\n        // c ControlLetter\n        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);\n      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {\n        // HexEscapeSequence\n        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);\n      } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {\n        // UnicodeEscapeSequence\n        return parseUnicodeSurrogatePairEscape(\n          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)\n        );\n      } else if (hasUnicodeFlag && (res = matchReg(/^u\\{([0-9a-fA-F]+)\\}/))) {\n        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)\n        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);\n      } else {\n        // IdentityEscape\n        return parseIdentityEscape();\n      }\n    }\n\n    // Taken from the Esprima parser.\n    function isIdentifierPart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierPart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]');\n\n      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\n        (ch >= 65 && ch <= 90) ||         // A..Z\n        (ch >= 97 && ch <= 122) ||        // a..z\n        (ch >= 48 && ch <= 57) ||         // 0..9\n        (ch === 92) ||                    // \\ (backslash)\n        ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n    }\n\n    function parseIdentityEscape() {\n      // IdentityEscape ::\n      //      SourceCharacter but not IdentifierPart\n      //      <ZWJ>\n      //      <ZWNJ>\n\n      var ZWJ = '\\u200C';\n      var ZWNJ = '\\u200D';\n\n      var tmp;\n\n      if (!isIdentifierPart(lookahead())) {\n        tmp = incr();\n        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);\n      }\n\n      if (match(ZWJ)) {\n        // <ZWJ>\n        return createEscaped('identifier', 0x200C, ZWJ);\n      } else if (match(ZWNJ)) {\n        // <ZWNJ>\n        return createEscaped('identifier', 0x200D, ZWNJ);\n      }\n\n      return null;\n    }\n\n    function parseCharacterClass() {\n      // CharacterClass ::\n      //      [ [lookahead ∉ {^}] ClassRanges ]\n      //      [ ^ ClassRanges ]\n\n      var res, from = pos;\n      if (res = matchReg(/^\\[\\^/)) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, true, from, pos);\n      } else if (match('[')) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, false, from, pos);\n      }\n\n      return null;\n    }\n\n    function parseClassRanges() {\n      // ClassRanges ::\n      //      [empty]\n      //      NonemptyClassRanges\n\n      var res;\n      if (current(']')) {\n        // Empty array means nothing insinde of the ClassRange.\n        return [];\n      } else {\n        res = parseNonemptyClassRanges();\n        if (!res) {\n          bail('nonEmptyClassRanges');\n        }\n        return res;\n      }\n    }\n\n    function parseHelperClassRanges(atom) {\n      var from, to, res;\n      if (current('-') && !next(']')) {\n        // ClassAtom - ClassAtom ClassRanges\n        skip('-');\n\n        res = parseClassAtom();\n        if (!res) {\n          bail('classAtom');\n        }\n        to = pos;\n        var classRanges = parseClassRanges();\n        if (!classRanges) {\n          bail('classRanges');\n        }\n        from = atom.range[0];\n        if (classRanges.type === 'empty') {\n          return [createClassRange(atom, res, from, to)];\n        }\n        return [createClassRange(atom, res, from, to)].concat(classRanges);\n      }\n\n      res = parseNonemptyClassRangesNoDash();\n      if (!res) {\n        bail('nonEmptyClassRangesNoDash');\n      }\n\n      return [atom].concat(res);\n    }\n\n    function parseNonemptyClassRanges() {\n      // NonemptyClassRanges ::\n      //      ClassAtom\n      //      ClassAtom NonemptyClassRangesNoDash\n      //      ClassAtom - ClassAtom ClassRanges\n\n      var atom = parseClassAtom();\n      if (!atom) {\n        bail('classAtom');\n      }\n\n      if (current(']')) {\n        // ClassAtom\n        return [atom];\n      }\n\n      // ClassAtom NonemptyClassRangesNoDash\n      // ClassAtom - ClassAtom ClassRanges\n      return parseHelperClassRanges(atom);\n    }\n\n    function parseNonemptyClassRangesNoDash() {\n      // NonemptyClassRangesNoDash ::\n      //      ClassAtom\n      //      ClassAtomNoDash NonemptyClassRangesNoDash\n      //      ClassAtomNoDash - ClassAtom ClassRanges\n\n      var res = parseClassAtom();\n      if (!res) {\n        bail('classAtom');\n      }\n      if (current(']')) {\n        //      ClassAtom\n        return res;\n      }\n\n      // ClassAtomNoDash NonemptyClassRangesNoDash\n      // ClassAtomNoDash - ClassAtom ClassRanges\n      return parseHelperClassRanges(res);\n    }\n\n    function parseClassAtom() {\n      // ClassAtom ::\n      //      -\n      //      ClassAtomNoDash\n      if (match('-')) {\n        return createCharacter('-');\n      } else {\n        return parseClassAtomNoDash();\n      }\n    }\n\n    function parseClassAtomNoDash() {\n      // ClassAtomNoDash ::\n      //      SourceCharacter but not one of \\ or ] or -\n      //      \\ ClassEscape\n\n      var res;\n      if (res = matchReg(/^[^\\\\\\]-]/)) {\n        return createCharacter(res[0]);\n      } else if (match('\\\\')) {\n        res = parseClassEscape();\n        if (!res) {\n          bail('classEscape');\n        }\n\n        return parseUnicodeSurrogatePairEscape(res);\n      }\n    }\n\n    function bail(message, details, from, to) {\n      from = from == null ? pos : from;\n      to = to == null ? from : to;\n\n      var contextStart = Math.max(0, from - 10);\n      var contextEnd = Math.min(to + 10, str.length);\n\n      // Output a bit of context and a line pointing to where our error is.\n      //\n      // We are assuming that there are no actual newlines in the content as this is a regular expression.\n      var context = '    ' + str.substring(contextStart, contextEnd);\n      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';\n\n      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\\n' + context + '\\n' + pointer);\n    }\n\n    var backrefDenied = [];\n    var closedCaptureCounter = 0;\n    var firstIteration = true;\n    var hasUnicodeFlag = (flags || \"\").indexOf(\"u\") !== -1;\n    var pos = 0;\n\n    // Convert the input to a string and treat the empty string special.\n    str = String(str);\n    if (str === '') {\n      str = '(?:)';\n    }\n\n    var result = parseDisjunction();\n\n    if (result.range[1] !== str.length) {\n      bail('Could not parse entire input - got stuck', '', result.range[1]);\n    }\n\n    // The spec requires to interpret the `\\2` in `/\\2()()/` as backreference.\n    // As the parser collects the number of capture groups as the string is\n    // parsed it is impossible to make these decisions at the point when the\n    // `\\2` is handled. In case the local decision turns out to be wrong after\n    // the parsing has finished, the input string is parsed a second time with\n    // the total number of capture groups set.\n    //\n    // SEE: https://github.com/jviereck/regjsparser/issues/70\n    for (var i = 0; i < backrefDenied.length; i++) {\n      if (backrefDenied[i] <= closedCaptureCounter) {\n        // Parse the input a second time.\n        pos = 0;\n        firstIteration = false;\n        return parseDisjunction();\n      }\n    }\n\n    return result;\n  }\n\n  var regjsparser = {\n    parse: parse\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = regjsparser;\n  } else {\n    window.regjsparser = regjsparser;\n  }\n\n}());\n"],"file":"parser.js"}