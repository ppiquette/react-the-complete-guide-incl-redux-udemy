{"version":3,"sources":["../node_modules/babel-plugin-transform-es2015-unicode-regex/node_modules/regjsgen/regjsgen.js"],"names":["objectTypes","root","oldRoot","freeExports","freeModule","module","freeGlobal","stringFromCharCode","String","floor","Math","MAX_SIZE","codeUnits","index","length","arguments","result","codePoint","Number","isFinite","RangeError","highSurrogate","lowSurrogate","expected","type","Error","assertType","RegExp","node","generate","terms","generateTerm","i","classRanges","generateClassAtom","min","max","body","quantifier","generateAtom","kind","fromCodePoint","define"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;AAKA;AAAE,CAAA,YAAW;AACX;AAEA;;AACA,MAAIA,WAAW,GAAG;AAChB,gBADgB,IAAA;AAEhB,cAAU;AAFM,GAAlB;AAKA;;AACA,MAAIC,IAAI,GAAID,WAAW,CAAA,OAAA,MAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAXA,MAAW,CAAA,CAAXA,IAAD,MAACA,IAAZ,IAAA;AAEA;;AACA,MAAIE,OAAO,GAAX,IAAA;AAEA;;AACA,MAAIC,WAAW,GAAGH,WAAW,CAAA,OAAA,OAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAXA,OAAW,CAAA,CAAXA,IAAlB,OAAA;AAEA;;AACA,MAAII,UAAU,GAAGJ,WAAW,CAAA,OAAA,MAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAXA,MAAW,CAAA,CAAXA,IAAAA,MAAAA,IAAwC,CAACK,MAAM,CAA/CL,QAAAA,IAAjB,MAAA;AAEA;;AACA,MAAIM,UAAU,GAAGH,WAAW,IAAXA,UAAAA,IAA6B,CAAA,OAAA,MAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAA,MAAA,CAAA,KAA7BA,QAAAA,IAAjB,MAAA;;AACA,MAAIG,UAAU,KAAKA,UAAU,CAAVA,MAAAA,KAAAA,UAAAA,IAAoCA,UAAU,CAAVA,MAAAA,KAApCA,UAAAA,IAAwEA,UAAU,CAAVA,IAAAA,KAA3F,UAAc,CAAd,EAA4H;AAC1HL,IAAAA,IAAI,GAAJA,UAAAA;AACD;AAED;;AAEA;;;AAEA,MAAIM,kBAAkB,GAAGC,MAAM,CAA/B,YAAA;AACA,MAAIC,KAAK,GAAGC,IAAI,CAAhB,KAAA;;AACA,WAAA,aAAA,GAAyB;AACvB,QAAIC,QAAQ,GAAZ,MAAA;AACA,QAAIC,SAAS,GAAb,EAAA;AACA,QAAA,aAAA;AACA,QAAA,YAAA;AACA,QAAIC,KAAK,GAAG,CAAZ,CAAA;AACA,QAAIC,MAAM,GAAGC,SAAS,CAAtB,MAAA;;AACA,QAAI,CAAJ,MAAA,EAAa;AACX,aAAA,EAAA;AACD;;AACD,QAAIC,MAAM,GAAV,EAAA;;AACA,WAAO,EAAA,KAAA,GAAP,MAAA,EAAyB;AACvB,UAAIC,SAAS,GAAGC,MAAM,CAACH,SAAS,CAAhC,KAAgC,CAAV,CAAtB;;AACA,UACE,CAACI,QAAQ,CAAT,SAAS,CAAT,IAAwB;AACxBF,MAAAA,SAAS,GADT,CAAA,IACiB;AACjBA,MAAAA,SAAS,GAFT,QAAA,IAEwB;AACxBR,MAAAA,KAAK,CAALA,SAAK,CAALA,IAJF,SAAA,CAIgC;AAJhC,QAKE;AACA,gBAAMW,UAAU,CAAC,yBAAjB,SAAgB,CAAhB;AACD;;AACD,UAAIH,SAAS,IAAb,MAAA,EAAyB;AACvB;AACAL,QAAAA,SAAS,CAATA,IAAAA,CAAAA,SAAAA;AAFF,OAAA,MAGO;AACL;AACA;AACAK,QAAAA,SAAS,IAATA,OAAAA;AACAI,QAAAA,aAAa,GAAG,CAACJ,SAAS,IAAV,EAAA,IAAhBI,MAAAA;AACAC,QAAAA,YAAY,GAAIL,SAAS,GAAV,KAACA,GAAhBK,MAAAA;AACAV,QAAAA,SAAS,CAATA,IAAAA,CAAAA,aAAAA,EAAAA,YAAAA;AACD;;AACD,UAAIC,KAAK,GAALA,CAAAA,IAAAA,MAAAA,IAAuBD,SAAS,CAATA,MAAAA,GAA3B,QAAA,EAAwD;AACtDI,QAAAA,MAAM,IAAIT,kBAAkB,CAAlBA,KAAAA,CAAAA,IAAAA,EAAVS,SAAUT,CAAVS;AACAJ,QAAAA,SAAS,CAATA,MAAAA,GAAAA,CAAAA;AACD;AACF;;AACD,WAAA,MAAA;AACD;;AAED,WAAA,UAAA,CAAA,IAAA,EAAA,QAAA,EAAoC;AAClC,QAAIW,QAAQ,CAARA,OAAAA,CAAAA,GAAAA,KAAyB,CAA7B,CAAA,EAAiC;AAC/B,UAAIC,IAAI,IAAR,QAAA,EAAsB;AACpB;AACD;;AAED,YAAMC,KAAK,CAAC,wBAAZ,IAAW,CAAX;AACD;;AAEDF,IAAAA,QAAQ,GAAGG,UAAU,CAAVA,cAAAA,CAAAA,QAAAA,IACPA,UAAU,CADHA,QACG,CADHA,GAENA,UAAU,CAAVA,QAAU,CAAVA,GAAuBC,MAAM,CAAC,SAAA,QAAA,GAFnCJ,IAEkC,CAFlCA;;AAIA,QAAIA,QAAQ,CAARA,IAAAA,CAAJ,IAAIA,CAAJ,EAAyB;AACvB;AACD;;AAED,UAAME,KAAK,CAAC,wBAAZ,IAAW,CAAX;AACD;AAED;;;AAEA,WAAA,QAAA,CAAA,IAAA,EAAwB;AACtB,QAAID,IAAI,GAAGI,IAAI,CAAf,IAAA;;AAEA,QAAIC,QAAQ,CAARA,cAAAA,CAAAA,IAAAA,KAAiC,OAAOA,QAAQ,CAAf,IAAe,CAAf,IAArC,UAAA,EAA0E;AACxE,aAAOA,QAAQ,CAARA,IAAQ,CAARA,CAAP,IAAOA,CAAP;AACD;;AAED,UAAMJ,KAAK,CAAC,wBAAZ,IAAW,CAAX;AACD;AAED;;;AAEA,WAAA,mBAAA,CAAA,IAAA,EAAmC;AACjCC,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,aAAU,CAAVA;AAEA,QAAII,KAAK,GAAGF,IAAI,CAAhB,IAAA;AAAA,QACId,MAAM,GAAGgB,KAAK,GAAGA,KAAK,CAAR,MAAA,GADlB,CAAA;;AAGA,QAAIhB,MAAM,IAAV,CAAA,EAAiB;AACf,aAAOiB,YAAY,CAACD,KAAK,CAAzB,CAAyB,CAAN,CAAnB;AADF,KAAA,MAEO;AACL,UAAIE,CAAC,GAAG,CAAR,CAAA;AAAA,UACIhB,MAAM,GADV,EAAA;;AAGA,aAAO,EAAA,CAAA,GAAP,MAAA,EAAqB;AACnBA,QAAAA,MAAM,IAAIe,YAAY,CAACD,KAAK,CAA5Bd,CAA4B,CAAN,CAAtBA;AACD;;AAED,aAAA,MAAA;AACD;AACF;;AAED,WAAA,cAAA,CAAA,IAAA,EAA8B;AAC5BU,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,QAAU,CAAVA;;AAEA,YAAQE,IAAI,CAAZ,IAAA;AACE,WAAA,OAAA;AACE,eAAA,GAAA;;AACF,WAAA,KAAA;AACE,eAAA,GAAA;;AACF,WAAA,UAAA;AACE,eAAA,KAAA;;AACF,WAAA,cAAA;AACE,eAAA,KAAA;;AACF;AACE,cAAMH,KAAK,CAAX,mBAAW,CAAX;AAVJ;AAYD;;AAED,WAAA,YAAA,CAAA,IAAA,EAA4B;AAC1BC,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,sEAAU,CAAVA;AAEA,WAAOG,QAAQ,CAAf,IAAe,CAAf;AACD;;AAED,WAAA,sBAAA,CAAA,IAAA,EAAsC;AACpCH,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,gBAAU,CAAVA;AAEA,QAAIO,WAAW,GAAGL,IAAI,CAAtB,IAAA;AAAA,QACId,MAAM,GAAGmB,WAAW,GAAGA,WAAW,CAAd,MAAA,GADxB,CAAA;AAGA,QAAID,CAAC,GAAG,CAAR,CAAA;AAAA,QACIhB,MAAM,GADV,GAAA;;AAGA,QAAIY,IAAI,CAAR,QAAA,EAAmB;AACjBZ,MAAAA,MAAM,IAANA,GAAAA;AACD;;AAED,WAAO,EAAA,CAAA,GAAP,MAAA,EAAqB;AACnBA,MAAAA,MAAM,IAAIkB,iBAAiB,CAACD,WAAW,CAAvCjB,CAAuC,CAAZ,CAA3BA;AACD;;AAEDA,IAAAA,MAAM,IAANA,GAAAA;AAEA,WAAA,MAAA;AACD;;AAED,WAAA,4BAAA,CAAA,IAAA,EAA4C;AAC1CU,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,sBAAU,CAAVA;AAEA,WAAO,OAAOE,IAAI,CAAlB,KAAA;AACD;;AAED,WAAA,2BAAA,CAAA,IAAA,EAA2C;AACzCF,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,qBAAU,CAAVA;AAEA,QAAIS,GAAG,GAAGP,IAAI,CAAd,GAAA;AAAA,QACIQ,GAAG,GAAGR,IAAI,CADd,GAAA;;AAGA,QAAIO,GAAG,CAAHA,IAAAA,IAAAA,qBAAAA,IAAqCC,GAAG,CAAHA,IAAAA,IAAzC,qBAAA,EAA4E;AAC1E,YAAMX,KAAK,CAAX,+BAAW,CAAX;AACD;;AAED,WAAOS,iBAAiB,CAAjBA,GAAiB,CAAjBA,GAAAA,GAAAA,GAA+BA,iBAAiB,CAAvD,GAAuD,CAAvD;AACD;;AAED,WAAA,iBAAA,CAAA,IAAA,EAAiC;AAC/BR,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,2DAAU,CAAVA;AAEA,WAAOG,QAAQ,CAAf,IAAe,CAAf;AACD;;AAED,WAAA,mBAAA,CAAA,IAAA,EAAmC;AACjCH,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,aAAU,CAAVA;AAEA,QAAIW,IAAI,GAAGT,IAAI,CAAf,IAAA;AAAA,QACId,MAAM,GAAGuB,IAAI,GAAGA,IAAI,CAAP,MAAA,GADjB,CAAA;;AAGA,QAAIvB,MAAM,IAAV,CAAA,EAAiB;AACf,YAAMW,KAAK,CAAX,SAAW,CAAX;AADF,KAAA,MAEO,IAAIX,MAAM,IAAV,CAAA,EAAiB;AACtB,aAAOe,QAAQ,CAACQ,IAAI,CAApB,CAAoB,CAAL,CAAf;AADK,KAAA,MAEA;AACL,UAAIL,CAAC,GAAG,CAAR,CAAA;AAAA,UACIhB,MAAM,GADV,EAAA;;AAGA,aAAO,EAAA,CAAA,GAAP,MAAA,EAAqB;AACnB,YAAIgB,CAAC,IAAL,CAAA,EAAY;AACVhB,UAAAA,MAAM,IAANA,GAAAA;AACD;;AACDA,QAAAA,MAAM,IAAIa,QAAQ,CAACQ,IAAI,CAAvBrB,CAAuB,CAAL,CAAlBA;AACD;;AAED,aAAA,MAAA;AACD;AACF;;AAED,WAAA,WAAA,CAAA,IAAA,EAA2B;AACzBU,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,KAAU,CAAVA;AAEA,WAAA,GAAA;AACD;;AAED,WAAA,aAAA,CAAA,IAAA,EAA6B;AAC3BA,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,OAAU,CAAVA;AAEA,QAAIV,MAAM,GAAV,GAAA;;AAEA,YAAQY,IAAI,CAAZ,QAAA;AACE,WAAA,QAAA;AACE;;AACF,WAAA,QAAA;AACEZ,QAAAA,MAAM,IAANA,IAAAA;AACA;;AACF,WAAA,WAAA;AACEA,QAAAA,MAAM,IAANA,IAAAA;AACA;;AACF,WAAA,mBAAA;AACEA,QAAAA,MAAM,IAANA,IAAAA;AACA;;AACF;AACE,cAAMS,KAAK,CAAC,wBAAwBG,IAAI,CAAxC,SAAW,CAAX;AAbJ;;AAgBA,QAAIS,IAAI,GAAGT,IAAI,CAAf,IAAA;AAAA,QACId,MAAM,GAAGuB,IAAI,GAAGA,IAAI,CAAP,MAAA,GADjB,CAAA;;AAGA,QAAIvB,MAAM,IAAV,CAAA,EAAiB;AACfE,MAAAA,MAAM,IAAIa,QAAQ,CAACQ,IAAI,CAAvBrB,CAAuB,CAAL,CAAlBA;AADF,KAAA,MAEO;AACL,UAAIgB,CAAC,GAAG,CAAR,CAAA;;AAEA,aAAO,EAAA,CAAA,GAAP,MAAA,EAAqB;AACnBhB,QAAAA,MAAM,IAAIa,QAAQ,CAACQ,IAAI,CAAvBrB,CAAuB,CAAL,CAAlBA;AACD;AACF;;AAEDA,IAAAA,MAAM,IAANA,GAAAA;AAEA,WAAA,MAAA;AACD;;AAED,WAAA,kBAAA,CAAA,IAAA,EAAkC;AAChCU,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,YAAU,CAAVA;AAEA,QAAIY,UAAU,GAAd,EAAA;AAAA,QACIH,GAAG,GAAGP,IAAI,CADd,GAAA;AAAA,QAEIQ,GAAG,GAAGR,IAAI,CAFd,GAAA;;AAIA,YAAA,GAAA;AACE,WAAA,SAAA;AACA,WAAA,IAAA;AACE,gBAAA,GAAA;AACE,eAAA,CAAA;AACEU,YAAAA,UAAU,GAAVA,GAAAA;AACA;;AACF,eAAA,CAAA;AACEA,YAAAA,UAAU,GAAVA,GAAAA;AACA;;AACF;AACEA,YAAAA,UAAU,GAAG,MAAA,GAAA,GAAbA,IAAAA;AACA;AATJ;;AAWA;;AACF;AACE,YAAIH,GAAG,IAAP,GAAA,EAAgB;AACdG,UAAAA,UAAU,GAAG,MAAA,GAAA,GAAbA,GAAAA;AADF,SAAA,MAGK,IAAIH,GAAG,IAAHA,CAAAA,IAAYC,GAAG,IAAnB,CAAA,EAA0B;AAC7BE,UAAAA,UAAU,GAAVA,GAAAA;AADG,SAAA,MAEE;AACLA,UAAAA,UAAU,GAAG,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAbA,GAAAA;AACD;;AACD;AAxBJ;;AA2BA,QAAI,CAACV,IAAI,CAAT,MAAA,EAAkB;AAChBU,MAAAA,UAAU,IAAVA,GAAAA;AACD;;AAED,WAAOC,YAAY,CAACX,IAAI,CAAJA,IAAAA,CAAbW,CAAaX,CAAD,CAAZW,GAAP,UAAA;AACD;;AAED,WAAA,iBAAA,CAAA,IAAA,EAAiC;AAC/Bb,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,WAAU,CAAVA;AAEA,WAAO,OAAOE,IAAI,CAAlB,UAAA;AACD;;AAED,WAAA,YAAA,CAAA,IAAA,EAA4B;AAC1BF,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,mFAAU,CAAVA;AAEA,WAAOG,QAAQ,CAAf,IAAe,CAAf;AACD;;AAED,WAAA,aAAA,CAAA,IAAA,EAA6B;AAC3BH,IAAAA,UAAU,CAACE,IAAI,CAAL,IAAA,EAAVF,OAAU,CAAVA;AAEA,QAAIc,IAAI,GAAGZ,IAAI,CAAf,IAAA;AAAA,QACIX,SAAS,GAAGW,IAAI,CADpB,SAAA;;AAGA,YAAA,IAAA;AACE,WAAA,eAAA;AACE,eAAO,QAAQa,aAAa,CAACxB,SAAS,GAAtC,EAA4B,CAA5B;;AACF,WAAA,mBAAA;AACE,eAAO,QAAQ,CAAC,OAAOA,SAAS,CAATA,QAAAA,CAAAA,EAAAA,EAAR,WAAQA,EAAR,EAAA,KAAA,CAAoD,CAAnE,CAAe,CAAf;;AACF,WAAA,YAAA;AACE,eAAO,OAAOwB,aAAa,CAA3B,SAA2B,CAA3B;;AACF,WAAA,MAAA;AACE,eAAO,OAAP,SAAA;;AACF,WAAA,OAAA;AACE,eAAO,OAAOxB,SAAS,CAATA,QAAAA,CAAd,CAAcA,CAAd;;AACF,WAAA,cAAA;AACE,gBAAA,SAAA;AACE,eAAA,MAAA;AACE,mBAAA,KAAA;;AACF,eAAA,KAAA;AACE,mBAAA,KAAA;;AACF,eAAA,KAAA;AACE,mBAAA,KAAA;;AACF,eAAA,KAAA;AACE,mBAAA,KAAA;;AACF,eAAA,KAAA;AACE,mBAAA,KAAA;;AACF,eAAA,KAAA;AACE,mBAAA,KAAA;;AACF;AACE,kBAAMQ,KAAK,CAAC,wBAAZ,SAAW,CAAX;AAdJ;;AAgBF,WAAA,QAAA;AACE,eAAOgB,aAAa,CAApB,SAAoB,CAApB;;AACF,WAAA,eAAA;AACE,eAAO,QAAQ,CAAC,SAASxB,SAAS,CAATA,QAAAA,CAAAA,EAAAA,EAAV,WAAUA,EAAV,EAAA,KAAA,CAAsD,CAArE,CAAe,CAAf;;AACF,WAAA,wBAAA;AACE,eAAO,SAASA,SAAS,CAATA,QAAAA,CAAAA,EAAAA,EAAT,WAASA,EAAT,GAAP,GAAA;;AACF;AACE,cAAMQ,KAAK,CAAC,4BAAZ,IAAW,CAAX;AAnCJ;AAqCD;AAED;;;AAEAI,EAAAA,QAAQ,CAARA,WAAAA,GAAAA,mBAAAA;AACAA,EAAAA,QAAQ,CAARA,MAAAA,GAAAA,cAAAA;AACAA,EAAAA,QAAQ,CAARA,cAAAA,GAAAA,sBAAAA;AACAA,EAAAA,QAAQ,CAARA,oBAAAA,GAAAA,4BAAAA;AACAA,EAAAA,QAAQ,CAARA,mBAAAA,GAAAA,2BAAAA;AACAA,EAAAA,QAAQ,CAARA,WAAAA,GAAAA,mBAAAA;AACAA,EAAAA,QAAQ,CAARA,GAAAA,GAAAA,WAAAA;AACAA,EAAAA,QAAQ,CAARA,KAAAA,GAAAA,aAAAA;AACAA,EAAAA,QAAQ,CAARA,UAAAA,GAAAA,kBAAAA;AACAA,EAAAA,QAAQ,CAARA,SAAAA,GAAAA,iBAAAA;AACAA,EAAAA,QAAQ,CAARA,KAAAA,GAAAA,aAAAA;AAEA;AAEA;AACA;;AACA,MAAI,OAAA,MAAA,IAAA,UAAA,IAA+B,OAAA,CAAOa,MAAM,CAAb,GAAA,CAAA,IAA/B,QAAA,IAAgEA,MAAM,CAA1E,GAAA,EAAgF;AAC9E;AACAA,IAAAA,MAAM,CAAC,YAAW;AAChB,aAAO;AACL,oBAAYb;AADP,OAAP;AADFa,KAAM,CAANA;AAFF,GAAA,CAQA;AARA,OASK,IAAIvC,WAAW,IAAf,UAAA,EAA+B;AAClC;AACAA,MAAAA,WAAW,CAAXA,QAAAA,GAAAA,QAAAA;AAFG,KAAA,CAIL;AAJK,SAKA;AACHF,QAAAA,IAAI,CAAJA,QAAAA,GAAgB;AACd,sBAAY4B;AADE,SAAhB5B;AAGD;AAjZD,CAAA,EAAA,IAAA,CAAA,KAAD,CAAC","sourcesContent":["/*!\n * RegJSGen\n * Copyright 2014 Benjamin Tan <https://d10.github.io/>\n * Available under MIT license <http://d10.mit-license.org/>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object` */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object */\n  var oldRoot = root;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */\n\n  var stringFromCharCode = String.fromCharCode;\n  var floor = Math.floor;\n  function fromCodePoint() {\n    var MAX_SIZE = 0x4000;\n    var codeUnits = [];\n    var highSurrogate;\n    var lowSurrogate;\n    var index = -1;\n    var length = arguments.length;\n    if (!length) {\n      return '';\n    }\n    var result = '';\n    while (++index < length) {\n      var codePoint = Number(arguments[index]);\n      if (\n        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n        codePoint < 0 || // not a valid Unicode code point\n        codePoint > 0x10FFFF || // not a valid Unicode code point\n        floor(codePoint) != codePoint // not an integer\n      ) {\n        throw RangeError('Invalid code point: ' + codePoint);\n      }\n      if (codePoint <= 0xFFFF) {\n        // BMP code point\n        codeUnits.push(codePoint);\n      } else {\n        // Astral code point; split in surrogate halves\n        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        codePoint -= 0x10000;\n        highSurrogate = (codePoint >> 10) + 0xD800;\n        lowSurrogate = (codePoint % 0x400) + 0xDC00;\n        codeUnits.push(highSurrogate, lowSurrogate);\n      }\n      if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n        result += stringFromCharCode.apply(null, codeUnits);\n        codeUnits.length = 0;\n      }\n    }\n    return result;\n  }\n\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type);\n    }\n\n    expected = assertType.hasOwnProperty(expected)\n      ? assertType[expected]\n      : (assertType[expected] = RegExp('^(?:' + expected + ')$'));\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generate(node) {\n    var type = node.type;\n\n    if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {\n      return generate[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n\n    var terms = node.body,\n        length = terms ? terms.length : 0;\n\n    if (length == 1) {\n      return generateTerm(terms[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        result += generateTerm(terms[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  function generateAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');\n\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n\n    var classRanges = node.body,\n        length = classRanges ? classRanges.length : 0;\n\n    var i = -1,\n        result = '[';\n\n    if (node.negative) {\n      result += '^';\n    }\n\n    while (++i < length) {\n      result += generateClassAtom(classRanges[i]);\n    }\n\n    result += ']';\n\n    return result;\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');\n\n    return generate(node);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 0) {\n      throw Error('No body');\n    } else if (length == 1) {\n      return generate(body[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        if (i != 0) {\n          result += '|';\n        }\n        result += generate(body[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n\n    var result = '(';\n\n    switch (node.behavior) {\n      case 'normal':\n        break;\n      case 'ignore':\n        result += '?:';\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 1) {\n      result += generate(body[0]);\n    } else {\n      var i = -1;\n\n      while (++i < length) {\n        result += generate(body[i]);\n      }\n    }\n\n    result += ')';\n\n    return result;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    switch (max) {\n      case undefined:\n      case null:\n        switch (min) {\n          case 0:\n            quantifier = '*'\n            break;\n          case 1:\n            quantifier = '+';\n            break;\n          default:\n            quantifier = '{' + min + ',}';\n            break;\n        }\n        break;\n      default:\n        if (min == max) {\n          quantifier = '{' + min + '}';\n        }\n        else if (min == 0 && max == 1) {\n          quantifier = '?';\n        } else {\n          quantifier = '{' + min + ',' + max + '}';\n        }\n        break;\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    return '\\\\' + node.matchIndex;\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');\n\n    return generate(node);\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + codePoint.toString(8);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x009:\n            return '\\\\t';\n          case 0x00A:\n            return '\\\\n';\n          case 0x00B:\n            return '\\\\v';\n          case 0x00C:\n            return '\\\\f';\n          case 0x00D:\n            return '\\\\r';\n          default:\n            throw Error('Invalid codepoint: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  generate.alternative = generateAlternative;\n  generate.anchor = generateAnchor;\n  generate.characterClass = generateCharacterClass;\n  generate.characterClassEscape = generateCharacterClassEscape;\n  generate.characterClassRange = generateCharacterClassRange;\n  generate.disjunction = generateDisjunction;\n  generate.dot = generateDot;\n  generate.group = generateGroup;\n  generate.quantifier = generateQuantifier;\n  generate.reference = generateReference;\n  generate.value = generateValue;\n\n  /*--------------------------------------------------------------------------*/\n\n  // export regjsgen\n  // some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // define as an anonymous module so, through path mapping, it can be aliased\n    define(function() {\n      return {\n        'generate': generate\n      };\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports && freeModule) {\n    // in Narwhal, Node.js, Rhino -require, or RingoJS\n    freeExports.generate = generate;\n  }\n  // in a browser or Rhino\n  else {\n    root.regjsgen = {\n      'generate': generate\n    };\n  }\n}.call(this));\n"],"file":"regjsgen.js"}