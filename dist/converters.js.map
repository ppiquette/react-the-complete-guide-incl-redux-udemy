{"version":3,"sources":["../node_modules/babel-types/lib/converters.js"],"names":["exports","_maxSafeInteger","require","_maxSafeInteger2","_interopRequireDefault","_stringify","_stringify2","_getIterator2","_getIterator3","_isPlainObject","_isPlainObject2","_isRegExp","_isRegExp2","_index","t","_interopRequireWildcard","obj","newObj","Object","default","key","arguments","node","exprs","ensureLastUndefined","_iterator","_isArray","Array","_i","_ref","_iterator2","_isArray2","_i2","_ref2","declar","bindings","declars","kind","id","consequent","gatherSequenceExpressions","scope","alternate","body","nodes","result","_iterator3","_isArray3","_i3","_ref3","alias","toKeyAlias","name","c","toIdentifier","mustHaveId","newType","value","pattern","flags","props","nodeKey"],"mappings":"AAAA;;AAEAA,OAAO,CAAPA,UAAAA,GAAAA,IAAAA;;AAEA,IAAIC,eAAe,GAAGC,OAAO,CAA7B,+CAA6B,CAA7B;;AAEA,IAAIC,gBAAgB,GAAGC,sBAAsB,CAA7C,eAA6C,CAA7C;;AAEA,IAAIC,UAAU,GAAGH,OAAO,CAAxB,sCAAwB,CAAxB;;AAEA,IAAII,WAAW,GAAGF,sBAAsB,CAAxC,UAAwC,CAAxC;;AAEA,IAAIG,aAAa,GAAGL,OAAO,CAA3B,oCAA2B,CAA3B;;AAEA,IAAIM,aAAa,GAAGJ,sBAAsB,CAA1C,aAA0C,CAA1C;;AAEAJ,OAAO,CAAPA,aAAAA,GAAAA,aAAAA;AACAA,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;AACAA,OAAO,CAAPA,UAAAA,GAAAA,UAAAA;AACAA,OAAO,CAAPA,YAAAA,GAAAA,YAAAA;AACAA,OAAO,CAAPA,uBAAAA,GAAAA,uBAAAA;AACAA,OAAO,CAAPA,WAAAA,GAAAA,WAAAA;AACAA,OAAO,CAAPA,YAAAA,GAAAA,YAAAA;AACAA,OAAO,CAAPA,OAAAA,GAAAA,OAAAA;AACAA,OAAO,CAAPA,WAAAA,GAAAA,WAAAA;;AAEA,IAAIS,cAAc,GAAGP,OAAO,CAA5B,sBAA4B,CAA5B;;AAEA,IAAIQ,eAAe,GAAGN,sBAAsB,CAA5C,cAA4C,CAA5C;;AAEA,IAAIO,SAAS,GAAGT,OAAO,CAAvB,iBAAuB,CAAvB;;AAEA,IAAIU,UAAU,GAAGR,sBAAsB,CAAvC,SAAuC,CAAvC;;AAEA,IAAIS,MAAM,GAAGX,OAAO,CAApB,SAAoB,CAApB;;AAEA,IAAIY,CAAC,GAAGC,uBAAuB,CAA/B,MAA+B,CAA/B;;AAEA,SAAA,uBAAA,CAAA,GAAA,EAAsC;AAAE,MAAIC,GAAG,IAAIA,GAAG,CAAd,UAAA,EAA2B;AAAE,WAAA,GAAA;AAA7B,GAAA,MAAgD;AAAE,QAAIC,MAAM,GAAV,EAAA;;AAAiB,QAAID,GAAG,IAAP,IAAA,EAAiB;AAAE,WAAK,IAAL,GAAA,IAAA,GAAA,EAAqB;AAAE,YAAIE,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAJ,GAAIA,CAAJ,EAAoDD,MAAM,CAANA,GAAM,CAANA,GAAcD,GAAG,CAAjBC,GAAiB,CAAjBA;AAAyB;AAAE;;AAACA,IAAAA,MAAM,CAANA,OAAAA,GAAAA,GAAAA;AAAsB,WAAA,MAAA;AAAgB;AAAE;;AAE7Q,SAAA,sBAAA,CAAA,GAAA,EAAqC;AAAE,SAAOD,GAAG,IAAIA,GAAG,CAAVA,UAAAA,GAAAA,GAAAA,GAA8B;AAAEG,IAAAA,OAAO,EAAEH;AAAX,GAArC;AAAwD;;AAE/F,SAAA,aAAA,CAAA,IAAA,EAA6B;AAC3B,MAAII,GAAG,GAAGC,SAAS,CAATA,MAAAA,GAAAA,CAAAA,IAAwBA,SAAS,CAATA,CAAS,CAATA,KAAxBA,SAAAA,GAAqDA,SAAS,CAA9DA,CAA8D,CAA9DA,GAAoEC,IAAI,CAAJA,GAAAA,IAAYA,IAAI,CAA9F,QAAA;;AAEA,MAAI,CAACA,IAAI,CAAT,QAAA,EAAoB;AAClB,QAAIR,CAAC,CAADA,YAAAA,CAAJ,GAAIA,CAAJ,EAAyBM,GAAG,GAAGN,CAAC,CAADA,aAAAA,CAAgBM,GAAG,CAAzBA,IAAMN,CAANM;AAC1B;;AACD,SAAA,GAAA;AACD;;AAED,SAAA,yBAAA,CAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAA0D;AACxD,MAAIG,KAAK,GAAT,EAAA;AACA,MAAIC,mBAAmB,GAAvB,IAAA;;AAEA,OAAK,IAAIC,SAAS,GAAb,KAAA,EAAuBC,QAAQ,GAAGC,KAAK,CAALA,OAAAA,CAAlC,SAAkCA,CAAlC,EAA4DC,EAAE,GAA9D,CAAA,EAAoEH,SAAS,GAAGC,QAAQ,GAAA,SAAA,GAAe,CAAC,GAAGlB,aAAa,CAAjB,OAAA,EAA5G,SAA4G,CAA5G,IAAqJ;AACnJ,QAAA,IAAA;;AAEA,QAAA,QAAA,EAAc;AACZ,UAAIoB,EAAE,IAAIH,SAAS,CAAnB,MAAA,EAA4B;AAC5BI,MAAAA,IAAI,GAAGJ,SAAS,CAACG,EAAjBC,EAAgB,CAAhBA;AAFF,KAAA,MAGO;AACLD,MAAAA,EAAE,GAAGH,SAAS,CAAdG,IAAKH,EAALG;AACA,UAAIA,EAAE,CAAN,IAAA,EAAa;AACbC,MAAAA,IAAI,GAAGD,EAAE,CAATC,KAAAA;AACD;;AAED,QAAIP,IAAI,GAAR,IAAA;AAEAE,IAAAA,mBAAmB,GAAnBA,KAAAA;;AAEA,QAAIV,CAAC,CAADA,YAAAA,CAAJ,IAAIA,CAAJ,EAA0B;AACxBS,MAAAA,KAAK,CAALA,IAAAA,CAAAA,IAAAA;AADF,KAAA,MAEO,IAAIT,CAAC,CAADA,qBAAAA,CAAJ,IAAIA,CAAJ,EAAmC;AACxCS,MAAAA,KAAK,CAALA,IAAAA,CAAWD,IAAI,CAAfC,UAAAA;AADK,KAAA,MAEA,IAAIT,CAAC,CAADA,qBAAAA,CAAJ,IAAIA,CAAJ,EAAmC;AACxC,UAAIQ,IAAI,CAAJA,IAAAA,KAAJ,KAAA,EAAyB;;AAEzB,WAAK,IAAIQ,UAAU,GAAGR,IAAI,CAArB,YAAA,EAAoCS,SAAS,GAAGJ,KAAK,CAALA,OAAAA,CAAhD,UAAgDA,CAAhD,EAA2EK,GAAG,GAA9E,CAAA,EAAoFF,UAAU,GAAGC,SAAS,GAAA,UAAA,GAAgB,CAAC,GAAGvB,aAAa,CAAjB,OAAA,EAA/H,UAA+H,CAA/H,IAAyK;AACvK,YAAA,KAAA;;AAEA,YAAA,SAAA,EAAe;AACb,cAAIwB,GAAG,IAAIF,UAAU,CAArB,MAAA,EAA8B;AAC9BG,UAAAA,KAAK,GAAGH,UAAU,CAACE,GAAnBC,EAAkB,CAAlBA;AAFF,SAAA,MAGO;AACLD,UAAAA,GAAG,GAAGF,UAAU,CAAhBE,IAAMF,EAANE;AACA,cAAIA,GAAG,CAAP,IAAA,EAAc;AACdC,UAAAA,KAAK,GAAGD,GAAG,CAAXC,KAAAA;AACD;;AAED,YAAIC,MAAM,GAAV,KAAA;AAEA,YAAIC,QAAQ,GAAGrB,CAAC,CAADA,qBAAAA,CAAf,MAAeA,CAAf;;AACA,aAAK,IAAL,GAAA,IAAA,QAAA,EAA0B;AACxBsB,UAAAA,OAAO,CAAPA,IAAAA,CAAa;AACXC,YAAAA,IAAI,EAAEf,IAAI,CADC,IAAA;AAEXgB,YAAAA,EAAE,EAAEH,QAAQ,CAAA,GAAA;AAFD,WAAbC;AAID;;AAED,YAAIF,MAAM,CAAV,IAAA,EAAiB;AACfX,UAAAA,KAAK,CAALA,IAAAA,CAAWT,CAAC,CAADA,oBAAAA,CAAAA,GAAAA,EAA4BoB,MAAM,CAAlCpB,EAAAA,EAAuCoB,MAAM,CAAxDX,IAAWT,CAAXS;AACD;AACF;;AAEDC,MAAAA,mBAAmB,GAAnBA,IAAAA;AA9BK,KAAA,MA+BA,IAAIV,CAAC,CAADA,aAAAA,CAAJ,IAAIA,CAAJ,EAA2B;AAChC,UAAIyB,UAAU,GAAGjB,IAAI,CAAJA,UAAAA,GAAkBkB,yBAAyB,CAAC,CAAClB,IAAI,CAAN,UAAC,CAAD,EAAA,KAAA,EAA3CA,OAA2C,CAA3CA,GAAiFmB,KAAK,CAAvG,kBAAkGA,EAAlG;AACA,UAAIC,SAAS,GAAGpB,IAAI,CAAJA,SAAAA,GAAiBkB,yBAAyB,CAAC,CAAClB,IAAI,CAAN,SAAC,CAAD,EAAA,KAAA,EAA1CA,OAA0C,CAA1CA,GAA+EmB,KAAK,CAApG,kBAA+FA,EAA/F;AACA,UAAI,CAAA,UAAA,IAAe,CAAnB,SAAA,EAA+B;AAE/BlB,MAAAA,KAAK,CAALA,IAAAA,CAAWT,CAAC,CAADA,qBAAAA,CAAwBQ,IAAI,CAA5BR,IAAAA,EAAAA,UAAAA,EAAXS,SAAWT,CAAXS;AALK,KAAA,MAMA,IAAIT,CAAC,CAADA,gBAAAA,CAAJ,IAAIA,CAAJ,EAA8B;AACnC,UAAI6B,IAAI,GAAGH,yBAAyB,CAAClB,IAAI,CAAL,IAAA,EAAA,KAAA,EAApC,OAAoC,CAApC;AACA,UAAI,CAAJ,IAAA,EAAW;AAEXC,MAAAA,KAAK,CAALA,IAAAA,CAAAA,IAAAA;AAJK,KAAA,MAKA,IAAIT,CAAC,CAADA,gBAAAA,CAAJ,IAAIA,CAAJ,EAA8B;AACnCU,MAAAA,mBAAmB,GAAnBA,IAAAA;AADK,KAAA,MAEA;AACL;AACD;AACF;;AAED,MAAA,mBAAA,EAAyB;AACvBD,IAAAA,KAAK,CAALA,IAAAA,CAAWkB,KAAK,CAAhBlB,kBAAWkB,EAAXlB;AACD;;AAED,MAAIA,KAAK,CAALA,MAAAA,KAAJ,CAAA,EAAwB;AACtB,WAAOA,KAAK,CAAZ,CAAY,CAAZ;AADF,GAAA,MAEO;AACL,WAAOT,CAAC,CAADA,kBAAAA,CAAP,KAAOA,CAAP;AACD;AACF;;AAED,SAAA,oBAAA,CAAA,KAAA,EAAA,KAAA,EAA4C;AAC1C,MAAI,CAAA,KAAA,IAAU,CAAC8B,KAAK,CAApB,MAAA,EAA6B;AAE7B,MAAIR,OAAO,GAAX,EAAA;AACA,MAAIS,MAAM,GAAGL,yBAAyB,CAAA,KAAA,EAAA,KAAA,EAAtC,OAAsC,CAAtC;AACA,MAAI,CAAJ,MAAA,EAAa;;AAEb,OAAK,IAAIM,UAAU,GAAd,OAAA,EAA0BC,SAAS,GAAGpB,KAAK,CAALA,OAAAA,CAAtC,UAAsCA,CAAtC,EAAiEqB,GAAG,GAApE,CAAA,EAA0EF,UAAU,GAAGC,SAAS,GAAA,UAAA,GAAgB,CAAC,GAAGvC,aAAa,CAAjB,OAAA,EAArH,UAAqH,CAArH,IAA+J;AAC7J,QAAA,KAAA;;AAEA,QAAA,SAAA,EAAe;AACb,UAAIwC,GAAG,IAAIF,UAAU,CAArB,MAAA,EAA8B;AAC9BG,MAAAA,KAAK,GAAGH,UAAU,CAACE,GAAnBC,EAAkB,CAAlBA;AAFF,KAAA,MAGO;AACLD,MAAAA,GAAG,GAAGF,UAAU,CAAhBE,IAAMF,EAANE;AACA,UAAIA,GAAG,CAAP,IAAA,EAAc;AACdC,MAAAA,KAAK,GAAGD,GAAG,CAAXC,KAAAA;AACD;;AAED,QAAIf,MAAM,GAAV,KAAA;AAEAO,IAAAA,KAAK,CAALA,IAAAA,CAAAA,MAAAA;AACD;;AAED,SAAA,MAAA;AACD;;AAED,SAAA,UAAA,CAAA,IAAA,EAA0B;AACxB,MAAIrB,GAAG,GAAGC,SAAS,CAATA,MAAAA,GAAAA,CAAAA,IAAwBA,SAAS,CAATA,CAAS,CAATA,KAAxBA,SAAAA,GAAqDA,SAAS,CAA9DA,CAA8D,CAA9DA,GAAoEC,IAAI,CAAlF,GAAA;AAEA,MAAI4B,KAAK,GAAG,KAAZ,CAAA;;AAEA,MAAI5B,IAAI,CAAJA,IAAAA,KAAJ,QAAA,EAA4B;AAC1B,WAAO6B,UAAU,CAAVA,SAAAA,KAAP,EAAA;AADF,GAAA,MAEO,IAAIrC,CAAC,CAADA,YAAAA,CAAJ,GAAIA,CAAJ,EAAyB;AAC9BoC,IAAAA,KAAK,GAAG9B,GAAG,CAAX8B,IAAAA;AADK,GAAA,MAEA,IAAIpC,CAAC,CAADA,eAAAA,CAAJ,GAAIA,CAAJ,EAA4B;AACjCoC,IAAAA,KAAK,GAAG,CAAC,GAAG5C,WAAW,CAAf,OAAA,EAAyBc,GAAG,CAApC8B,KAAQ,CAARA;AADK,GAAA,MAEA;AACLA,IAAAA,KAAK,GAAG,CAAC,GAAG5C,WAAW,CAAf,OAAA,EAAyBQ,CAAC,CAADA,oBAAAA,CAAuBA,CAAC,CAADA,SAAAA,CAAxDoC,GAAwDpC,CAAvBA,CAAzB,CAARoC;AACD;;AAED,MAAI5B,IAAI,CAAR,QAAA,EAAmB;AACjB4B,IAAAA,KAAK,GAAG,MAAA,KAAA,GAARA,GAAAA;AACD;;AAED,MAAI5B,IAAI,CAAR,MAAA,EAAiB;AACf4B,IAAAA,KAAK,GAAG,YAARA,KAAAA;AACD;;AAED,SAAA,KAAA;AACD;;AAEDC,UAAU,CAAVA,GAAAA,GAAAA,CAAAA;;AAEAA,UAAU,CAAVA,SAAAA,GAAuB,YAAY;AACjC,MAAIA,UAAU,CAAVA,GAAAA,IAAkBhD,gBAAgB,CAAtC,OAAA,EAAgD;AAC9C,WAAOgD,UAAU,CAAVA,GAAAA,GAAP,CAAA;AADF,GAAA,MAEO;AACL,WAAOA,UAAU,CAAjB,GAAOA,EAAP;AACD;AALHA,CAAAA;;AAQA,SAAA,YAAA,CAAA,IAAA,EAA4B;AAC1BC,EAAAA,IAAI,GAAGA,IAAI,GAAXA,EAAAA;AAEAA,EAAAA,IAAI,GAAGA,IAAI,CAAJA,OAAAA,CAAAA,iBAAAA,EAAPA,GAAOA,CAAPA;AAEAA,EAAAA,IAAI,GAAGA,IAAI,CAAJA,OAAAA,CAAAA,UAAAA,EAAPA,EAAOA,CAAPA;AAEAA,EAAAA,IAAI,GAAG,IAAI,CAAJ,OAAA,CAAA,aAAA,EAA4B,UAAA,KAAA,EAAA,CAAA,EAAoB;AACrD,WAAOC,CAAC,GAAGA,CAAC,CAAJ,WAAGA,EAAH,GAAR,EAAA;AADFD,GAAO,CAAPA;;AAIA,MAAI,CAACtC,CAAC,CAADA,iBAAAA,CAAL,IAAKA,CAAL,EAAgC;AAC9BsC,IAAAA,IAAI,GAAG,MAAPA,IAAAA;AACD;;AAED,SAAOA,IAAI,IAAX,GAAA;AACD;;AAED,SAAA,uBAAA,CAAA,IAAA,EAAuC;AACrCA,EAAAA,IAAI,GAAGE,YAAY,CAAnBF,IAAmB,CAAnBA;AACA,MAAIA,IAAI,KAAJA,MAAAA,IAAmBA,IAAI,KAA3B,WAAA,EAA6CA,IAAI,GAAG,MAAPA,IAAAA;AAC7C,SAAA,IAAA;AACD;;AAED,SAAA,WAAA,CAAA,IAAA,EAAA,MAAA,EAAmC;AACjC,MAAItC,CAAC,CAADA,WAAAA,CAAJ,IAAIA,CAAJ,EAAyB;AACvB,WAAA,IAAA;AACD;;AAED,MAAIyC,UAAU,GAAd,KAAA;AACA,MAAIC,OAAO,GAAG,KAAd,CAAA;;AAEA,MAAI1C,CAAC,CAADA,OAAAA,CAAJ,IAAIA,CAAJ,EAAqB;AACnByC,IAAAA,UAAU,GAAVA,IAAAA;AACAC,IAAAA,OAAO,GAAPA,kBAAAA;AAFF,GAAA,MAGO,IAAI1C,CAAC,CAADA,UAAAA,CAAJ,IAAIA,CAAJ,EAAwB;AAC7ByC,IAAAA,UAAU,GAAVA,IAAAA;AACAC,IAAAA,OAAO,GAAPA,qBAAAA;AAFK,GAAA,MAGA,IAAI1C,CAAC,CAADA,sBAAAA,CAAJ,IAAIA,CAAJ,EAAoC;AACzC,WAAOA,CAAC,CAADA,mBAAAA,CAAP,IAAOA,CAAP;AACD;;AAED,MAAIyC,UAAU,IAAI,CAACjC,IAAI,CAAvB,EAAA,EAA4B;AAC1BkC,IAAAA,OAAO,GAAPA,KAAAA;AACD;;AAED,MAAI,CAAJ,OAAA,EAAc;AACZ,QAAA,MAAA,EAAY;AACV,aAAA,KAAA;AADF,KAAA,MAEO;AACL,YAAM,IAAA,KAAA,CAAU,iBAAiBlC,IAAI,CAArB,IAAA,GAAhB,iBAAM,CAAN;AACD;AACF;;AAEDA,EAAAA,IAAI,CAAJA,IAAAA,GAAAA,OAAAA;AAEA,SAAA,IAAA;AACD;;AAED,SAAA,YAAA,CAAA,IAAA,EAA4B;AAC1B,MAAIR,CAAC,CAADA,qBAAAA,CAAJ,IAAIA,CAAJ,EAAmC;AACjCQ,IAAAA,IAAI,GAAGA,IAAI,CAAXA,UAAAA;AACD;;AAED,MAAIR,CAAC,CAADA,YAAAA,CAAJ,IAAIA,CAAJ,EAA0B;AACxB,WAAA,IAAA;AACD;;AAED,MAAIA,CAAC,CAADA,OAAAA,CAAJ,IAAIA,CAAJ,EAAqB;AACnBQ,IAAAA,IAAI,CAAJA,IAAAA,GAAAA,iBAAAA;AADF,GAAA,MAEO,IAAIR,CAAC,CAADA,UAAAA,CAAJ,IAAIA,CAAJ,EAAwB;AAC7BQ,IAAAA,IAAI,CAAJA,IAAAA,GAAAA,oBAAAA;AACD;;AAED,MAAI,CAACR,CAAC,CAADA,YAAAA,CAAL,IAAKA,CAAL,EAA2B;AACzB,UAAM,IAAA,KAAA,CAAU,iBAAiBQ,IAAI,CAArB,IAAA,GAAhB,mBAAM,CAAN;AACD;;AAED,SAAA,IAAA;AACD;;AAED,SAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAA+B;AAC7B,MAAIR,CAAC,CAADA,gBAAAA,CAAJ,IAAIA,CAAJ,EAA8B;AAC5B,WAAA,IAAA;AACD;;AAED,MAAIA,CAAC,CAADA,gBAAAA,CAAJ,IAAIA,CAAJ,EAA8B;AAC5BQ,IAAAA,IAAI,GAAJA,EAAAA;AACD;;AAED,MAAI,CAACK,KAAK,CAALA,OAAAA,CAAL,IAAKA,CAAL,EAA0B;AACxB,QAAI,CAACb,CAAC,CAADA,WAAAA,CAAL,IAAKA,CAAL,EAA0B;AACxB,UAAIA,CAAC,CAADA,UAAAA,CAAJ,MAAIA,CAAJ,EAA0B;AACxBQ,QAAAA,IAAI,GAAGR,CAAC,CAADA,eAAAA,CAAPQ,IAAOR,CAAPQ;AADF,OAAA,MAEO;AACLA,QAAAA,IAAI,GAAGR,CAAC,CAADA,mBAAAA,CAAPQ,IAAOR,CAAPQ;AACD;AACF;;AAEDA,IAAAA,IAAI,GAAG,CAAPA,IAAO,CAAPA;AACD;;AAED,SAAOR,CAAC,CAADA,cAAAA,CAAP,IAAOA,CAAP;AACD;;AAED,SAAA,WAAA,CAAA,KAAA,EAA4B;AAC1B,MAAI2C,KAAK,KAAT,SAAA,EAAyB;AACvB,WAAO3C,CAAC,CAADA,UAAAA,CAAP,WAAOA,CAAP;AACD;;AAED,MAAI2C,KAAK,KAALA,IAAAA,IAAkBA,KAAK,KAA3B,KAAA,EAAuC;AACrC,WAAO3C,CAAC,CAADA,cAAAA,CAAP,KAAOA,CAAP;AACD;;AAED,MAAI2C,KAAK,KAAT,IAAA,EAAoB;AAClB,WAAO3C,CAAC,CAAR,WAAOA,EAAP;AACD;;AAED,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,WAAOA,CAAC,CAADA,aAAAA,CAAP,KAAOA,CAAP;AACD;;AAED,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,WAAOA,CAAC,CAADA,cAAAA,CAAP,KAAOA,CAAP;AACD;;AAED,MAAI,CAAC,GAAGF,UAAU,CAAd,OAAA,EAAJ,KAAI,CAAJ,EAAoC;AAClC,QAAI8C,OAAO,GAAGD,KAAK,CAAnB,MAAA;AACA,QAAIE,KAAK,GAAGF,KAAK,CAALA,QAAAA,GAAAA,KAAAA,CAAAA,cAAAA,EAAZ,CAAYA,CAAZ;AACA,WAAO3C,CAAC,CAADA,aAAAA,CAAAA,OAAAA,EAAP,KAAOA,CAAP;AACD;;AAED,MAAIa,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;AACxB,WAAOb,CAAC,CAADA,eAAAA,CAAkB2C,KAAK,CAALA,GAAAA,CAAU3C,CAAC,CAApC,WAAyB2C,CAAlB3C,CAAP;AACD;;AAED,MAAI,CAAC,GAAGJ,eAAe,CAAnB,OAAA,EAAJ,KAAI,CAAJ,EAAyC;AACvC,QAAIkD,KAAK,GAAT,EAAA;;AACA,SAAK,IAAL,GAAA,IAAA,KAAA,EAAuB;AACrB,UAAIC,OAAO,GAAG,KAAd,CAAA;;AACA,UAAI/C,CAAC,CAADA,iBAAAA,CAAJ,GAAIA,CAAJ,EAA8B;AAC5B+C,QAAAA,OAAO,GAAG/C,CAAC,CAADA,UAAAA,CAAV+C,GAAU/C,CAAV+C;AADF,OAAA,MAEO;AACLA,QAAAA,OAAO,GAAG/C,CAAC,CAADA,aAAAA,CAAV+C,GAAU/C,CAAV+C;AACD;;AACDD,MAAAA,KAAK,CAALA,IAAAA,CAAW9C,CAAC,CAADA,cAAAA,CAAAA,OAAAA,EAA0BA,CAAC,CAADA,WAAAA,CAAc2C,KAAK,CAAxDG,GAAwD,CAAnB9C,CAA1BA,CAAX8C;AACD;;AACD,WAAO9C,CAAC,CAADA,gBAAAA,CAAP,KAAOA,CAAP;AACD;;AAED,QAAM,IAAA,KAAA,CAAN,+CAAM,CAAN;AACD","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nvar _maxSafeInteger = require(\"babel-runtime/core-js/number/max-safe-integer\");\n\nvar _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.toComputedKey = toComputedKey;\nexports.toSequenceExpression = toSequenceExpression;\nexports.toKeyAlias = toKeyAlias;\nexports.toIdentifier = toIdentifier;\nexports.toBindingIdentifierName = toBindingIdentifierName;\nexports.toStatement = toStatement;\nexports.toExpression = toExpression;\nexports.toBlock = toBlock;\nexports.valueToNode = valueToNode;\n\nvar _isPlainObject = require(\"lodash/isPlainObject\");\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _isRegExp = require(\"lodash/isRegExp\");\n\nvar _isRegExp2 = _interopRequireDefault(_isRegExp);\n\nvar _index = require(\"./index\");\n\nvar t = _interopRequireWildcard(_index);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toComputedKey(node) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : node.key || node.property;\n\n  if (!node.computed) {\n    if (t.isIdentifier(key)) key = t.stringLiteral(key.name);\n  }\n  return key;\n}\n\nfunction gatherSequenceExpressions(nodes, scope, declars) {\n  var exprs = [];\n  var ensureLastUndefined = true;\n\n  for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var node = _ref;\n\n    ensureLastUndefined = false;\n\n    if (t.isExpression(node)) {\n      exprs.push(node);\n    } else if (t.isExpressionStatement(node)) {\n      exprs.push(node.expression);\n    } else if (t.isVariableDeclaration(node)) {\n      if (node.kind !== \"var\") return;\n\n      for (var _iterator2 = node.declarations, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var declar = _ref2;\n\n        var bindings = t.getBindingIdentifiers(declar);\n        for (var key in bindings) {\n          declars.push({\n            kind: node.kind,\n            id: bindings[key]\n          });\n        }\n\n        if (declar.init) {\n          exprs.push(t.assignmentExpression(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if (t.isIfStatement(node)) {\n      var consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();\n      var alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();\n      if (!consequent || !alternate) return;\n\n      exprs.push(t.conditionalExpression(node.test, consequent, alternate));\n    } else if (t.isBlockStatement(node)) {\n      var body = gatherSequenceExpressions(node.body, scope, declars);\n      if (!body) return;\n\n      exprs.push(body);\n    } else if (t.isEmptyStatement(node)) {\n      ensureLastUndefined = true;\n    } else {\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(scope.buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return t.sequenceExpression(exprs);\n  }\n}\n\nfunction toSequenceExpression(nodes, scope) {\n  if (!nodes || !nodes.length) return;\n\n  var declars = [];\n  var result = gatherSequenceExpressions(nodes, scope, declars);\n  if (!result) return;\n\n  for (var _iterator3 = declars, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {\n    var _ref3;\n\n    if (_isArray3) {\n      if (_i3 >= _iterator3.length) break;\n      _ref3 = _iterator3[_i3++];\n    } else {\n      _i3 = _iterator3.next();\n      if (_i3.done) break;\n      _ref3 = _i3.value;\n    }\n\n    var declar = _ref3;\n\n    scope.push(declar);\n  }\n\n  return result;\n}\n\nfunction toKeyAlias(node) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : node.key;\n\n  var alias = void 0;\n\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (t.isIdentifier(key)) {\n    alias = key.name;\n  } else if (t.isStringLiteral(key)) {\n    alias = (0, _stringify2.default)(key.value);\n  } else {\n    alias = (0, _stringify2.default)(t.removePropertiesDeep(t.cloneDeep(key)));\n  }\n\n  if (node.computed) {\n    alias = \"[\" + alias + \"]\";\n  }\n\n  if (node.static) {\n    alias = \"static:\" + alias;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= _maxSafeInteger2.default) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n\nfunction toIdentifier(name) {\n  name = name + \"\";\n\n  name = name.replace(/[^a-zA-Z0-9$_]/g, \"-\");\n\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!t.isValidIdentifier(name)) {\n    name = \"_\" + name;\n  }\n\n  return name || \"_\";\n}\n\nfunction toBindingIdentifierName(name) {\n  name = toIdentifier(name);\n  if (name === \"eval\" || name === \"arguments\") name = \"_\" + name;\n  return name;\n}\n\nfunction toStatement(node, ignore) {\n  if (t.isStatement(node)) {\n    return node;\n  }\n\n  var mustHaveId = false;\n  var newType = void 0;\n\n  if (t.isClass(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\";\n  } else if (t.isFunction(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\";\n  } else if (t.isAssignmentExpression(node)) {\n    return t.expressionStatement(node);\n  }\n\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(\"cannot turn \" + node.type + \" to a statement\");\n    }\n  }\n\n  node.type = newType;\n\n  return node;\n}\n\nfunction toExpression(node) {\n  if (t.isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  if (t.isExpression(node)) {\n    return node;\n  }\n\n  if (t.isClass(node)) {\n    node.type = \"ClassExpression\";\n  } else if (t.isFunction(node)) {\n    node.type = \"FunctionExpression\";\n  }\n\n  if (!t.isExpression(node)) {\n    throw new Error(\"cannot turn \" + node.type + \" to an expression\");\n  }\n\n  return node;\n}\n\nfunction toBlock(node, parent) {\n  if (t.isBlockStatement(node)) {\n    return node;\n  }\n\n  if (t.isEmptyStatement(node)) {\n    node = [];\n  }\n\n  if (!Array.isArray(node)) {\n    if (!t.isStatement(node)) {\n      if (t.isFunction(parent)) {\n        node = t.returnStatement(node);\n      } else {\n        node = t.expressionStatement(node);\n      }\n    }\n\n    node = [node];\n  }\n\n  return t.blockStatement(node);\n}\n\nfunction valueToNode(value) {\n  if (value === undefined) {\n    return t.identifier(\"undefined\");\n  }\n\n  if (value === true || value === false) {\n    return t.booleanLiteral(value);\n  }\n\n  if (value === null) {\n    return t.nullLiteral();\n  }\n\n  if (typeof value === \"string\") {\n    return t.stringLiteral(value);\n  }\n\n  if (typeof value === \"number\") {\n    return t.numericLiteral(value);\n  }\n\n  if ((0, _isRegExp2.default)(value)) {\n    var pattern = value.source;\n    var flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return t.regExpLiteral(pattern, flags);\n  }\n\n  if (Array.isArray(value)) {\n    return t.arrayExpression(value.map(t.valueToNode));\n  }\n\n  if ((0, _isPlainObject2.default)(value)) {\n    var props = [];\n    for (var key in value) {\n      var nodeKey = void 0;\n      if (t.isValidIdentifier(key)) {\n        nodeKey = t.identifier(key);\n      } else {\n        nodeKey = t.stringLiteral(key);\n      }\n      props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));\n    }\n    return t.objectExpression(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}"],"file":"converters.js"}