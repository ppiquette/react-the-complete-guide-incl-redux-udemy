{"version":3,"sources":["../node_modules/babel-cli/node_modules/micromatch/lib/expand.js"],"names":["utils","require","Glob","module","glob","options","opts","pattern","tokens","oneStar","tok","negateSlash","globstar","balance","collapse","len","match","qmark","res","str","isFirst","isLast","inner","aarr","alen","blen","star","nodot","dotfileGlob","dotfiles","twoStarDot","dotfile"],"mappings":"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","sourcesContent":["/*!\n * micromatch <https://github.com/jonschlinkert/micromatch>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar utils = require('./utils');\nvar Glob = require('./glob');\n\n/**\n * Expose `expand`\n */\n\nmodule.exports = expand;\n\n/**\n * Expand a glob pattern to resolve braces and\n * similar patterns before converting to regex.\n *\n * @param  {String|Array} `pattern`\n * @param  {Array} `files`\n * @param  {Options} `opts`\n * @return {Array}\n */\n\nfunction expand(pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('micromatch.expand(): argument should be a string.');\n  }\n\n  var glob = new Glob(pattern, options || {});\n  var opts = glob.options;\n\n  if (!utils.isGlob(pattern)) {\n    glob.pattern = glob.pattern.replace(/([\\/.])/g, '\\\\$1');\n    return glob;\n  }\n\n  glob.pattern = glob.pattern.replace(/(\\+)(?!\\()/g, '\\\\$1');\n  glob.pattern = glob.pattern.split('$').join('\\\\$');\n\n  if (typeof opts.braces !== 'boolean' && typeof opts.nobraces !== 'boolean') {\n    opts.braces = true;\n  }\n\n  if (glob.pattern === '.*') {\n    return {\n      pattern: '\\\\.' + star,\n      tokens: tok,\n      options: opts\n    };\n  }\n\n  if (glob.pattern === '*') {\n    return {\n      pattern: oneStar(opts.dot),\n      tokens: tok,\n      options: opts\n    };\n  }\n\n  // parse the glob pattern into tokens\n  glob.parse();\n  var tok = glob.tokens;\n  tok.is.negated = opts.negated;\n\n  // dotfile handling\n  if ((opts.dotfiles === true || tok.is.dotfile) && opts.dot !== false) {\n    opts.dotfiles = true;\n    opts.dot = true;\n  }\n\n  if ((opts.dotdirs === true || tok.is.dotdir) && opts.dot !== false) {\n    opts.dotdirs = true;\n    opts.dot = true;\n  }\n\n  // check for braces with a dotfile pattern\n  if (/[{,]\\./.test(glob.pattern)) {\n    opts.makeRe = false;\n    opts.dot = true;\n  }\n\n  if (opts.nonegate !== true) {\n    opts.negated = glob.negated;\n  }\n\n  // if the leading character is a dot or a slash, escape it\n  if (glob.pattern.charAt(0) === '.' && glob.pattern.charAt(1) !== '/') {\n    glob.pattern = '\\\\' + glob.pattern;\n  }\n\n  /**\n   * Extended globs\n   */\n\n  // expand braces, e.g `{1..5}`\n  glob.track('before braces');\n  if (tok.is.braces) {\n    glob.braces();\n  }\n  glob.track('after braces');\n\n  // expand extglobs, e.g `foo/!(a|b)`\n  glob.track('before extglob');\n  if (tok.is.extglob) {\n    glob.extglob();\n  }\n  glob.track('after extglob');\n\n  // expand brackets, e.g `[[:alpha:]]`\n  glob.track('before brackets');\n  if (tok.is.brackets) {\n    glob.brackets();\n  }\n  glob.track('after brackets');\n\n  // special patterns\n  glob._replace('[!', '[^');\n  glob._replace('(?', '(%~');\n  glob._replace(/\\[\\]/, '\\\\[\\\\]');\n  glob._replace('/[', '/' + (opts.dot ? dotfiles : nodot) + '[', true);\n  glob._replace('/?', '/' + (opts.dot ? dotfiles : nodot) + '[^/]', true);\n  glob._replace('/.', '/(?=.)\\\\.', true);\n\n  // windows drives\n  glob._replace(/^(\\w):([\\\\\\/]+?)/gi, '(?=.)$1:$2', true);\n\n  // negate slashes in exclusion ranges\n  if (glob.pattern.indexOf('[^') !== -1) {\n    glob.pattern = negateSlash(glob.pattern);\n  }\n\n  if (opts.globstar !== false && glob.pattern === '**') {\n    glob.pattern = globstar(opts.dot);\n\n  } else {\n    glob.pattern = balance(glob.pattern, '[', ']');\n    glob.escape(glob.pattern);\n\n    // if the pattern has `**`\n    if (tok.is.globstar) {\n      glob.pattern = collapse(glob.pattern, '/**');\n      glob.pattern = collapse(glob.pattern, '**/');\n      glob._replace('/**/', '(?:/' + globstar(opts.dot) + '/|/)', true);\n      glob._replace(/\\*{2,}/g, '**');\n\n      // 'foo/*'\n      glob._replace(/(\\w+)\\*(?!\\/)/g, '$1[^/]*?', true);\n      glob._replace(/\\*\\*\\/\\*(\\w)/g, globstar(opts.dot) + '\\\\/' + (opts.dot ? dotfiles : nodot) + '[^/]*?$1', true);\n\n      if (opts.dot !== true) {\n        glob._replace(/\\*\\*\\/(.)/g, '(?:**\\\\/|)$1');\n      }\n\n      // 'foo/**' or '{**,*}', but not 'foo**'\n      if (tok.path.dirname !== '' || /,\\*\\*|\\*\\*,/.test(glob.orig)) {\n        glob._replace('**', globstar(opts.dot), true);\n      }\n    }\n\n    // ends with /*\n    glob._replace(/\\/\\*$/, '\\\\/' + oneStar(opts.dot), true);\n    // ends with *, no slashes\n    glob._replace(/(?!\\/)\\*$/, star, true);\n    // has 'n*.' (partial wildcard w/ file extension)\n    glob._replace(/([^\\/]+)\\*/, '$1' + oneStar(true), true);\n    // has '*'\n    glob._replace('*', oneStar(opts.dot), true);\n    glob._replace('?.', '?\\\\.', true);\n    glob._replace('?:', '?:', true);\n\n    glob._replace(/\\?+/g, function(match) {\n      var len = match.length;\n      if (len === 1) {\n        return qmark;\n      }\n      return qmark + '{' + len + '}';\n    });\n\n    // escape '.abc' => '\\\\.abc'\n    glob._replace(/\\.([*\\w]+)/g, '\\\\.$1');\n    // fix '[^\\\\\\\\/]'\n    glob._replace(/\\[\\^[\\\\\\/]+\\]/g, qmark);\n    // '///' => '\\/'\n    glob._replace(/\\/+/g, '\\\\/');\n    // '\\\\\\\\\\\\' => '\\\\'\n    glob._replace(/\\\\{2,}/g, '\\\\');\n  }\n\n  // unescape previously escaped patterns\n  glob.unescape(glob.pattern);\n  glob._replace('__UNESC_STAR__', '*');\n\n  // escape dots that follow qmarks\n  glob._replace('?.', '?\\\\.');\n\n  // remove unnecessary slashes in character classes\n  glob._replace('[^\\\\/]', qmark);\n\n  if (glob.pattern.length > 1) {\n    if (/^[\\[?*]/.test(glob.pattern)) {\n      // only prepend the string if we don't want to match dotfiles\n      glob.pattern = (opts.dot ? dotfiles : nodot) + glob.pattern;\n    }\n  }\n\n  return glob;\n}\n\n/**\n * Collapse repeated character sequences.\n *\n * ```js\n * collapse('a/../../../b', '../');\n * //=> 'a/../b'\n * ```\n *\n * @param  {String} `str`\n * @param  {String} `ch` Character sequence to collapse\n * @return {String}\n */\n\nfunction collapse(str, ch) {\n  var res = str.split(ch);\n  var isFirst = res[0] === '';\n  var isLast = res[res.length - 1] === '';\n  res = res.filter(Boolean);\n  if (isFirst) res.unshift('');\n  if (isLast) res.push('');\n  return res.join(ch);\n}\n\n/**\n * Negate slashes in exclusion ranges, per glob spec:\n *\n * ```js\n * negateSlash('[^foo]');\n * //=> '[^\\\\/foo]'\n * ```\n *\n * @param  {String} `str` glob pattern\n * @return {String}\n */\n\nfunction negateSlash(str) {\n  return str.replace(/\\[\\^([^\\]]*?)\\]/g, function(match, inner) {\n    if (inner.indexOf('/') === -1) {\n      inner = '\\\\/' + inner;\n    }\n    return '[^' + inner + ']';\n  });\n}\n\n/**\n * Escape imbalanced braces/bracket. This is a very\n * basic, naive implementation that only does enough\n * to serve the purpose.\n */\n\nfunction balance(str, a, b) {\n  var aarr = str.split(a);\n  var alen = aarr.join('').length;\n  var blen = str.split(b).join('').length;\n\n  if (alen !== blen) {\n    str = aarr.join('\\\\' + a);\n    return str.split(b).join('\\\\' + b);\n  }\n  return str;\n}\n\n/**\n * Special patterns to be converted to regex.\n * Heuristics are used to simplify patterns\n * and speed up processing.\n */\n\n/* eslint no-multi-spaces: 0 */\nvar qmark       = '[^/]';\nvar star        = qmark + '*?';\nvar nodot       = '(?!\\\\.)(?=.)';\nvar dotfileGlob = '(?:\\\\/|^)\\\\.{1,2}($|\\\\/)';\nvar dotfiles    = '(?!' + dotfileGlob + ')(?=.)';\nvar twoStarDot  = '(?:(?!' + dotfileGlob + ').)*?';\n\n/**\n * Create a regex for `*`.\n *\n * If `dot` is true, or the pattern does not begin with\n * a leading star, then return the simpler regex.\n */\n\nfunction oneStar(dotfile) {\n  return dotfile ? '(?!' + dotfileGlob + ')(?=.)' + star : (nodot + star);\n}\n\nfunction globstar(dotfile) {\n  if (dotfile) { return twoStarDot; }\n  return '(?:(?!(?:\\\\/|^)\\\\.).)*?';\n}\n"],"file":"expand.js"}