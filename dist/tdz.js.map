{"version":3,"sources":["../node_modules/babel-plugin-transform-es2015-block-scoping/lib/tdz.js"],"names":["exports","_babelTypes","require","t","_interopRequireWildcard","obj","newObj","Object","executionStatus","bindingPath","file","node","declared","state","scope","visitor","ReferencedIdentifier","path","parent","left","isReference","status","getTDZStatus","assert","buildTDZAssert","AssignmentExpression","exit","nodes","ids","id"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.visitor = undefined;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction getTDZStatus(refPath, bindingPath) {\n  var executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);\n\n  if (executionStatus === \"before\") {\n    return \"inside\";\n  } else if (executionStatus === \"after\") {\n    return \"outside\";\n  } else {\n    return \"maybe\";\n  }\n}\n\nfunction buildTDZAssert(node, file) {\n  return t.callExpression(file.addHelper(\"temporalRef\"), [node, t.stringLiteral(node.name), file.addHelper(\"temporalUndefined\")]);\n}\n\nfunction isReference(node, scope, state) {\n  var declared = state.letReferences[node.name];\n  if (!declared) return false;\n\n  return scope.getBindingIdentifier(node.name) === declared;\n}\n\nvar visitor = exports.visitor = {\n  ReferencedIdentifier: function ReferencedIdentifier(path, state) {\n    if (!this.file.opts.tdz) return;\n\n    var node = path.node,\n        parent = path.parent,\n        scope = path.scope;\n\n\n    if (path.parentPath.isFor({ left: node })) return;\n    if (!isReference(node, scope, state)) return;\n\n    var bindingPath = scope.getBinding(node.name).path;\n\n    var status = getTDZStatus(path, bindingPath);\n    if (status === \"inside\") return;\n\n    if (status === \"maybe\") {\n      var assert = buildTDZAssert(node, state.file);\n\n      bindingPath.parent._tdzThis = true;\n\n      path.skip();\n\n      if (path.parentPath.isUpdateExpression()) {\n        if (parent._ignoreBlockScopingTDZ) return;\n        path.parentPath.replaceWith(t.sequenceExpression([assert, parent]));\n      } else {\n        path.replaceWith(assert);\n      }\n    } else if (status === \"outside\") {\n      path.replaceWith(t.throwStatement(t.inherits(t.newExpression(t.identifier(\"ReferenceError\"), [t.stringLiteral(node.name + \" is not defined - temporal dead zone\")]), node)));\n    }\n  },\n\n\n  AssignmentExpression: {\n    exit: function exit(path, state) {\n      if (!this.file.opts.tdz) return;\n\n      var node = path.node;\n\n      if (node._ignoreBlockScopingTDZ) return;\n\n      var nodes = [];\n      var ids = path.getBindingIdentifiers();\n\n      for (var name in ids) {\n        var id = ids[name];\n\n        if (isReference(id, path.scope, state)) {\n          nodes.push(buildTDZAssert(id, state.file));\n        }\n      }\n\n      if (nodes.length) {\n        node._ignoreBlockScopingTDZ = true;\n        nodes.push(node);\n        path.replaceWithMultiple(nodes.map(t.expressionStatement));\n      }\n    }\n  }\n};"],"file":"tdz.js"}