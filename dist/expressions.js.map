{"version":3,"sources":["../node_modules/babel-generator/lib/generators/expressions.js"],"names":["exports","_babelTypes","require","t","_interopRequireWildcard","_node","n","obj","newObj","Object","node","callee","isPrettyCall","separator","terminatorState","YieldExpression","buildYieldAwait","AwaitExpression","parens","computed"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.LogicalExpression = exports.BinaryExpression = exports.AwaitExpression = exports.YieldExpression = undefined;\nexports.UnaryExpression = UnaryExpression;\nexports.DoExpression = DoExpression;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.NewExpression = NewExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.ThisExpression = ThisExpression;\nexports.Super = Super;\nexports.Decorator = Decorator;\nexports.CallExpression = CallExpression;\nexports.Import = Import;\nexports.EmptyStatement = EmptyStatement;\nexports.ExpressionStatement = ExpressionStatement;\nexports.AssignmentPattern = AssignmentPattern;\nexports.AssignmentExpression = AssignmentExpression;\nexports.BindExpression = BindExpression;\nexports.MemberExpression = MemberExpression;\nexports.MetaProperty = MetaProperty;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nvar _node = require(\"../node\");\n\nvar n = _interopRequireWildcard(_node);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction UnaryExpression(node) {\n  if (node.operator === \"void\" || node.operator === \"delete\" || node.operator === \"typeof\") {\n    this.word(node.operator);\n    this.space();\n  } else {\n    this.token(node.operator);\n  }\n\n  this.print(node.argument, node);\n}\n\nfunction DoExpression(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction ParenthesizedExpression(node) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction UpdateExpression(node) {\n  if (node.prefix) {\n    this.token(node.operator);\n    this.print(node.argument, node);\n  } else {\n    this.print(node.argument, node);\n    this.token(node.operator);\n  }\n}\n\nfunction ConditionalExpression(node) {\n  this.print(node.test, node);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.consequent, node);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.alternate, node);\n}\n\nfunction NewExpression(node, parent) {\n  this.word(\"new\");\n  this.space();\n  this.print(node.callee, node);\n  if (node.arguments.length === 0 && this.format.minified && !t.isCallExpression(parent, { callee: node }) && !t.isMemberExpression(parent) && !t.isNewExpression(parent)) return;\n\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.token(\")\");\n}\n\nfunction SequenceExpression(node) {\n  this.printList(node.expressions, node);\n}\n\nfunction ThisExpression() {\n  this.word(\"this\");\n}\n\nfunction Super() {\n  this.word(\"super\");\n}\n\nfunction Decorator(node) {\n  this.token(\"@\");\n  this.print(node.expression, node);\n  this.newline();\n}\n\nfunction commaSeparatorNewline() {\n  this.token(\",\");\n  this.newline();\n\n  if (!this.endsWith(\"\\n\")) this.space();\n}\n\nfunction CallExpression(node) {\n  this.print(node.callee, node);\n\n  this.token(\"(\");\n\n  var isPrettyCall = node._prettyCall;\n\n  var separator = void 0;\n  if (isPrettyCall) {\n    separator = commaSeparatorNewline;\n    this.newline();\n    this.indent();\n  }\n\n  this.printList(node.arguments, node, { separator: separator });\n\n  if (isPrettyCall) {\n    this.newline();\n    this.dedent();\n  }\n\n  this.token(\")\");\n}\n\nfunction Import() {\n  this.word(\"import\");\n}\n\nfunction buildYieldAwait(keyword) {\n  return function (node) {\n    this.word(keyword);\n\n    if (node.delegate) {\n      this.token(\"*\");\n    }\n\n    if (node.argument) {\n      this.space();\n      var terminatorState = this.startTerminatorless();\n      this.print(node.argument, node);\n      this.endTerminatorless(terminatorState);\n    }\n  };\n}\n\nvar YieldExpression = exports.YieldExpression = buildYieldAwait(\"yield\");\nvar AwaitExpression = exports.AwaitExpression = buildYieldAwait(\"await\");\n\nfunction EmptyStatement() {\n  this.semicolon(true);\n}\n\nfunction ExpressionStatement(node) {\n  this.print(node.expression, node);\n  this.semicolon();\n}\n\nfunction AssignmentPattern(node) {\n  this.print(node.left, node);\n  if (node.left.optional) this.token(\"?\");\n  this.print(node.left.typeAnnotation, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n}\n\nfunction AssignmentExpression(node, parent) {\n  var parens = this.inForStatementInitCounter && node.operator === \"in\" && !n.needsParens(node, parent);\n\n  if (parens) {\n    this.token(\"(\");\n  }\n\n  this.print(node.left, node);\n\n  this.space();\n  if (node.operator === \"in\" || node.operator === \"instanceof\") {\n    this.word(node.operator);\n  } else {\n    this.token(node.operator);\n  }\n  this.space();\n\n  this.print(node.right, node);\n\n  if (parens) {\n    this.token(\")\");\n  }\n}\n\nfunction BindExpression(node) {\n  this.print(node.object, node);\n  this.token(\"::\");\n  this.print(node.callee, node);\n}\n\nexports.BinaryExpression = AssignmentExpression;\nexports.LogicalExpression = AssignmentExpression;\nfunction MemberExpression(node) {\n  this.print(node.object, node);\n\n  if (!node.computed && t.isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  var computed = node.computed;\n  if (t.isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(node.property, node);\n    this.token(\"]\");\n  } else {\n    this.token(\".\");\n    this.print(node.property, node);\n  }\n}\n\nfunction MetaProperty(node) {\n  this.print(node.meta, node);\n  this.token(\".\");\n  this.print(node.property, node);\n}"],"file":"expressions.js"}