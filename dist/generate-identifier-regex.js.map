{"version":3,"sources":["../node_modules/babylon/bin/generate-identifier-regex.js"],"names":["version","start","ch","last","cont","search","i","arr","str","hex","code","pad","astral","re","at","chars","from","to","esc","nonASCII","startData","generate","contData","console","JSON"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// Which Unicode version should be used?\nconst version = \"9.0.0\";\n\nconst start = require(\"unicode-\" + version + \"/Binary_Property/ID_Start/code-points.js\")\n    .filter(function(ch) { return ch > 0x7f; });\nlet last = -1;\nconst cont = [0x200c, 0x200d].concat(\n  require(\"unicode-\" + version + \"/Binary_Property/ID_Continue/code-points.js\")\n    .filter(function(ch) {\n      return ch > 0x7f && search(start, ch, last + 1) == -1;\n    })\n  );\n\nfunction search(arr, ch, starting) {\n  for (let i = starting; arr[i] <= ch && i < arr.length; last = i++)\n    if (arr[i] === ch)\n      return i;\n  return -1;\n}\n\nfunction pad(str, width) {\n  while (str.length < width) str = \"0\" + str;\n  return str;\n}\n\nfunction esc(code) {\n  const hex = code.toString(16);\n  if (hex.length <= 2) return \"\\\\x\" + pad(hex, 2);\n  else return \"\\\\u\" + pad(hex, 4);\n}\n\nfunction generate(chars) {\n  const astral = [];\n  let re = \"\";\n  for (let i = 0, at = 0x10000; i < chars.length; i++) {\n    const from = chars[i];\n    let to = from;\n    while (i < chars.length - 1 && chars[i + 1] == to + 1) {\n      i++;\n      to++;\n    }\n    if (to <= 0xffff) {\n      if (from == to) re += esc(from);\n      else if (from + 1 == to) re += esc(from) + esc(to);\n      else re += esc(from) + \"-\" + esc(to);\n    } else {\n      astral.push(from - at, to - from);\n      at = to;\n    }\n  }\n  return { nonASCII: re, astral: astral };\n}\n\nconst startData = generate(start);\nconst contData = generate(cont);\n\nconsole.log(\"let nonASCIIidentifierStartChars = \\\"\" + startData.nonASCII + \"\\\";\");\nconsole.log(\"let nonASCIIidentifierChars = \\\"\" + contData.nonASCII + \"\\\";\");\nconsole.log(\"const astralIdentifierStartCodes = \" + JSON.stringify(startData.astral) + \";\");\nconsole.log(\"const astralIdentifierCodes = \" + JSON.stringify(contData.astral) + \";\");\n"],"file":"generate-identifier-regex.js"}