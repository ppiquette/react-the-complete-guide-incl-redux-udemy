{"version":3,"sources":["../main_javascript.js"],"names":["regularFunction","console","log","regular_javascript_variable","same_as_var","could_not_be_changed","printMyName","name","squared","number","Math","pow","squared_short","myConstant","Human","sex","Person","somebody","printStuff","PersonNew","somebody_else","old_array","new_array","any_number_of_parameters_function","args","sort","old_obj","age","new_obj","size","a","b","num","num2","object1","object2","object3","array","t","map"],"mappings":"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","sourcesContent":["\n// Regular javascript function\nfunction regularFunction(){\n    console.log(\"regular javascript function\")\n}\nregularFunction()\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// NextGen Javascript functionality\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// let and const\n//\nconsole.log(\"*** let and const ***\")\n\n// Standard Javascript variable\nvar regular_javascript_variable = 67;\n\n// New syntax but like var\nlet same_as_var = 67;\n\n// as it names suggested, constant\nconst could_not_be_changed = 67;\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Arrow Functions\n//\nconsole.log(\"\\n*** Arrow Functions ***\")\n\nconst printMyName = (name) => {\n    console.log(name)\n};\nprintMyName('Max');\n\n// With a return value\nconst squared = (number) => {\n    return Math.pow(number, 2);\n};\nconsole.log(squared(could_not_be_changed));\n\n// concise version\n// if one parameter -> no () required\n// just return something -> no return keyword required\nconst squared_short = number => Math.pow(number, 2);\nconsole.log(squared_short(same_as_var));\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Export and Import (between files)\n//\n// Need to compile the code with Babel first. You can run the compiler in command line, or make transpiling\n// a part of your build process (using Gulp, Grunt, WebPack, etc.).\n// In WebStorm: https://blog.jetbrains.com/webstorm/2015/05/ecmascript-6-in-webstorm-transpiling/\nconsole.log(\"\\n*** Export and Import (between files) ***\")\n\nimport any_name from \"./defaultexport.js\";\nany_name();\n\nimport {myConstant} from \"./export_items_individually\";\nimport {myFunction} from \"./export_items_individually\";\nmyFunction(myConstant);\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Classes\n//\n\n// very similar to javascript function instantiation\n// (for more details https://medium.com/dailyjs/instantiation-patterns-in-javascript-8fdcf69e8f9b)\nconsole.log(\"\\n*** Classes ***\")\n\nclass Human {\n    // required\n    constructor(){\n        this.sex = \"M\";\n    }\n\n}\n\nclass Person extends Human {\n    constructor(){\n        // need to call constructor of parent like in Python\n        super();\n        this.name = \"BillyBob\";\n    }\n\n    printStuff() {\n        console.log(\"Name is\", this.name);\n        console.log(\"Sex is\", this.sex);\n    }\n}\n// Instantiation of a class\nlet somebody = new Person();\nsomebody.printStuff();\n\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Modern Syntax for Properties and Functions in Classes\n//\nconsole.log(\"\\n*** Modern Syntax for Properties and Functions in Classes ***\")\n\n// Modern syntax introduced in ES7 for defining:\n//  - variable outside of a constructor() function with no \"this\"\n//  - class functions using arrow functions\nclass PersonNew {\n    name = 'Jerry';\n\n    printStuff = () => {\n        console.log(\"Name is\", this.name);\n    }\n}\n\nlet somebody_else = new PersonNew();\nsomebody_else.printStuff();\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Spread and Rest operators\n//\nconsole.log(\"\\n*** Spread and Rest operators ***\");\n\n// spread is something like the split function in python but more general, not just for list (I think)\nconst old_array = [\"test\", \"patate\"];\nconst new_array = [...old_array, \"bleh\", \"fruits\"];\nconsole.log(\"spread and concatenate: \", new_array);\n\n// the rest variant of the same ... is really like the * operator in python functions\nconst any_number_of_parameters_function = (...args) => {\n    return args.sort()\n};\nconsole.log(\"rested: \", any_number_of_parameters_function(4, 2, 6, 7, 9));\n\n// the ... operator can also expend a Javascript \"object\". An object seems to be a simple container or properties\n// (kind of a C struct)\n\nconst old_obj = {\n    name: \"Patrick\",\n    age: 44\n};\n\nconst new_obj = {...old_obj, size: 'L'};\n\nconsole.log(\"pread and concatenate object:\", new_obj);\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Destructuring\n//\nconsole.log(\"\\n*** Destructuring ***\");\n\n// very similar to Python unpacking\n// it uses the array symbol [] but a and b are not in an array\nlet [a, b] = [\"Jesus\", \"Saint-Esprit\"];\nconsole.log(\"a: \", a, \"b: \", b);\n\n// same thing for properties in object. Here, only name is pulled.\nlet {name} = {name: \"Eric\", age:\"22\"};\nconsole.log(name);\n\n\n// it seems that the syntax for\n//   array is []\n//   objects is {}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// References and primitive type\n// (not modern javascript, just very useful)\n//\nconsole.log(\"\\n*** References and primitive type ***\");\n\n// PRIMITIVE: a primitive type is like an int, a bool\nlet num = 1;  // is a primitive type\nlet num2 = num; //creates a copy of the content of num\nnum2 = 2;\nconsole.log(num2);\n\n\n// REFERENCE: objects and array are references\nlet object1 = {\n    name: \"Pat\",\n    sex: \"M\"\n};\nlet object2 = object1;\nobject2.name = \"Sophie\";\nconsole.log(object1); // both object1 an object2 get changed because they point to the same space in memory\n\n// if we spread an object while creating another one, we are now making a copy of it\nlet object3 = {...object1};\nobject3.name = \"Albert\";\nconsole.log(object1); // it stays with the Sophie name, object3 occupies another space in memory\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Array functions\n//\nconsole.log(\"\\n*** Array functions ***\");\n\nlet array = [1,2,3];\n// array function are executed on each element or the array\n// each element is put in the \"num\" variable below and can be manipulated in the execution part of the array function\n// (between the {})\n// in that case the map return a new array (it is not a reference as above)\nlet t = array.map((num) => {\n    return num * 2;\n});\nconsole.log(t);\n\n\n\n"],"file":"main_javascript.js"}