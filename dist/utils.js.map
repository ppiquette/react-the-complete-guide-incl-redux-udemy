{"version":3,"sources":["../node_modules/babel-cli/node_modules/micromatch/lib/utils.js"],"names":["win32","process","path","require","fileRe","utils","module","seg","fp","opts","unixified","pattern","fn","name","re","Array","str"],"mappings":"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","sourcesContent":["'use strict';\n\nvar win32 = process && process.platform === 'win32';\nvar path = require('path');\nvar fileRe = require('filename-regex');\nvar utils = module.exports;\n\n/**\n * Module dependencies\n */\n\nutils.diff = require('arr-diff');\nutils.unique = require('array-unique');\nutils.braces = require('braces');\nutils.brackets = require('expand-brackets');\nutils.extglob = require('extglob');\nutils.isExtglob = require('is-extglob');\nutils.isGlob = require('is-glob');\nutils.typeOf = require('kind-of');\nutils.normalize = require('normalize-path');\nutils.omit = require('object.omit');\nutils.parseGlob = require('parse-glob');\nutils.cache = require('regex-cache');\n\n/**\n * Get the filename of a filepath\n *\n * @param {String} `string`\n * @return {String}\n */\n\nutils.filename = function filename(fp) {\n  var seg = fp.match(fileRe());\n  return seg && seg[0];\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern is the same as a given `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.isPath = function isPath(pattern, opts) {\n  opts = opts || {};\n  return function(fp) {\n    var unixified = utils.unixify(fp, opts);\n    if(opts.nocase){\n      return pattern.toLowerCase() === unixified.toLowerCase();\n    }\n    return pattern === unixified;\n  };\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.hasPath = function hasPath(pattern, opts) {\n  return function(fp) {\n    return utils.unixify(pattern, opts).indexOf(fp) !== -1;\n  };\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern matches or contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.matchPath = function matchPath(pattern, opts) {\n  var fn = (opts && opts.contains)\n    ? utils.hasPath(pattern, opts)\n    : utils.isPath(pattern, opts);\n  return fn;\n};\n\n/**\n * Returns a function that returns true if the given\n * regex matches the `filename` of a file path.\n *\n * @param {RegExp} `re`\n * @return {Boolean}\n */\n\nutils.hasFilename = function hasFilename(re) {\n  return function(fp) {\n    var name = utils.filename(fp);\n    return name && re.test(name);\n  };\n};\n\n/**\n * Coerce `val` to an array\n *\n * @param  {*} val\n * @return {Array}\n */\n\nutils.arrayify = function arrayify(val) {\n  return !Array.isArray(val)\n    ? [val]\n    : val;\n};\n\n/**\n * Normalize all slashes in a file path or glob pattern to\n * forward slashes.\n */\n\nutils.unixify = function unixify(fp, opts) {\n  if (opts && opts.unixify === false) return fp;\n  if (opts && opts.unixify === true || win32 || path.sep === '\\\\') {\n    return utils.normalize(fp, false);\n  }\n  if (opts && opts.unescape === true) {\n    return fp ? fp.toString().replace(/\\\\(\\w)/g, '$1') : '';\n  }\n  return fp;\n};\n\n/**\n * Escape/unescape utils\n */\n\nutils.escapePath = function escapePath(fp) {\n  return fp.replace(/[\\\\.]/g, '\\\\$&');\n};\n\nutils.unescapeGlob = function unescapeGlob(fp) {\n  return fp.replace(/[\\\\\"']/g, '');\n};\n\nutils.escapeRe = function escapeRe(str) {\n  return str.replace(/[-[\\\\$*+?.#^\\s{}(|)\\]]/g, '\\\\$&');\n};\n\n/**\n * Expose `utils`\n */\n\nmodule.exports = utils;\n"],"file":"utils.js"}