{"version":3,"sources":["../node_modules/babel-traverse/lib/path/replacement.js"],"names":["exports","_getIterator2","require","_getIterator3","_interopRequireDefault","_babelCodeFrame","_babelCodeFrame2","_index","_index2","_index3","_index4","_babylon","_babelTypes","t","_interopRequireWildcard","obj","newObj","Object","default","hoistVariablesVisitor","Function","path","VariableDeclaration","bindings","id","exprs","_iterator","_isArray","Array","_i","_ref","declar","nodes","replacement","loc","err","oldNode","node","toSequenceExpression","container","completionRecords","_iterator2","_isArray2","_i2","_ref2","loop","uid","callee"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports._replaceWith = _replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n\nvar _babelCodeFrame = require(\"babel-code-frame\");\n\nvar _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);\n\nvar _index = require(\"../index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require(\"./index\");\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _babylon = require(\"babylon\");\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hoistVariablesVisitor = {\n  Function: function Function(path) {\n    path.skip();\n  },\n  VariableDeclaration: function VariableDeclaration(path) {\n    if (path.node.kind !== \"var\") return;\n\n    var bindings = path.getBindingIdentifiers();\n    for (var key in bindings) {\n      path.scope.push({ id: bindings[key] });\n    }\n\n    var exprs = [];\n\n    for (var _iterator = path.node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var declar = _ref;\n\n      if (declar.init) {\n        exprs.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.id, declar.init)));\n      }\n    }\n\n    path.replaceWithMultiple(exprs);\n  }\n};\n\nfunction replaceWithMultiple(nodes) {\n  this.resync();\n\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  this.node = this.container[this.key] = null;\n  this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n}\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = \"(\" + replacement + \")\";\n    replacement = (0, _babylon.parse)(replacement);\n  } catch (err) {\n    var loc = err.loc;\n    if (loc) {\n      err.message += \" - make sure this is an expression.\";\n      err.message += \"\\n\" + (0, _babelCodeFrame2.default)(replacement, loc.line, loc.column + 1);\n    }\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n  _index2.default.removeProperties(replacement);\n  return this.replaceWith(replacement);\n}\n\nfunction replaceWith(replacement) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index4.default) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return;\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\");\n  }\n\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {\n      replacement = t.expressionStatement(replacement);\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n\n  var oldNode = this.node;\n  if (oldNode) {\n    t.inheritsComments(replacement, oldNode);\n    t.removeComments(oldNode);\n  }\n\n  this._replaceWith(replacement);\n  this.type = replacement.type;\n\n  this.setScope();\n\n  this.requeue();\n}\n\nfunction _replaceWith(node) {\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    t.validate(this.parent, this.key, [node]);\n  } else {\n    t.validate(this.parent, this.key, node);\n  }\n\n  this.debug(function () {\n    return \"Replace with \" + (node && node.type);\n  });\n\n  this.node = this.container[this.key] = node;\n}\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n\n  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (t.isSequenceExpression(toSequenceExpression)) {\n    var exprs = toSequenceExpression.expressions;\n\n    if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {\n      this._maybePopFromStatements(exprs);\n    }\n\n    if (exprs.length === 1) {\n      this.replaceWith(exprs[0]);\n    } else {\n      this.replaceWith(toSequenceExpression);\n    }\n  } else if (toSequenceExpression) {\n    this.replaceWith(toSequenceExpression);\n  } else {\n    var container = t.functionExpression(null, [], t.blockStatement(nodes));\n    container.shadow = true;\n\n    this.replaceWith(t.callExpression(container, []));\n    this.traverse(hoistVariablesVisitor);\n\n    var completionRecords = this.get(\"callee\").getCompletionRecords();\n    for (var _iterator2 = completionRecords, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var path = _ref2;\n\n      if (!path.isExpressionStatement()) continue;\n\n      var loop = path.findParent(function (path) {\n        return path.isLoop();\n      });\n      if (loop) {\n        var uid = loop.getData(\"expressionReplacementReturnUid\");\n\n        if (!uid) {\n          var callee = this.get(\"callee\");\n          uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n          callee.get(\"body\").pushContainer(\"body\", t.returnStatement(uid));\n          loop.setData(\"expressionReplacementReturnUid\", uid);\n        } else {\n          uid = t.identifier(uid.name);\n        }\n\n        path.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", uid, path.node.expression));\n      } else {\n        path.replaceWith(t.returnStatement(path.node.expression));\n      }\n    }\n\n    return this.node;\n  }\n}\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n      this._containerInsertAfter(nodes);\n      return this.remove();\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}"],"file":"replacement.js"}